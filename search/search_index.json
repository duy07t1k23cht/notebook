{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Duy M. Nguyen's notebook","text":"<p>M\u1ee5c \u0111\u00edch c\u1ee7a trang blog n\u00e0y l\u00e0 \u0111\u1ec3 c\u00e1 nh\u00e2n m\u00ecnh note l\u1ea1i m\u1ecdi th\u1ee9 m\u00e0 m\u00ecnh th\u1ea5y c\u1ea7n thi\u1ebft cho b\u1ea3n th\u00e2n, bao g\u1ed3m nh\u1eefng th\u1ee9 li\u00ean quan \u0111\u1ebfn c\u00f4ng vi\u1ec7c engineer c\u1ee7a m\u00ecnh, t\u1eeb m\u1ea5y c\u00e1i nh\u1ecf nh\u01b0 c\u00e1c thu\u1eadt to\u00e1n thi\u1ebfu nhi, \u0111\u1ebfn m\u1ea5y c\u00e1i l\u1edbn h\u01a1n nh\u01b0 System Design, hay c\u00e1c thu\u1eadt to\u00e1n Machine Learning,... (ch\u1eafc ch\u1ee7 y\u1ebfu s\u1ebd l\u00e0 nh\u1eefng c\u00e1i nh\u1ecf, v\u00ec m\u1ea5y c\u00e1i to m\u00ecnh l\u01b0\u1eddi vi\u1ebft )</p> <p>Ngo\u00e0i ra nh\u1eefng th\u1ee9 linh tinh nh\u01b0 c\u1ea3m nh\u1eadn c\u00e1 nh\u00e2n sau khi xem m\u1ed9t b\u1ed9 phim, review v\u1ec1 m\u1ed9t m\u00f3n \u0111\u1ed3 linh tinh n\u00e0o \u0111\u1ea5y mua tr\u00ean s\u00e0n S hay s\u00e0n L, hay c\u1ea3m x\u00fac sau m\u1ed9t chuy\u1ebfn \u0111i ch\u01a1i \u1edf \u0111\u00e2u \u0111\u1ea5y th\u00ec c\u00f3 th\u1ec3 c\u0169ng \u0111\u01b0\u1ee3c ghi l\u00ean \u0111\u00e2y lu\u00f4n :v</p> <p>L\u1eddi nh\u1eafn nh\u1ee7</p> <p>M\u00ecnh bi\u1ebft l\u00e0 tr\u00ecnh \u0111\u1ed9 c\u1ee7a m\u00ecnh c\u00f2n g\u00e0, n\u00ean nh\u1eefng b\u00e0i post v\u1ec1 c\u00f4ng ngh\u1ec7 c\u1ee7a m\u00ecnh m\u00e0 xu\u1ea5t hi\u1ec7n ki\u1ebfn th\u1ee9c g\u00ec \u0111\u1ea5y sai ho\u1eb7c l\u1ed7i th\u1eddi l\u00e0 chuy\u1ec7n b\u00ecnh th\u01b0\u1eddng. N\u1ebfu m\u00e0 ph\u00e1t hi\u1ec7n ra m\u00ecnh sai ch\u1ed7 n\u00e0o th\u00ec mong b\u1ea1n \u0111\u1ecdc hoan h\u1ec9 nh\u1eafc nh\u1edf m\u00ecnh theo c\u00e1c k\u00eanh contact m\u00ecnh \u0111\u1ec3 g\u00f3c d\u01b0\u1edbi b\u00ean ph\u1ea3i c\u1ee7a page (m\u00ecnh r\u1ea5t mong \u0111i\u1ec1u n\u00e0y x\u1ea3y ra v\u00ec sai \u1edf \u0111\u00e2u th\u00ec b\u1ea3n th\u00e2n n\u00ean bi\u1ebft c\u00e0ng s\u1edbm c\u00e0ng t\u1ed1t \u0111\u1ec3 m\u00e0 s\u1eeda )</p> <p>G\u00f3c xin x\u1ecf</p> <p>Ngo\u00e0i trang blog n\u00e0y th\u00ec m\u00ecnh c\u00f2n m\u1edbi t\u1eadp ch\u01a1i tiktok v\u1edbi m\u1ed9t k\u00eanh v\u1ec1 thu\u1eadt to\u00e1n. Anh em cho xin m\u1ed9t follow \u1ee7ng h\u1ed9 l\u1ea5y tinh th\u1ea7n nh\u00e9 </p> <ul> <li> chikodevn</li> </ul> <p>B\u00e2y gi\u1edd anh em c\u00f3 th\u1ec3 b\u1ea5m v\u00e0o \u0111\u00e2y \u0111\u1ec3 b\u1eaft \u0111\u1ea7u \u0111\u1ecdc c\u00e1c b\u00e0i vi\u1ebft c\u1ee7a m\u00ecnh nh\u00e9. C\u1ea3m \u01a1n anh em nhi\u1ec1u </p>"},{"location":"blog/","title":"Recent Posts","text":""},{"location":"blog/hadoop-overview/","title":"Gi\u1edbi thi\u1ec7u v\u1ec1 Apache Hadoop","text":"<p>B\u00e0i vi\u1ebft n\u00e0y gi\u1edbi thi\u1ec7u c\u00e1i nh\u00ecn t\u1ed5ng quan nh\u1ea5t v\u1ec1 Apache Hadoop, bao g\u1ed3m ki\u1ebfn tr\u00fac, c\u00e1ch th\u1ee9c ho\u1ea1t \u0111\u1ed9ng c\u1ee7a n\u00f3.</p> <p>Apache Hadoop l\u00e0 m\u1ed9t framework d\u00f9ng \u0111\u1ec3 l\u01b0u tr\u1eef v\u00e0 x\u1eed l\u00fd d\u1eef li\u1ec7u l\u1edbn. Hadoop s\u1eed d\u1ee5ng m\u1ed9t cluster g\u1ed3m nhi\u1ec1u nodes \u0111\u1ec3 x\u1eed l\u00fd d\u1eef li\u1ec7u song song thay v\u00ec ch\u1ec9 s\u1eed d\u1ee5ng m\u1ed9t m\u00e1y duy nh\u1ea5t, c\u1ea3i thi\u1ec7n t\u1ed1c \u0111\u1ed9 khi x\u1eed l\u00fd d\u1eef li\u1ec7u l\u1edbn.<sup>1</sup></p>","tags":["Hadoop"]},{"location":"blog/hadoop-overview/#tong-quan-ve-hadoop","title":"T\u1ed5ng quan v\u1ec1 Hadoop","text":"<p>Hadoop s\u1eed d\u1ee5ng h\u00e0ng tr\u0103m th\u1eadm ch\u00ed h\u00e0ng ng\u00e0n servers l\u00e0m vi\u1ec7c c\u00f9ng nhau \u0111\u1ec3 l\u01b0u tr\u1eef v\u00e0 x\u1eed l\u00fd d\u1eef li\u1ec7u l\u1edbn.</p> <p>Hadoop bao g\u1ed3m 4 modules ch\u00ednh<sup>1</sup>:</p> <ul> <li>Hadoop Distributed File System (HDFS) l\u00e0 m\u1ed9t distributed file system, d\u00f9ng \u0111\u1ec3 l\u01b0u tr\u1eef data.</li> <li>Yet Another Resource Negotiator (YARN) l\u00e0 module \u0111\u1ec3 qu\u1ea3n l\u00fd v\u00e0 monitor c\u00e1c nodes. N\u00f3 c\u00f3 t\u00e1c d\u1ee5ng schedules c\u00e1c jobs v\u00e0 tasks, \u0111\u00f3ng vai tr\u00f2 nh\u01b0 m\u1ed9t resource manager.</li> <li>MapReduce l\u00e0 module th\u1ef1c thi\u1ec7n x\u1eed l\u00fd data. </li> <li>Hadoop Common cung c\u1ea5p c\u00e1c th\u01b0 vi\u1ec7n java \u0111\u1ec3 c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng \u1edf c\u00e1c module kh\u00e1c.</li> </ul> <p>M\u1ed9t Hadoop cluster bao g\u1ed3m m\u1ed9t ho\u1eb7c nhi\u1ec1u master nodes v\u00e0 nhi\u1ec1u slave nodes, c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c scale out b\u1eb1ng c\u00e1ch th\u00eam nodes v\u00e0o cluster.</p> <p>C\u00e1c ph\u1ea7n ti\u1ebfp theo c\u1ee7a b\u00e0i vi\u1ebft s\u1ebd n\u00f3i k\u1ef9 h\u01a1n v\u1ec1 ki\u1ebfn tr\u00fac v\u00e0 c\u00e1ch ho\u1ea1t \u0111\u1ed9ng c\u1ee7a Hadoop.</p>","tags":["Hadoop"]},{"location":"blog/hadoop-overview/#kien-truc-hadoop","title":"Ki\u1ebfn tr\u00fac Hadoop","text":"<p>Ki\u1ebfn tr\u00fac c\u1ee7a Hadoop c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c chia th\u00e0nh 4 layers:</p> T\u1ed5ng quan v\u1ec1 ki\u1ebfn tr\u00fac c\u1ee7a Hadoop","tags":["Hadoop"]},{"location":"blog/hadoop-overview/#distributed-storage-layer","title":"Distributed Storage Layer","text":"<p>Th\u1eb1ng n\u00e0y ch\u00ednh l\u00e0 th\u1eb1ng HDFS, bao g\u1ed3m m\u1ed9t ho\u1eb7c nhi\u1ec1u master nodes (hay c\u00f2n g\u1ecdi l\u00e0 NameNode) v\u00e0 nhi\u1ec1u slave nodes (hay c\u00f2n g\u1ecdi l\u00e0 DataNode). M\u1ed7i node c\u00f3 b\u1ed9 nh\u1edb c\u1ee7a ri\u00eang n\u00f3. Data \u0111\u01b0\u1ee3c \u0111\u01b0a v\u00e0o s\u1ebd \u0111\u01b0\u1ee3c chia th\u00e0nh c\u00e1c data blocks sau \u0111\u00f3 \u0111\u01b0\u1ee3c l\u01b0u \u1edf HDFS distributed storage layer. Ngo\u00e0i ra, HDFS l\u01b0u th\u00eam 3 b\u1ea3n copies c\u1ee7a data \u1edf tr\u00ean kh\u1eafp cluster. NameNode s\u1ebd l\u01b0u th\u00f4ng tin v\u1ec1 c\u00e1c data block c\u1ee5 th\u1ec3 v\u00e0 c\u00e1c replicas c\u1ee7a n\u00f3 \u0111\u01b0\u1ee3c l\u01b0u \u1edf \u0111\u00e2u trong cluster.</p>","tags":["Hadoop"]},{"location":"blog/hadoop-overview/#cluster-resource-management","title":"Cluster Resource Management","text":"<p>Th\u1eb1ng n\u00e0y ch\u00ednh l\u00e0 th\u1eb1ng YARN. N\u00f3 s\u1ebd ch\u1ec9 \u0111\u1ecbnh resource cho c\u00e1c frameworks kh\u00e1c \u0111\u01b0\u1ee3c vi\u1ebft cho Hadoop. M\u1ed9t s\u1ed1 framework nh\u01b0 Apache Pig, Hive, Giraph, Zookeeper. N\u00f3 c\u0169ng ch\u1ec9 \u0111\u1ecbnh resource cho ch\u00ednh th\u1eb1ng MapReduce lu\u00f4n.</p>","tags":["Hadoop"]},{"location":"blog/hadoop-overview/#processing-framework-layer","title":"Processing Framework Layer","text":"<p>Layer n\u00e0y bao g\u1ed3m c\u00e1c frameworks th\u1ef1c hi\u1ec7n c\u00e1c b\u01b0\u1edbc x\u1eed l\u00fd data. C\u00e1c framework nh\u01b0 Spark, Storm hay Tez b\u00e2y gi\u1edd c\u00f3 th\u1ec3 x\u1eed l\u00fd real-time, t\u0103ng hi\u1ec7u qu\u1ea3 cho h\u1ec7 th\u1ed1ng.</p>","tags":["Hadoop"]},{"location":"blog/hadoop-overview/#application-programming-interface","title":"Application Programming Interface","text":"<p>Nh\u01b0 t\u00ean g\u1ecdi c\u1ee7a n\u00f3, layer n\u00e0y g\u1ed3m c\u00e1c API \u0111\u1ec3 c\u00e1c l\u1eadp tr\u00ecnh vi\u00ean s\u1eed d\u1ee5ng.</p> <p>Chi ti\u1ebft v\u1ec1 c\u00e1ch ho\u1ea1t \u0111\u1ed9ng c\u1ee7a t\u1eebng th\u00e0nh ph\u1ea7n s\u1ebd \u0111\u01b0\u1ee3c n\u00f3i k\u1ef9 h\u01a1n \u1edf m\u1ed9t b\u00e0i vi\u1ebft kh\u00e1c.</p> <ol> <li> <p>AWS, What is Hadoop \u21a9\u21a9</p> </li> </ol>","tags":["Hadoop"]},{"location":"blog/load-balancing-algorithms/","title":"Load Balancing Algorithms","text":"<p>In this post, we'll provide a comprehensive overview of load balancing algorithms, discussing how they work and their pros and cons.</p> <p>A load balancer is a device that distributes network traffic across multiple servers. A load balancing algorithm is the logic a load balancer uses to distribute network traffic among these servers.<sup>1</sup></p> <p>There are two main categories of algorithms: static and dynamic. Let's explore each category and dive deeper into the major specific algorithms.<sup>2</sup></p>","tags":["Load Balancing"]},{"location":"blog/load-balancing-algorithms/#static-algorithms","title":"Static Algorithms","text":"<p>Static load balancing algorithms distribute requests to servers without taking into account the servers' real-time conditions and performance metrics.</p>","tags":["Load Balancing"]},{"location":"blog/load-balancing-algorithms/#round-robin","title":"Round Robin","text":"<p>Description</p> <p>Distributes requests evenly among servers in sequence.</p> <p>Pros</p> <ul> <li>Easy to implement and understand.</li> </ul> <p>Cons</p> <ul> <li>Can potentially overload servers if they are not properly monitored.</li> </ul>","tags":["Load Balancing"]},{"location":"blog/load-balancing-algorithms/#sticky-round-robin","title":"Sticky Round Robin","text":"<p>Description</p> <p>An extension of round robin that tries to route subsequent requests from the same user to the same server.</p> <p>Pros</p> <ul> <li>Improves performance by keeping related data on the same server.</li> </ul> <p>Cons</p> <ul> <li>Uneven loads can easily occur since newly arriving users are assigned randomly.</li> </ul>","tags":["Load Balancing"]},{"location":"blog/load-balancing-algorithms/#weighted-round-robin","title":"Weighted Round Robin","text":"<p>Description</p> <p>Allows admins to assign different weights or priorities to different servers. Servers with higher weights receive higher number of requests.</p> <p>Pros</p> <ul> <li>Accounts for heterogeneous server capabilities.</li> </ul> <p>Cons</p> <ul> <li>Weights must be manually configured, which is less adaptive to real-time changes.</li> </ul>","tags":["Load Balancing"]},{"location":"blog/load-balancing-algorithms/#hash-based-algorithms","title":"Hash-Based Algorithms","text":"<p>Description</p> <p>Uses a hash function to map incoming requests to the backend servers. The hash function often uses the client's IP address or the requested URL as input for determining where to route each request.</p> <p>Pros</p> <ul> <li>Can evenly distribute requests if the function is chosen wisely.</li> </ul> <p>Cons</p> <ul> <li>Selecting an optimal hash function can be challenging.</li> </ul>","tags":["Load Balancing"]},{"location":"blog/load-balancing-algorithms/#dynamic-algorithms","title":"Dynamic Algorithms","text":"<p>Dynamic load balancing algorithms adapt in real-time by taking active performance metrics and server conditions into account when distributing requests.</p>","tags":["Load Balancing"]},{"location":"blog/load-balancing-algorithms/#least-connections","title":"Least Connections","text":"<p>Description</p> <p>Sends each new request to the server currently with the least number of active connections or open requests.</p> <p>Pros</p> <ul> <li>New requests are adaptively routed to where there is the most remaining capacity.</li> </ul> <p>Cons</p> <ul> <li>Requires actively tracking the number of ongoing connections on each backend server.</li> <li>Load can unintentionally concentrate on certain servers if connections pile up unevenly.</li> </ul>","tags":["Load Balancing"]},{"location":"blog/load-balancing-algorithms/#least-response-time","title":"Least Response Time","text":"<p>Description</p> <p>Sends incoming requests to the server with the lowest current latency or fastest response time. Latency for each server is continuously measured and factored in.</p> <p>Pros</p> <ul> <li>Highly adaptive and reactive.</li> </ul> <p>Cons</p> <ul> <li>Requires constant monitoring, which incurs significant overhead and introduces complexity.</li> <li>Does not consider how many existing requests each server already has.</li> </ul>","tags":["Load Balancing"]},{"location":"blog/load-balancing-algorithms/#summary","title":"Summary","text":"<p>There are clear tradeoffs between simple static algorithms and more adaptive dynamic ones. Static algorithms like round robin work well for stateless applications. Dynamic algorithms help optimize response times and availability for large, complex applications.<sup>2</sup></p> <ol> <li> <p>Cloudflare, Types of load balancing algorithms \u21a9</p> </li> <li> <p>ByteByteGo, Top 6 Load Balancing Algorithms Every Developer Should Know \u21a9\u21a9</p> </li> </ol>","tags":["Load Balancing"]},{"location":"courses/","title":"Courses","text":"Mock System Design Interview <ul> <li>Design a URL Shortening Service - Mock System Design Interviews #1</li> </ul>"},{"location":"courses/mastering-system-design-interview/","title":"Index","text":"Mock System Design Interview <ul> <li>Design a URL Shortening Service - Mock System Design Interviews #1</li> </ul>"},{"location":"courses/mastering-system-design-interview/mock-system-design-interview-1/","title":"Design a URL Shortening Service - Mock System Design Interviews #1","text":""},{"location":"courses/mastering-system-design-interview/mock-system-design-interview-1/#qa","title":"Q&amp;A","text":"<p>Candidate: </p>"},{"location":"leetcode/","title":"LeetCode Series","text":"<p>\u0110\u00e2y l\u00e0 t\u1ed5ng h\u1ee3p c\u00e1c b\u00e0i t\u1eadp tr\u00ean  LeetCode ch\u1ecdn l\u1ecdc c\u00f9ng c\u00e1ch gi\u1ea3i v\u00e0 code.</p> <p>V\u00ec c\u00e1c b\u00e0i t\u1eadp tr\u00ean  LeetCode th\u01b0\u1eddng kh\u00f4ng c\u00f3 format cho Input v\u00e0 Output n\u00ean c\u00f3 th\u1ec3 \u1edf d\u01b0\u1edbi s\u1ebd t\u1ef1 b\u1ecba.</p> <p>T\u00ean c\u00e1c bi\u1ebfn xu\u1ea5t hi\u1ec7n trong \u0111\u1ec1 b\u00e0i n\u1ebfu c\u1ea7n c\u0169ng s\u1ebd \u0111\u1ed5i lu\u00f4n cho n\u00f3 d\u1ec5 nh\u00ecn v\u1ec1 m\u1eb7t to\u00e1n h\u1ecdc.</p> <p>Gi\u1edbi h\u1ea1n r\u00e0ng bu\u1ed9c c\u1ee7a b\u00e0i to\u00e1n c\u00f3 th\u1ec3 c\u0169ng thay lu\u00f4n, v\u00ec nhi\u1ec1u khi  LeetCode \u0111\u1ec3 r\u00e0ng bu\u1ed9c qu\u00e1 l\u1ecfng.</p> <p>Ch\u1ee7 y\u1ebfu l\u00e0 \u0111\u1ec3 t\u00e1i s\u1eed d\u1ee5ng n\u1ebfu c\u1ea7n. C\u00e1c b\u00e0i to\u00e1n h\u1ea7u h\u1ebft s\u1ebd \u0111\u01b0\u1ee3c code b\u1eb1ng </p> <p>L\u01b0u \u00fd</p> <p>N\u1ebfu c\u00e1c c\u00f4ng th\u1ee9c to\u00e1n trong b\u00e0i vi\u1ebft kh\u00f4ng hi\u1ec3n th\u1ecb \u0111\u00fang, b\u1ea5m F5 \u0111\u1ec3 t\u1ea3i l\u1ea1i trang l\u1ea7n n\u1eefa.</p>"},{"location":"leetcode/#danh-sach-cac-bai-tap-leetcode","title":"Danh s\u00e1ch c\u00e1c b\u00e0i t\u1eadp LeetCode","text":""},{"location":"leetcode/#0-999","title":"0 - 999","text":"<ul> <li>714.\u00a0Best Time to Buy and Sell Stock with Transaction Fee</li> </ul>"},{"location":"leetcode/#1000-1999","title":"1000 - 1999","text":"<ul> <li>1175.\u00a0Prime Arrangements</li> </ul>"},{"location":"leetcode/#2000-2999","title":"2000 - 2999","text":"<ul> <li>2485.\u00a0Find the Pivot Integer</li> </ul>"},{"location":"leetcode/1175/","title":"1175.\u00a0Prime Arrangements","text":"<p>Easy</p> <p>Cho s\u1ed1 t\u1ef1 nhi\u00ean \\(n\\), tr\u1ea3 v\u1ec1 s\u1ed1 ho\u00e1n v\u1ecb c\u1ee7a c\u00e1c s\u1ed1 t\u1eeb \\(1\\) \u0111\u1ebfn \\(n\\) sao cho c\u00e1c s\u1ed1 nguy\u00ean t\u1ed1 \u0111\u1ee9ng \u1edf c\u00e1c v\u1ecb tr\u00ed nguy\u00ean t\u1ed1 (v\u1ecb tr\u00ed \u0111\u01b0\u1ee3c \u0111\u00e1nh s\u1ed1 b\u1eaft \u0111\u1ea7u t\u1eeb \\(1\\)).</p> <p>V\u00ec k\u1ebft qu\u1ea3 c\u00f3 th\u1ec3 r\u1ea5t l\u1edbn n\u00ean tr\u1ea3 v\u1ec1 k\u1ebft qu\u1ea3 sau khi chia l\u1ea5y d\u01b0 cho \\(10^9+7\\).</p> <p>Input</p> <ul> <li>G\u1ed3m m\u1ed9t d\u00f2ng duy nh\u1ea5t ch\u1ee9a \\(n\\)</li> </ul> <p>Output</p> <ul> <li>G\u1ed3m m\u1ed9t d\u00f2ng duy nh\u1ea5t l\u00e0 k\u1ebft qu\u1ea3 c\u1ee7a b\u00e0i to\u00e1n</li> </ul> <p>R\u00e0ng bu\u1ed9c</p> <ul> <li>\\(1 \\leq n \\leq 100\\)</li> </ul> <p>V\u00ed d\u1ee5</p> <p>V\u00ed d\u1ee5 1</p> <p>Input<pre><code>5\n</code></pre> Output<pre><code>12\n</code></pre> Gi\u1ea3i th\u00edch: Ch\u1eb3ng h\u1ea1n ho\u00e1n v\u1ecb \\([1, 2, 5, 4, 3]\\) l\u00e0 m\u1ed9t ho\u00e1n v\u1ecb tho\u1ea3 m\u00e3n, nh\u01b0ng ho\u00e1n v\u1ecb \\([5, 2, 3, 4, 1]\\) th\u00ec kh\u00f4ng.</p> <p>V\u00ed d\u1ee5 2</p> <p>Input<pre><code>100\n</code></pre> Output<pre><code>682289015\n</code></pre></p> Link n\u1ed9p b\u00e0i <p>1175.\u00a0Prime Arrangements</p> Solution <p>Gi\u1ea3 s\u1eed c\u00f3 \\(p\\) s\u1ed1 nguy\u00ean t\u1ed1 trong \u0111o\u1ea1n t\u1eeb \\(1\\) \u0111\u1ebfn \\(n\\). V\u00ec c\u00e1c s\u1ed1 nguy\u00ean t\u1ed1 ch\u1ec9 c\u00f3 th\u1ec3 \u1edf v\u1ecb tr\u00ed nguy\u00ean t\u1ed1 n\u00ean ta c\u00f3 \\(p!\\) c\u00e1ch ch\u1ecdn v\u1ecb tr\u00ed cho \\(p\\) s\u1ed1 n\u00e0y.</p> <p>V\u1edbi m\u1ed7i c\u00e1ch ch\u1ecdn v\u1ecb tr\u00ed cho \\(p\\) s\u1ed1 nguy\u00ean t\u1ed1, ta c\u00f3 \\((n - p)!\\) c\u00e1ch ch\u1ecdn v\u1ecb tr\u00ed cho c\u00e1c s\u1ed1 c\u00f2n l\u1ea1i.</p> <p>Nh\u01b0 v\u1eady k\u1ebft qu\u1ea3 b\u00e0i to\u00e1n l\u00e0:</p> \\[ p!(n-p)! \\] <p>v\u1edbi \\(p\\) l\u00e0 s\u1ed1 s\u1ed1 nguy\u00ean t\u1ed1 t\u1eeb \\(1\\) \u0111\u1ebfn \\(n\\).</p> <p>Nh\u01b0 v\u1eady ch\u1ec9 c\u1ea7n t\u00ecm \\(p\\) l\u00e0 s\u1ed1 l\u01b0\u1ee3ng s\u1ed1 nguy\u00ean t\u1ed1 t\u1eeb \\(1\\) \u0111\u1ebfn \\(n\\) l\u00e0 ta c\u00f3 th\u1ec3 gi\u1ea3i b\u00e0i to\u00e1n n\u00e0y.</p> <p>\u0110\u1ec1 b\u00e0i ch\u1ec9 cho gi\u1edbi h\u1ea1n \\(n \\leq 100\\) n\u00ean th\u00edch qu\u1ea9y s\u00e0ng nguy\u00ean t\u1ed1 hay c\u00e1i g\u00ec c\u0169ng \u0111\u01b0\u1ee3c.</p> Code  C++ Python <pre><code>class Solution {\npublic:\n    const long long MOD = 1000000007;\n\n    long long numPrimeArrangements(long long n) {\n\n        // S\u00e0ng nguy\u00ean t\u1ed1\n        vector&lt;bool&gt; isPrime(n + 1, true);\n        isPrime[0] = false;\n        isPrime[1] = false;\n\n        for (int i = 2; i * i &lt;= n; i++) {\n            if (isPrime[i])\n                for (int j = i * i; j &lt;= n; j += i) {\n                    isPrime[j] = false;\n                }\n        }\n\n        // \u0110\u1ebfm s\u1ed1 s\u1ed1 nguy\u00ean t\u1ed1 trong kho\u1ea3ng t\u1eeb 1 \u0111\u1ebfn n\n        long long count = 0;\n        for (long long i = 0; i &lt;= n; i++) {\n            if (isPrime[i])\n                count++;\n        }\n\n        // T\u00ednh k\u1ebft qu\u1ea3\n        long long result = 1;\n        for (long long i = 1; i &lt;= count; i++) {\n            result = (result * i) % MOD;\n        }\n        for (long long i = 1; i &lt;= n - count; i++) {\n            result = (result * i) % MOD;\n        }\n\n        return result;\n    }\n};\n</code></pre> <pre><code>class Solution:\n    def numPrimeArrangements(self, n: int) -&gt; int:\n        MOD = int(1e9 + 7)\n\n        is_prime = [True] * (n + 1)\n        is_prime[0] = False\n        is_prime[1] = False\n\n        for i in range(2, int(n ** .5) + 1):\n            for j in range(i * i, n + 1, i):\n                is_prime[j] = False\n\n        count = 0\n        for i in range(n + 1):\n            if is_prime[i]:\n                count += 1\n\n        ans = 1\n        for i in range(1, count + 1):\n            ans = (ans * i) % MOD\n        for i in range(1, n - count + 1):\n            ans = (ans * i) % MOD\n\n        return ans\n</code></pre>"},{"location":"leetcode/2485/","title":"2485.\u00a0Find the Pivot Integer","text":"<p>Easy</p> <p>Cho m\u1ed9t s\u1ed1 t\u1ef1 nhi\u00ean \\(n\\). H\u00e3y t\u00ecm s\u1ed1 t\u1ef1 nhi\u00ean \\(x\\) sao cho t\u1ed5ng c\u1ee7a c\u00e1c s\u1ed1 t\u1eeb \\(1\\) \u0111\u1ebfn \\(x\\) b\u1eb1ng t\u1ed5ng c\u1ee7a c\u00e1c s\u1ed1 t\u1eeb \\(x\\) \u0111\u1ebfn \\(n\\). N\u1ebfu kh\u00f4ng c\u00f3 s\u1ed1 t\u1ef1 nhi\u00ean n\u00e0o tho\u1ea3 m\u00e3n th\u00ec in ra \\(-1\\).</p> <p>Input</p> <ul> <li>G\u1ed3m m\u1ed9t d\u00f2ng duy nh\u1ea5t ch\u1ee9a \\(n\\)</li> </ul> <p>Output</p> <ul> <li>G\u1ed3m m\u1ed9t d\u00f2ng duy nh\u1ea5t l\u00e0 k\u1ebft qu\u1ea3 c\u1ee7a b\u00e0i to\u00e1n</li> </ul> <p>R\u00e0ng bu\u1ed9c</p> <ul> <li>\\(1 \\leq n \\leq 10^3\\)</li> </ul> <p>V\u00ed d\u1ee5</p> <p>V\u00ed d\u1ee5 1</p> <p>Input<pre><code>8\n</code></pre> Output<pre><code>6\n</code></pre> Gi\u1ea3i th\u00edch: \\(1 + 2 + 3 + 4 + 5 + 6 = 6 + 7 + 8 = 21\\).</p> <p>V\u00ed d\u1ee5 2</p> <p>Input<pre><code>1\n</code></pre> Output<pre><code>1\n</code></pre></p> <p>V\u00ed d\u1ee5 3</p> <p>Input<pre><code>4\n</code></pre> Output<pre><code>-1\n</code></pre></p> Link n\u1ed9p b\u00e0i <p>2485.\u00a0Find the Pivot Integer</p> Solution <p>To\u00e1n th\u00f4ng th\u01b0\u1eddng:</p> \\[ \\begin{align*}     &amp;&amp;1 + 2 + \\dots + x &amp;= x + (x + 1) + \\dots + n \\\\  \\Leftrightarrow &amp;&amp;\\dfrac{x(x+ 1)}{2} &amp;= \\dfrac{n(n+ 1)}{2} - \\dfrac{(x - 1)x}{2} \\\\  \\Leftrightarrow &amp;&amp; 2x^2 &amp;= n(n+1) \\\\  \\Leftrightarrow &amp;&amp; x &amp;= \\sqrt{\\dfrac{n(n + 1)}{2}}, \\quad \\text{do } x &gt; 0 \\end{align*} \\] <p>Nh\u01b0 v\u1eady ta ch\u1ec9 c\u1ea7n ki\u1ec3m tra \\(\\dfrac{n(n + 1)}{2}\\) c\u00f3 ph\u1ea3i s\u1ed1 ch\u00ednh ph\u01b0\u01a1ng kh\u00f4ng l\u00e0 \u0111\u01b0\u1ee3c. N\u1ebfu c\u00f3 th\u00ec tr\u1ea3 v\u1ec1 \\(x\\) nh\u01b0 gi\u1ea3i \u1edf tr\u00ean, n\u1ebfu kh\u00f4ng th\u00ec tr\u1ea3 v\u1ec1 <code>-1</code>.</p> <p>\u0110\u1ed9 ph\u1ee9c t\u1ea1p l\u00e0 \\(\\text{O}(1)\\). B\u00e0i n\u00e0y \u0111\u00e1ng l\u1ebd ph\u1ea3i cho gi\u1edbi h\u1ea1n \\(n\\) l\u00e0 \\(10^9\\).</p> Code  C++ Python <pre><code>class Solution {\npublic:\n    int pivotInteger(int n) {\n        int x = (int) sqrt((n * n + n) / 2);\n        return 2 * x * x == n * (n + 1) ? x : -1;\n    }\n};\n</code></pre> <pre><code>class Solution:\ndef pivotInteger(self, n: int) -&gt; int:\n    ans = int((n * (n + 1) // 2) ** .5)\n    if ans * ans == n * (n + 1) // 2:\n        return ans\n    else:\n        return -1\n</code></pre>"},{"location":"leetcode/714/","title":"714.\u00a0Best Time to Buy and Sell Stock with Transaction Fee","text":"<p>Medium</p> <p>Cho m\u1ea3ng <code>prices</code> g\u1ed3m <code>n</code> ph\u1ea7n t\u1eed, trong \u0111\u00f3 <code>prices[i]</code> l\u00e0 gi\u00e1 c\u1ee7a m\u1ed9t lo\u1ea1i c\u1ed5 phi\u1ebfu v\u00e0o ng\u00e0y th\u1ee9 <code>i</code>. Ph\u00ed giao d\u1ecbch l\u00e0 <code>fee</code>.</p> <p>H\u00e3y t\u00ecm l\u1ee3i nhu\u1eadn t\u1ed1i \u0111a c\u00f3 th\u1ec3 \u0111\u1ea1t \u0111\u01b0\u1ee3c nh\u1edd vi\u1ec7c mua b\u00e1n c\u1ed5 phi\u1ebfu. B\u1ea1n c\u00f3 th\u1ec3 giao d\u1ecbch bao nhi\u00eau l\u1ea7n b\u1ea1n mu\u1ed1n, nh\u01b0ng b\u1ea1n c\u1ea7n ph\u1ea3i tr\u1ea3 <code>fee</code> \u0111\u1ed3ng cho m\u1ed7i giao d\u1ecbch.</p> <p>L\u01b0u \u00fd: B\u1ea1n kh\u00f4ng \u0111\u01b0\u1ee3c ph\u00e9p tham gia nhi\u1ec1u giao d\u1ecbch c\u00f9ng m\u1ed9t l\u00fac, ngh\u0129a l\u00e0 b\u1ea1n ph\u1ea3i b\u00e1n c\u1ed5 phi\u1ebfu th\u00ec m\u1edbi \u0111\u01b0\u1ee3c ti\u1ebfp t\u1ee5c mua l\u1ea1i.</p> <p>Input</p> <ul> <li>D\u00f2ng \u0111\u1ea7u ti\u00ean ch\u1ee9a 2 s\u1ed1 nguy\u00ean <code>n</code> v\u00e0 <code>fee</code></li> <li>D\u00f2ng th\u1ee9 hai ch\u1ee9a <code>n</code> s\u1ed1 nguy\u00ean c\u1ee7a <code>prices</code></li> </ul> <p>Output</p> <ul> <li>G\u1ed3m m\u1ed9t d\u00f2ng duy nh\u1ea5t l\u00e0 k\u1ebft qu\u1ea3 c\u1ee7a b\u00e0i to\u00e1n</li> </ul> <p>R\u00e0ng bu\u1ed9c</p> <ul> <li>\\(1 \\leq\\) <code>n</code> \\(\\leq 5 \\times 10^4\\)</li> <li>\\(1 \\leq\\) <code>prices[i]</code> \\(&lt; 5 \\times 10^4\\)</li> <li>\\(0 \\leq\\) <code>fee</code> \\(&lt; 5 \\times 10^4\\)</li> </ul> <p>V\u00ed d\u1ee5</p> <p>V\u00ed d\u1ee5 1</p> <p>Input<pre><code>6 2\n1 3 2 8 4 9\n</code></pre> Output<pre><code>8\n</code></pre> Gi\u1ea3i th\u00edch: L\u1ee3i nhu\u1eadn t\u1ed1i \u0111a \u0111\u1ea1t \u0111\u01b0\u1ee3c b\u1eb1ng c\u00e1ch:</p> <ul> <li>Mua \u1edf ng\u00e0y 0, gi\u00e1 b\u1eb1ng \\(1\\)</li> <li>B\u00e1n \u1edf ng\u00e0y 3, gi\u00e1 b\u1eb1ng \\(8\\)</li> <li>Mua \u1edf ng\u00e0y 4, gi\u00e1 b\u1eb1ng \\(4\\)</li> <li>B\u00e1n \u1edf ng\u00e0y 5, gi\u00e1 b\u1eb1ng \\(9\\)</li> </ul> <p>T\u1ed5ng l\u1ee3i nhu\u1eadn l\u00e0 \\(((8 - 1) - 2) + ((9 - 4) - 2) = 8\\).</p> <p>V\u00ed d\u1ee5 2</p> <p>Input<pre><code>6 3\n1 3 7 5 10 3\n</code></pre> Output<pre><code>6\n</code></pre></p> Link n\u1ed9p b\u00e0i <p>714.\u00a0Best Time to Buy and Sell Stock with Transaction Fee</p> Solution <p>Quy ho\u1ea1ch \u0111\u1ed9ng: G\u1ecdi <code>free[i]</code> l\u00e0 l\u1ee3i nhu\u1eadn l\u1edbn nh\u1ea5t n\u1ebfu kh\u00f4ng gi\u1eef c\u1ed5 phi\u1ebfu v\u00e0o ng\u00e0y th\u1ee9 <code>i</code> v\u00e0 <code>hold[i]</code> l\u00e0 l\u1ee3i nhu\u1eadn l\u1edbn nh\u1ea5t n\u1ebfu gi\u1eef c\u1ed5 phi\u1ebfu v\u00e0o ng\u00e0y th\u1ee9 <code>i</code>.</p> <p>C\u00f4ng th\u1ee9c quy ho\u1ea1ch \u0111\u1ed9ng:</p> <ul> <li><code>free[i] = max(free[i - 1], hold[i - 1] + prices[i] - fee)</code> (Ho\u1eb7c tr\u01b0\u1edbc \u0111\u00f3 \u0111ang kh\u00f4ng gi\u1eef c\u1ed5 phi\u1ebfu v\u00e0 sau \u0111\u00f3 kh\u00f4ng l\u00e0m g\u00ec v\u00e0o ng\u00e0y th\u1ee9 <code>i</code>, ho\u1eb7c b\u00e1n c\u1ed5 phi\u1ebfu \u0111\u00f3 v\u00e0o ng\u00e0y th\u1ee9 <code>i</code>);</li> <li><code>hold[i] = max(hold[i - 1], free[i - 1] - prices[i]</code> (Ho\u1eb7c tr\u01b0\u1edbc \u0111\u00f3 \u0111ang gi\u1eef c\u1ed5 phi\u1ebfu v\u00e0 sau \u0111\u00f3 kh\u00f4ng l\u00e0m g\u00ec v\u00e0o ng\u00e0y th\u1ee9 <code>i</code>, ho\u1eb7c tr\u01b0\u1edbc \u0111\u00f3 \u0111ang kh\u00f4ng gi\u1eef c\u1ed5 phi\u1ebfu v\u00e0 mua c\u1ed5 phi\u1ebfu v\u00e0o ng\u00e0y th\u1ee9 <code>i</code>.</li> </ul> <p>K\u1ebft qu\u1ea3 b\u00e0i to\u00e1n l\u00e0 <code>free[n - 1]</code> (c\u00e1c ch\u1ec9 s\u1ed1 \u0111\u01b0\u1ee3c \u0111\u00e1nh s\u1ed1 b\u1eaft \u0111\u1ea7u t\u1eeb \\(0\\)).</p> <p>V\u00ec <code>free[i]</code> v\u00e0 <code>hold[i]</code> ch\u1ec9 ph\u1ee5 thu\u1ed9c v\u00e0o <code>free[i - 1]</code> v\u00e0 <code>hold[i - 1]</code>, n\u00ean thay v\u00ec d\u00f9ng m\u1ea3ng \u0111\u1ec3 l\u01b0u th\u00ec ta ch\u1ec9 c\u1ea7n m\u1ed9t bi\u1ebfn <code>free</code> \u0111\u1ec3 l\u01b0u l\u1ee3i nhu\u1eadn l\u1edbn nh\u1ea5t n\u1ebfu kh\u00f4ng gi\u1eef c\u1ed5 phi\u1ebfu v\u00e0o ng\u00e0y th\u1ee9 <code>i</code> v\u00e0 m\u1ed9t bi\u1ebfn <code>hold</code> \u0111\u1ec3 l\u01b0u l\u1ee3i nhu\u1eadn l\u1edbn nh\u1ea5t n\u1ebfu gi\u1eef c\u1ed5 phi\u1ebfu v\u00e0o ng\u00e0y th\u1ee9 <code>i</code>. L\u00fac duy\u1ec7t ta s\u1ebd c\u1eadp nh\u1eadt 2 bi\u1ebfn n\u00e0y.</p> <p>\u0110\u1ed9 ph\u1ee9c t\u1ea1p \\(\\text{O}(n)\\).</p> Code  C++ Python <pre><code>class Solution {\npublic:\n    int maxProfit(vector&lt;int&gt;&amp; prices, int fee) {\n        int n = prices.size();\n        int free = 0, hold = -prices[0];\n\n        for (int i = 1; i &lt; n; i++) {\n            int tmp = hold;\n            hold = max(hold, free - prices[i]);\n            free = max(free, tmp + prices[i] - fee);\n        }\n\n        return free;\n    }\n};\n</code></pre> <pre><code>class Solution:\ndef maxProfit(self, prices: List[int], fee: int) -&gt; int:\n    free = 0\n    hold = -prices[0]\n\n    for i in range(1, len(prices)):\n        hold, free = max(hold, free - prices[i]), max(free, hold + prices[i] - fee)\n\n    return free\n</code></pre>"},{"location":"blog/category/flag_gb/","title":"\ud83c\uddec\ud83c\udde7","text":""},{"location":"blog/category/system-design/","title":"System Design","text":""},{"location":"blog/category/flag_vn/","title":"\ud83c\uddfb\ud83c\uddf3","text":""},{"location":"tags/","title":"Tags","text":""},{"location":"tags/#hadoop","title":"Hadoop","text":"<ul> <li>Gi\u1edbi thi\u1ec7u v\u1ec1 Apache Hadoop</li> </ul>"},{"location":"tags/#load-balancing","title":"Load Balancing","text":"<ul> <li>Load Balancing Algorithms</li> </ul>"}]}