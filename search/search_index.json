{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Duy M. Nguyen's notebook","text":"<p>M\u1ee5c \u0111\u00edch c\u1ee7a trang blog n\u00e0y l\u00e0 \u0111\u1ec3 c\u00e1 nh\u00e2n m\u00ecnh note l\u1ea1i m\u1ecdi th\u1ee9 m\u00e0 m\u00ecnh th\u1ea5y c\u1ea7n thi\u1ebft cho b\u1ea3n th\u00e2n, bao g\u1ed3m nh\u1eefng th\u1ee9 li\u00ean quan \u0111\u1ebfn c\u00f4ng vi\u1ec7c engineer c\u1ee7a m\u00ecnh, t\u1eeb m\u1ea5y c\u00e1i nh\u1ecf nh\u01b0 c\u00e1c thu\u1eadt to\u00e1n thi\u1ebfu nhi, \u0111\u1ebfn m\u1ea5y c\u00e1i l\u1edbn h\u01a1n nh\u01b0 System Design, hay c\u00e1c thu\u1eadt to\u00e1n Machine Learning,... (ch\u1eafc ch\u1ee7 y\u1ebfu s\u1ebd l\u00e0 nh\u1eefng c\u00e1i nh\u1ecf, v\u00ec m\u1ea5y c\u00e1i to m\u00ecnh l\u01b0\u1eddi vi\u1ebft )</p> <p>Ngo\u00e0i ra nh\u1eefng th\u1ee9 linh tinh nh\u01b0 c\u1ea3m nh\u1eadn c\u00e1 nh\u00e2n sau khi xem m\u1ed9t b\u1ed9 phim, review v\u1ec1 m\u1ed9t m\u00f3n \u0111\u1ed3 linh tinh n\u00e0o \u0111\u1ea5y mua tr\u00ean s\u00e0n S hay s\u00e0n L, hay c\u1ea3m x\u00fac sau m\u1ed9t chuy\u1ebfn \u0111i ch\u01a1i \u1edf \u0111\u00e2u \u0111\u1ea5y th\u00ec c\u00f3 th\u1ec3 c\u0169ng \u0111\u01b0\u1ee3c ghi l\u00ean \u0111\u00e2y lu\u00f4n :v</p> <p>L\u1eddi nh\u1eafn nh\u1ee7</p> <p>M\u00ecnh bi\u1ebft l\u00e0 tr\u00ecnh \u0111\u1ed9 c\u1ee7a m\u00ecnh c\u00f2n g\u00e0, n\u00ean nh\u1eefng b\u00e0i post v\u1ec1 c\u00f4ng ngh\u1ec7 c\u1ee7a m\u00ecnh m\u00e0 xu\u1ea5t hi\u1ec7n ki\u1ebfn th\u1ee9c g\u00ec \u0111\u1ea5y sai ho\u1eb7c l\u1ed7i th\u1eddi l\u00e0 chuy\u1ec7n b\u00ecnh th\u01b0\u1eddng. N\u1ebfu m\u00e0 ph\u00e1t hi\u1ec7n ra m\u00ecnh sai ch\u1ed7 n\u00e0o th\u00ec mong b\u1ea1n \u0111\u1ecdc hoan h\u1ec9 nh\u1eafc nh\u1edf m\u00ecnh theo c\u00e1c k\u00eanh contact m\u00ecnh \u0111\u1ec3 g\u00f3c d\u01b0\u1edbi b\u00ean ph\u1ea3i c\u1ee7a page (m\u00ecnh r\u1ea5t mong \u0111i\u1ec1u n\u00e0y x\u1ea3y ra v\u00ec sai \u1edf \u0111\u00e2u th\u00ec b\u1ea3n th\u00e2n n\u00ean bi\u1ebft c\u00e0ng s\u1edbm c\u00e0ng t\u1ed1t \u0111\u1ec3 m\u00e0 s\u1eeda )</p> <p>G\u00f3c xin x\u1ecf</p> <p>Ngo\u00e0i trang blog n\u00e0y th\u00ec m\u00ecnh c\u00f2n m\u1edbi t\u1eadp ch\u01a1i tiktok v\u1edbi m\u1ed9t k\u00eanh v\u1ec1 thu\u1eadt to\u00e1n. Anh em cho xin m\u1ed9t follow \u1ee7ng h\u1ed9 l\u1ea5y tinh th\u1ea7n nh\u00e9 </p> <p> chikodevn</p> <p>B\u00e2y gi\u1edd anh em c\u00f3 th\u1ec3 b\u1ea5m v\u00e0o \u0111\u00e2y \u0111\u1ec3 b\u1eaft \u0111\u1ea7u \u0111\u1ecdc c\u00e1c b\u00e0i vi\u1ebft c\u1ee7a m\u00ecnh nh\u00e9. C\u1ea3m \u01a1n anh em nhi\u1ec1u </p>"},{"location":"blog/","title":"Recent Posts","text":""},{"location":"blog/tags/","title":"Tags","text":""},{"location":"blog/soft-skills-eval/","title":"Soft Skills Interview Questions And Answers To Prepare","text":"<p>A collection of soft skills interview questions and answers to prepare for the upcoming interview.</p> <p>To provide responses that highlight your skills and portray you as a suitable candidate for the job role, use the components of the STAR interview technique<sup>1</sup>. According to this technique:</p> <ul> <li>Situation: Explain a situation you encountered in the workplace and what factors contributed to the situation.</li> <li>Task: Talk about your involvement and role in the situation. Describe the goals or tasks created for you.</li> <li>Action: Describe what actions you took to handle and address the situation. Also, explain how your action affected your mindset towards accomplishing your workplace goals.</li> <li>Result: Outline the outcome you reached through your actions. Quantify your success to show the effects of your actions.</li> </ul> How do you feel about working in a team environment? <p>Tip</p> <ul> <li>Provide examples of your experience of collaborating with others.</li> <li>Mention how you enjoy collaborating and learning from others.</li> <li>Show that you understand the importance of both personal accountability and collective success.</li> </ul> <p>Example Answer</p> <p>I believe that collaboration leads to more innovativate and effective solutions. I enjoy working with others, sharing ideas, and learning from my teammates.</p> <p>In my last role, I was part of a team that developed a new feature for our product. By working closely with designers, developers, and analysts, we delivered a feature that improved the product and exceeded user expectations. I always prioritize open communication, focusing on team success rather than winning individual discussions, which I believe is key to a successful team.</p> What is the most significant problem you solved in the workplace? <p>Tip</p> <ul> <li>Discuss a situation where you helped solve a problem that had a positive outcome.</li> <li>Use the STAR Method</li> <li>Highlight the impact of your solution on the team, project, or company</li> </ul> <p>Example Answer</p> <p>The most significant problem I solved in the workplace involved improving the accuracy of our AI solution.</p> <p>In my previous role, I was responsible for the table extraction feature of our Intelligent Document Processing product. We encountered a problem where the module failed to extract tables correctly from certain documents. After conducting an error analysis, I realized that our dataset did not cover all the table templates we needed to process. To address this, I applied advanced image processing techniques to our existing dataset to generate the missing templates, thereby increasing data variability.</p> <p>As a result, the accuracy of our table extraction module improved by approximately 5%, which significantly enhanced customer satisfaction.</p> How do you react to criticism? <p>Tip</p> <ul> <li>Show that you view criticism as an opportunity for growth.</li> <li>Emphasize how you listen and respond constructively.</li> <li>Provide an Example</li> </ul> <p>Example Answer</p> <p>I view criticism as an opportunity for growth. I listen carefully, ask questions if needed, and take it as a lesson for future tasks.</p> <p>For example, let's say my boss pointed out that a report I had just completed was poorly done, suggesting that the information should be presented as an image rather than in a paragraph, or that certain numbers didn't make sense. In such a situation, I would listen attentively and only defend my opinion if I strongly believed it was necessary. Ultimately, I would use the feedback to improve myself and ensure I create a better report the next time.</p> How do you teach new concepts to team members unfamiliar with them? <p>Tip</p> <ul> <li>Break down the concept into simple, digestible parts.</li> <li>Use analogies or real-world examples to make it relatable.</li> <li>Encourage questions and provide hands-on practice.</li> <li>Be patient and check for understanding regularly.</li> </ul> <p>Example Answer</p> <p>When teaching new concepts, I start by breaking them down into smaller, easy-to-understand parts. I often relate the concept to something familiar. For example, when introducing Object-Oriented Programming (OOP), I compare classes and instances to blueprints and buildings. I then guide the team through hands-on examples, encourage questions, and make sure everyone is comfortable before moving on. I also believe it's important to be patient and trust that the team members can learn and understand the concepts.</p> Describe a time when you made a difficult decision? <p>Tip</p> <ul> <li>Choose an example that shows your ability to weigh options and consider consequences.</li> <li>Explain the thought process behind your decision-making.</li> <li>Highlight the positive outcome or lesson learned from the decision.</li> </ul> <p>Example Answer</p> <p>I had to make a difficult decision when our project was behind schedule, and we needed to cut features to meet the deadline. After consulting with the team and evaluating the impact on users, I decided to prioritize the most critical features and postpone others.</p> <p>Although it was a tough call, this decision allowed us to deliver a functional product on time, which was well-received by users. The experience taught me the importance of balancing quality with deadlines and making decisions that align with overall project goals.</p> What do you do if team members disagree with your decisions? <p>Tip</p> <ul> <li>Show that you value team input and are open to discussion.</li> <li>Describe how you facilitate a constructive conversation to understand their perspectives.</li> <li>Emphasize your focus on reaching a consensus or the best solution for the project.</li> </ul> <p>Example Answer</p> <p>First of all, I'm okay with that because I believe a good team environment should always be open to discussion.</p> <p>If team members disagree with my decisions, I start by listening to their concerns and try to understand their viewpoints. I encourage open discussion so everyone can share their ideas. If needed, I'm willing to reconsider my decision or find a compromise that aligns with the team's goals. My focus is always on finding the best solution, not just sticking to my original decision.</p> Have you ever performed a task without relevant experience? <p>Tip</p> <ul> <li>Highlight your ability to learn quickly and adapt to new situations.</li> <li>Explain the steps you took to successfully complete the task.</li> <li>Mention any resources or support you used to bridge the knowledge gap.</li> </ul> <p>Example Answer</p> <p>I'm okay with taking on a task without any prior experience, but I would need some time to get familiar with the relevant concepts.</p> <p>For example, I once had to take on a task that required skills in a programming language I hadn\u2019t used before. I started by taking an online basic course and practicing with small projects. Once I became familiar with the language, I began working on the task using tools like ChatGPT and Copilot to assist me. I was able to complete the task successfully and even gained some new skills in the process.</p> Tell me about when you gave negative feedback to a colleague? <p>Tip</p> <ul> <li>Show that you approach giving feedback with sensitivity and respect.</li> <li>Mention the importance of being specific and constructive.</li> <li>Highlight the positive outcome or improvement resulting from the feedback.</li> </ul> <p>Example Answer</p> <p>I once had to give negative feedback to a colleague whose code quality was affecting the project. I approached them privately and focused on specific issues rather than making it personal. I suggested some best practices and offered to help them improve. They appreciated the feedback, and over time, their work improved significantly, benefiting the entire team.</p> When you disagree with a coworker, how do you handle it? <p>Tip</p> <ul> <li>Emphasize your commitment to maintaining professionalism and respect.</li> <li>Explain how you focus on understanding their perspective.</li> <li>Highlight your ability to find common ground or a mutually beneficial solution.</li> </ul> <p>Example Answer</p> <p>When I disagree with a coworker, I start by listening to their reasoning and trying to understand their perspective. I then share my own viewpoint, and we discuss the pros and cons of each approach. My goal is to find a solution that benefits the project, rather than just trying to win the argument.</p> Tell me about an instance when you had to juggle multiple tasks. How did you handle this situation? <p>Tip</p> <ul> <li>Demonstrate your ability to prioritize and manage time effectively.</li> <li>Mention any tools or strategies you used to stay organized.</li> <li>Highlight the successful completion of all tasks.</li> </ul> <p>Example Answer</p> <p>During a particularly busy period, I had to juggle multiple tasks with tight deadlines. The key was managing time and tasks effectively. I started by listing all the tasks and prioritizing them based on urgency and importance. I broke each task into smaller parts when possible. I also used a project management tool to track progress and set clear time blocks for each task. By staying organized and focused, I was able to complete all the tasks on time without sacrificing quality.</p> Can you give me an example of how you establish your own goals? <p>Tip</p> <ul> <li>Explain your process for setting both short-term and long-term goals.</li> <li>Mention how you align your goals with your personal development and the organization\u2019s objectives.</li> <li>Highlight your use of measurable milestones to track progress.</li> </ul> <p>Example Answer</p> <p>I establish my own goals by first assessing what I want to achieve in the short and long term. I align these goals with my career development and the company\u2019s objectives. For example, I set a goal to improve my skills in a specific programming language by completing a certification course within three months. I break the goal down into weekly milestones to track my progress and stay motivated.</p> Tell me about a moment when you were unfamiliar with the scenario or surroundings. How did you cope? <p>Tip</p> <ul> <li>Show your adaptability and willingness to step out of your comfort zone.</li> <li>Explain the steps you took to familiarize yourself with the new situation.</li> <li>Highlight how you leveraged available resources to succeed.</li> </ul> <p>Example Answer</p> <p>When I started a new role in a completely different industry, I was unfamiliar with many of the processes and terminology. I coped by immersing myself in learning, asking lots of questions, and seeking mentorship from experienced colleagues. Within a few months, I became comfortable in the new environment and even contributed to process improvements.</p> Tell me about a situation when you required information from someone unresponsive. How did you deal with it? <p>Tip</p> <ul> <li>Show your persistence and problem-solving skills.</li> <li>Mention the steps you took to follow up and escalate if necessary.</li> <li>Highlight how you maintained professionalism and focused on achieving the goal.</li> </ul> <p>Example Answer</p> <p>I once needed critical information from a colleague who was unresponsive. I started by sending polite follow-up emails and messages, but when there was still no response, I escalated the issue to our manager, explaining the situation\u2019s urgency. I also explored alternative sources for the information. Eventually, the colleague responded, and I was able to complete the task on time.</p> Tell me about a moment when you messed up. How did you correct your mistake? <p>Tip</p> <ul> <li>Be honest about the mistake without dwelling on it.</li> <li>Focus on the steps you took to correct it and prevent it from happening again.</li> <li>Highlight the positive outcome or what you learned from the experience.</li> </ul> <p>Example Answer</p> <p>I made a mistake by overlooking a debugging code block that significantly affected the product's performance. As soon as I realized it, I informed my team and took responsibility. I promptly worked on fixing the code and suggested a more rigorous testing process to prevent future issues. I also learned the importance of thorough testing in the product lifecycle.</p> What is the most helpful piece of feedback you've ever received about yourself? <p>Tip</p> <ul> <li>Choose feedback that had a significant impact on your personal or professional growth.</li> <li>Explain how you applied the feedback to improve.</li> <li>Highlight the positive changes that resulted from applying the feedback.</li> </ul> <p>Example Answer</p> <p>The most helpful feedback I received was to \"focus on writing clean, maintainable code rather than just meeting deadlines.\" I took this advice seriously, improving my coding practices by following best practices for readability and documentation. This change led to higher quality code, smoother team collaboration, and fewer bugs, significantly enhancing my productivity and effectiveness as a developer.</p> How do you ensure the quality and maintainability of your code? <p>Tip</p> <ul> <li>Discuss your approach to following coding standards and best practices.</li> <li>Mention the role of automated testing and code reviews.</li> <li>Highlight the importance of clear documentation and modular code.</li> </ul> <p>Example Answer</p> <p>I ensure code quality and maintainability by adhering to coding standards and best practices, such as writing clean, modular code. I also use automated testing tools to catch issues early and conduct regular code reviews to get feedback from peers. Comprehensive documentation helps others understand and maintain the code easily, which is crucial for long-term project success.</p> How do you handle version control and code reviews in your development process? <p>Tip</p> <ul> <li>Explain your use of version control systems like Git for managing code changes.</li> <li>Discuss how you handle branching, merging, and resolving conflicts.</li> <li>Highlight the role of code reviews in improving code quality and collaboration.</li> </ul> <p>Example Answer</p> <p>I use Git for version control, creating branches for new features or bug fixes and merging changes into the main branch after thorough testing. During code reviews, I collaborate with team members to discuss improvements and catch potential issues. This process ensures that code quality is maintained and that everyone is aligned with the project goals.</p> How do you prioritize and manage multiple projects simultaneously to meet tight deadlines? <p>Tip</p> <ul> <li>Describe your method for assessing and prioritizing tasks based on deadlines and impact.</li> <li>Mention any project management tools or techniques you use.</li> <li>Explain how you communicate and adjust priorities as needed.</li> </ul> <p>Example Answer</p> <p>I manage multiple projects by prioritizing tasks based on their deadlines and impact. I use project management tools like Jira to track progress and set clear milestones. Regular communication with stakeholders helps me adjust priorities as needed. For example, when faced with overlapping deadlines, I reallocated resources and adjusted timelines to ensure all projects were completed successfully.</p> What strategies do you use to stay updated with new programming languages and technologies? <p>Tip</p> <ul> <li>Mention your commitment to continuous learning through various resources.</li> <li>Highlight the importance of practical experience and experimentation.</li> <li>Discuss how you integrate new knowledge into your work or share it with your team.</li> </ul> <p>Example Answer</p> <p>To stay updated with new programming languages and technologies, I regularly take online courses, read industry blogs, and attend webinars. I also work on side projects to experiment with new tools and languages. Sharing this knowledge with my team helps keep everyone informed and can lead to adopting new technologies that benefit our projects.</p> <ol> <li> <p>8 Soft Skills Interview Questions And Answers To Prepare \u21a9</p> </li> <li> <p>30 Common Turing Interview Questions &amp; Answers \u21a9</p> </li> <li> <p>8 Behavioral and Technical Interview Questions Asked by Top Tech Companies \u21a9</p> </li> </ol>"},{"location":"blog/deadpool-and-wolverine/","title":"Deadpool &amp; Wolverine - C\u1ea3m nh\u1eadn","text":"<p>C\u1ea3 n\u0103m 2024 \u0111\u01b0\u1ee3c \u0111\u00fang 1 phim n\u00ean ra r\u1ea1p xem h\u1eb3n 2 l\u1ea7n (l\u1ea7n 2 free v\u00ec c\u00f3 coupon :v). Sau \u0111\u00e2y l\u00e0 nh\u1eefng c\u1ea3m nh\u1eadn, suy ngh\u0129 c\u1ee7a c\u00e1 nh\u00e2n v\u1ec1 Deadpool &amp; Wolverine.</p> <p>L\u01b0u \u00fd</p> <p>\u0110\u00e2y ch\u1ec9 l\u00e0 c\u1ea3m nh\u1eadn c\u1ee7a con d\u00e2n b\u00ecnh th\u01b0\u1eddng \u0111i xem phim, kh\u00f4ng th\u1ec3 chuy\u00ean nghi\u1ec7p nh\u01b0 m\u1ea5y \u00f4ng chuy\u00ean review phim \u0111\u01b0\u1ee3c. </p>"},{"location":"blog/deadpool-and-wolverine/#cam-nhan-sau-khi-ra-khoi-rap","title":"C\u1ea3m nh\u1eadn sau khi ra kh\u1ecfi r\u1ea1p","text":"<p>Suy ngh\u0129 \u0111\u1ea7u ti\u00ean xu\u1ea5t hi\u1ec7n trong \u0111\u1ea7u l\u00e0 \"Kh\u00f4ng b\u00f5 c\u00f4ng \u0111\u1ee3i c\u1ea3 n\u0103m\".</p> <p>L\u00e0 ng\u01b0\u1eddi \u0111\u00e3 xem h\u1ebft c\u00e1c ph\u1ea7n phim X-men tr\u01b0\u1edbc \u0111\u00f3, n\u00ean \u0111\u01a1n gi\u1ea3n l\u00e0 m\u00ecnh \u0111\u01b0\u1ee3c tho\u1ea3 m\u00e3n v\u00ec d\u00e0n cameo trong phim (\u0111\u00fang m\u1ee5c \u0111\u00edch c\u1ee7a phim l\u00e0 fan service). Ki\u1ec3u m\u1ed7i nh\u00e2n v\u1eadt xu\u1ea5t hi\u1ec7n l\u00e0 m\u1ed9t \u0111\u1ed1ng k\u00fd \u1ee9c \u00f9a v\u1ec1. V\u00ec v\u1eady n\u00f3i chung l\u00e0 c\u1ea3m th\u1ea5y \u0111\u00e3 v\u00e0 h\u00e0i l\u00f2ng (\u0111\u1ee7 \u0111\u1ec3 mu\u1ed1n \u0111i xem l\u1ea7n n\u1eefa =))). S\u1ebd vi\u1ebft th\u00eam v\u1ec1 c\u00e1i n\u00e0y \u1edf ph\u1ea7n ti\u1ebfp theo c\u1ee7a b\u00e0i vi\u1ebft.</p> <p>Tuy nhi\u00ean, c\u0169ng ph\u1ea3i n\u00f3i l\u00e0 nh\u1eefng g\u00ec \u0111\u1ecdng l\u1ea1i trong \u0111\u1ea7u sau khi xem ch\u1ee7 y\u1ebfu l\u00e0 nh\u1eefng m\u00e0n cameo v\u00e0 nh\u1eefng c\u00e2u joke, ch\u1ee9 c\u00e2u chuy\u1ec7n th\u00ec m\u00ecnh \u0111\u00e1nh gi\u00e1 l\u00e0 h\u01a1i n\u00f4ng. \u0110\u1ed9ng c\u01a1 c\u1ee7a c\u1ea3 2 ph\u1ea3n di\u1ec7n trong phim l\u00e0 Paradox v\u00e0 Cassandra Nova kh\u00e1 h\u1eddi h\u1ee3t. Ki\u1ec3u phim ch\u1ec9 n\u00eau ra cho bi\u1ebft ch\u1ee9 kh\u00f4ng x\u00e2y d\u1ef1ng g\u00ec v\u1ec1 \u0111\u1ed9ng c\u01a1 c\u1ee7a c\u1ea3 2 ph\u1ea3n di\u1ec7n n\u00e0y. B\u00e0 Cassandra m\u1ea1nh v\u00e3i ch\u01b0\u1edfng xong kh\u00f4ng \u0111\u01b0\u1ee3c nh\u00ecn th\u1ea5y b\u1ea3 \u0111\u00e1nh nhau m\u1ea5y. Hai ph\u1ea3n di\u1ec7n ch\u1ee7 y\u1ebfu l\u00e0 \u0111\u1ec3 t\u1ea1o b\u1ed1i c\u1ea3nh cho 2 \u00f4ng th\u1ea7n kia c\u00f3 l\u00fd do \u0111i c\u00f9ng nhau m\u00e0 t\u1ea5u h\u00e0i.</p> <p>Nh\u01b0ng l\u1ea1i nh\u1eafc l\u1ea1i, m\u1ee5c \u0111\u00edch c\u1ee7a phim l\u00e0 \u0111\u1ec3 fan service. M\u00ecnh l\u00e0 fan, v\u00e0 m\u00ecnh \u0111\u01b0\u1ee3c \u1ed3 l\u00ean khi m\u1ea5y nh\u00e2n v\u1eadt quen thu\u1ed9c xu\u1ea5t hi\u1ec7n. V\u00ec v\u1eady b\u1ecf qua nh\u1eefng v\u1ea5n \u0111\u1ec1 v\u1ec1 c\u00e2u chuy\u1ec7n c\u1ee7a phim n\u00f3i tr\u00ean.</p>"},{"location":"blog/deadpool-and-wolverine/#mot-so-khoanh-khac-an-tuong-trong-phim","title":"M\u1ed9t s\u1ed1 kho\u1ea3nh kh\u1eafc \u1ea5n t\u01b0\u1ee3ng trong phim","text":"<p>Note</p> <p>Phim c\u00f3 r\u1ea5t nhi\u1ec1u kho\u1ea3ng kh\u1eafc li\u00ean h\u1ec7 \u0111\u1ebfn c\u00e1c phim kh\u00e1c hay c\u00e1c s\u1ef1 ki\u1ec7n kh\u00e1c trong ng\u00e0nh gi\u1ea3i tr\u00ed. C\u00f3 c\u00e1i m\u00ecnh hi\u1ec3u, c\u00f3 c\u00e1i m\u00ecnh kh\u00f4ng hi\u1ec3u. Ph\u1ea7n n\u00e0y ch\u1ec9 li\u1ec7t k\u00ea nh\u1eefng kho\u1ea3nh kh\u1eafc c\u00e1 nh\u00e2n th\u1ea5y \u1ea5n t\u01b0\u1ee3ng nh\u1ea5t th\u00f4i.</p>"},{"location":"blog/deadpool-and-wolverine/#chris","title":"Chris","text":"<p>L\u00fac \u1ed5ng b\u1ecf kh\u0103n ra \u0111\u1ec3 l\u1ed9 m\u1eb7t b\u1ea5t ng\u1edd vcl.</p> <p>Tr\u01b0\u1edbc khi phim ra m\u1eaft c\u00f3 r\u1ea5t nhi\u1ec1u \u1ea3nh h\u1eadu tr\u01b0\u1eddng b\u1ecb leak ra nh\u01b0ng kh\u00f4ng h\u1ec1 c\u00f3 tin g\u00ec v\u1ec1 vi\u1ec7c Chris xu\u1ea5t hi\u1ec7n c\u1ea3. Sau n\u00e0y h\u00f3ng h\u1edbt \u0111\u01b0\u1ee3c th\u00ec l\u00e0 do nh\u1eefng c\u1ea3nh quay c\u00f3 \u1ed5ng ch\u1ec9 \u0111\u01b0\u1ee3c quay trong \u0111\u00fang 1 ng\u00e0y, m\u00e0 l\u1ea1i \u0111\u00fang c\u00e1i \u0111\u1ee3t hi\u1ec7p h\u1ed9i di\u1ec5n vi\u00ean bi\u00ean k\u1ecbch c\u00e1c th\u1ee9 \u0111ang \u0111\u00ecnh c\u00f4ng n\u00ean m\u1ea5y paparazzi kh\u00f4ng ai b\u1eaft \u0111\u01b0\u1ee3c.</p> <p>\u0110\u00e2y ch\u1eafc ch\u1eafn l\u00e0 m\u00e0n cameo \u0111\u1ec3 l\u1ea1i \u1ea5n t\u01b0\u1ee3ng s\u00e2u nh\u1ea5t phim.</p>"},{"location":"blog/deadpool-and-wolverine/#flame-on","title":"Flame On","text":"<p>Ch\u1ec9 m\u1ed9t v\u00e0i ph\u00fat sau c\u00e1i kho\u1ea3ng kh\u1eafc ph\u00eda tr\u00ean th\u00ec l\u1ea1i \u0111\u01b0\u1ee3c \u1ed3 th\u00eam qu\u1ea3 n\u1eefa =))</p> <p>N\u00f3i th\u1eadt l\u00e0 m\u00ecnh ch\u01b0a xem Fantastic Four c\u1ee7a Chris (v\u1eabn bi\u1ebft c\u00f3 m\u1ed9t Fantastic Four m\u00e0 Chris l\u00e0 Human Torch, nh\u01b0ng ch\u01b0a xem) th\u1ebf n\u00ean l\u00fac \u0111\u1ea5y v\u1eabn lu\u00f4n ngh\u0129 \u0111\u00e2y l\u00e0 m\u1ed9t bi\u1ebfn th\u1ec3 c\u1ee7a Captain (phim c\u0169ng tr\u00f4n l\u00e0 l\u1ea5y c\u00e1i kh\u0103n che c\u00e1i logo tr\u01b0\u1edbc ng\u1ef1c v\u00e0 m\u1eb7t Chris l\u00fac n\u00e0y v\u1eabn \u0111ang nghi\u00eam t\u00fac).</p> <p>Cho n\u00ean l\u00fac \"Flame On\" l\u1ea1i b\u1ea5t ng\u1edd vcl qu\u1ea3 n\u1eefa (nh\u1edb l\u00e0 l\u00fac \u0111\u1ea5y c\u1ea3 r\u1ea1p \u0111\u1ec1u \u1ed3 ch\u1ee9 kh\u00f4ng ri\u00eang g\u00ec m\u00ecnh)</p>"},{"location":"blog/deadpool-and-wolverine/#elektra-blade-gambit","title":"Elektra, Blade, Gambit","text":"<p>\u0110o\u1ea1n n\u00e0y th\u1ef1c ra \u1ea5n t\u01b0\u1ee3ng ch\u1ee7 y\u1ebfu l\u00e0 qu\u1ea3 soundtrack l\u00fac \u0111\u1ea5y nghe ch\u1ea5t vcl. Ch\u1ee9 c\u1ea3 Elektra, Blade \u0111\u1ec1u ch\u01b0a xem =))</p> <p>Link soundtrack l\u00fac \u0111\u1ea5y:  Rob Simonsen - Hideout</p>"},{"location":"blog/deadpool-and-wolverine/#comic-accurate-suit","title":"Comic accurate suit","text":"<p>L\u00e0 c\u00e1i l\u00fac Wolverine \u0111\u01b0a tay ra sau \u0111\u1ec3 \u0111\u1ed9i c\u00e1i m\u1eb7t n\u1ea1 l\u00ean. \u0110\u01b0\u1ee3c nh\u00ecn th\u1ea5y b\u1ed9 suit n\u00e0y tr\u00ean ng\u01b0\u1eddi Huge v\u1eabn l\u00e0 m\u1ed9t c\u1ea3m gi\u00e1c g\u00ec \u0111\u00f3 l\u00e2ng l\u00e2ng.</p>"},{"location":"blog/deadpool-and-wolverine/#lien-he-en-phan-con-lai-cua-mcu","title":"Li\u00ean h\u1ec7 \u0111\u1ebfn ph\u1ea7n c\u00f2n l\u1ea1i c\u1ee7a MCU","text":"<p>Ph\u1ea7n n\u00e0y ch\u1eafc vi\u1ebft d\u00e0i nh\u1ea5t =))</p> <p>Th\u1ef1c ra l\u00fd do ch\u00ednh khi\u1ebfn m\u00ecnh \u0111i xem l\u1ea7n 2 l\u00e0 do l\u1ea7n 1 b\u1ecb tho\u1ea3 m\u00e3n v\u1edbi nh\u1eefng m\u00e0n cameo m\u00e0 qu\u00ean m\u1ea5t m\u1ed9t s\u1ed1 t\u00ecnh ti\u1ebft c\u00f3 th\u1ec3 li\u00ean k\u1ebft v\u1edbi \u0111a v\u0169 tr\u1ee5 c\u1ee7a MCU. \u0110i xem v\u1ec1 suy ngh\u0129 v\u1ec1 phim th\u1ea5y c\u00f3 m\u1ed9t s\u1ed1 th\u1eafc m\u1eafc, v\u00ec v\u1eady ph\u1ea3i \u0111i xem l\u1ea7n n\u1eefa \u0111\u1ec3 t\u00ecm th\u00eam th\u00f4ng tin.</p> <p>D\u01b0\u1edbi \u0111\u00e2y l\u00e0 nh\u1eefng gi\u1ea3 thuy\u1ebft c\u1ee7a c\u00e1 nh\u00e2n m\u00ecnh v\u1ec1 b\u1ee9c tranh c\u1ee7a \u0111a v\u0169 tr\u1ee5 MCU sau Deadpool &amp; Wolverine.</p>"},{"location":"blog/deadpool-and-wolverine/#1-moc-thoi-gian-cua-phim","title":"1. M\u1ed1c th\u1eddi gian c\u1ee7a phim","text":"<p>M\u1ed9t th\u1eafc m\u1eafc ph\u1ed5 bi\u1ebfn xu\u1ea5t hi\u1ec7n tr\u00ean m\u1ea1ng l\u00e0 th\u1ebf n\u00e0y:</p> <ul> <li>N\u0103m 2018, Wade du h\u00e0nh v\u1ec1 Earth-616 \u0111\u1ec3 xin v\u00e0o Avenger nh\u01b0ng t\u1ea1ch ph\u1ecfng v\u1ea5n.</li> <li>6 n\u0103m sau (t\u1ee9c 2024) l\u00e0 nh\u1eefng s\u1ef1 ki\u1ec7n di\u1ec5n ra trong phim (\u1edf Earth-10005).</li> </ul> <p>Nh\u01b0ng phim Logan l\u1ea1i l\u1ea5y b\u1ed1i c\u1ea3nh l\u00e0 n\u0103m 2029, c\u00f3 ngh\u0129a l\u00e0 2024 th\u00ec \u0111\u00e1ng l\u1ebd Logan v\u1eabn s\u1ed1ng, v\u1eady th\u00ec Wade \u0111\u00e0o m\u1ed9 c\u1ee7a ai l\u00ean r\u1ed3i nh\u1ea3y Bye Bye Bye v\u1eady?</p> <p>C\u00f3 m\u1ed9t s\u1ed1 gi\u1ea3i th\u00edch l\u00e0 nh\u1eefng s\u1ef1 ki\u1ec7n trong Logan di\u1ec5n ra \u1edf m\u1ed9t v\u0169 tr\u1ee5 kh\u00e1c, nh\u01b0ng th\u1ebf th\u00ec th\u1eadt l\u00e0 m\u1ea5t \u00fd ngh\u0129a cho c\u00e1i phim Logan. H\u00e0nh tr\u00ecnh c\u1ee7a Logan ch\u1ec9 th\u1ef1c s\u1ef1 c\u00f3 \u00fd ngh\u0129a n\u1ebfu Logan \u0111\u1ea5y ch\u00ednh l\u00e0 Logan trong su\u1ed1t d\u00f2ng phim X-men ch\u1ee9.</p> <p>Gi\u1ea3 thi\u1ebft c\u1ee7a m\u00ecnh l\u00e0 th\u1ebf n\u00e0y:</p> <ul> <li>N\u0103m 2024, Wade d\u00f9ng \u0111\u1ed3ng h\u1ed3 c\u1ee7a Cabel \u0111\u1ec3 du h\u00e0nh v\u1ec1 n\u0103m 2018 c\u1ee7a Earth-616 \u0111\u1ec3 xin v\u00e0o Avenger. Wade ch\u1ecdn th\u1eddi gian n\u00e0y c\u00f3 th\u1ec3 l\u00e0 v\u00ec l\u00fac n\u00e0y l\u00e0 kh\u00f4ng l\u00e2u tr\u01b0\u1edbc khi s\u1ef1 ki\u1ec7n Infinity War x\u1ea3y ra. M\u00e0 Avenger t\u1eeb Infinity War tr\u1edf \u0111i th\u00ec t\u00ecnh h\u00ecnh kh\u00e1 l\u00e0 lo\u1ea1n (c\u00f3 khi trong 14 tri\u1ec7u th\u1ef1c t\u1ea1i c\u1ee7a Dr. Strange th\u1ea5y ch\u1eafc c\u0169ng c\u00f3 m\u1ea5y th\u1ef1c t\u1ea1i c\u00f3 Deadpool \u0111\u00e1nh Thanos :v)</li> <li>6 n\u0103m sau (t\u1ee9c 2030 \u1edf Earth-10005) l\u00e0 nh\u1eefng s\u1ef1 ki\u1ec7n di\u1ec5n tra trong phim. L\u00fac n\u00e0y th\u00ec Logan \u0111\u00e3 ch\u1ebft. C\u00e1i x\u00e1c m\u00e0 Deadpool \u0111\u00e0o \u1edf \u0111\u1ea7u phim ch\u00ednh l\u00e0 c\u1ee7a Logan m\u00e0 ta v\u1eabn bi\u1ebft, \u1edf c\u00f9ng v\u0169 tr\u1ee5 \u0111\u1ea5y.</li> </ul> <p>M\u1ea5u ch\u1ed1t \u1edf \u0111\u00e2y l\u00e0 \u0111\u1ed3ng h\u1ed3 c\u1ee7a Cabel du h\u00e0nh \u1edf v\u0169 tr\u1ee5 n\u00e0y sang v\u0169 tr\u1ee5 kh\u00e1c nh\u01b0ng kh\u00f4ng nh\u1ea5t thi\u1ebft ph\u1ea3i c\u00f9ng m\u1ed1c th\u1eddi gian. C\u00e1i m\u1ed1c th\u1eddi gian m\u00ecnh \u0111\u01b0a ra l\u00e0 2030 c\u0169ng l\u00e0 v\u00ed d\u1ee5 th\u00f4i, n\u00f3 c\u00f3 th\u1ec3 l\u00e0 b\u1ea5t k\u1ef3 n\u0103m n\u00e0o sau 2029. N\u0103m m\u1ea5y c\u0169ng k \u1ea3nh h\u01b0\u1edfng g\u00ec nhi\u1ec1u v\u00ec \u0111\u00e2y kh\u00f4ng ph\u1ea3i l\u00e0 v\u0169 tr\u1ee5 ch\u00ednh Earth-616.</p>"},{"location":"blog/deadpool-and-wolverine/#2-co-2-laura-va-2-wolverine-ang-cung-ton-tai-o-mot-vu-tru","title":"2. C\u00f3 2 Laura v\u00e0 2 Wolverine \u0111ang c\u00f9ng t\u1ed3n t\u1ea1i \u1edf m\u1ed9t v\u0169 tr\u1ee5?","text":"<p>Nh\u01b0 gi\u1ea3 thi\u1ebft c\u1ee7a m\u00ecnh ph\u00eda tr\u00ean th\u00ec l\u00e0 kh\u00f4ng.</p> <p>Wolverine \u1edf Earth-10005 \u0111\u00e3 ch\u1ebft. Wolverine \u1edf cu\u1ed1i phim l\u00e0 t\u1eeb v\u0169 tr\u1ee5 kh\u00e1c \u0111\u1ebfn, v\u00e0 c\u0169ng ch\u01b0a \u0111\u1ebfn m\u1ee9c ph\u1ea3i th\u1eafc m\u1eafc l\u00e0 c\u00f3 \u1ea3nh h\u01b0\u1edfng g\u00ec \u0111\u1ebfn v\u0169 tr\u1ee5 Earth-10005 hay kh\u00f4ng, v\u00ec c\u00f3 th\u1ec3 \u0111\u01a1n gi\u1ea3n l\u00e0 h\u00f4m \u0111\u1ea5y c\u00f3 party th\u00ec Wade r\u1ee7 Wolverine \u0111\u1ebfn ch\u01a1i th\u00f4i, c\u00f2n b\u00ecnh th\u01b0\u1eddng Wolverine n\u00e0y v\u1eabn \u1edf v\u0169 tr\u1ee5 c\u1ee7a m\u00ecnh.</p> <p>Laura \u1edf cu\u1ed1i phim, theo m\u00ecnh l\u00e0 Laura c\u1ee7a ch\u00ednh v\u0169 tr\u1ee5 n\u00e0y (Earth-10005, ch\u00ednh l\u00e0 Laura trong phim Logan) ch\u1ee9 kh\u00f4ng ph\u1ea3i Laura \u1edf The Void. B\u1eb1ng ch\u1ee9ng l\u00e0 cu\u1ed1i phim kh\u00f4ng c\u00f3 Elektra, Blade hay Gambit. Ch\u1ea3 nh\u1ebd Wade l\u1ea1i \u0111\u01b0a m\u1ed7i Laura v\u1ec1 v\u0169 tr\u1ee5 c\u1ee7a m\u00ecnh c\u00f2n m\u1ea5y \u00f4ng kia th\u00ec k\u1ec7 \u00e0. H\u01a1i ti\u00eau c\u1ef1c nh\u01b0ng m\u00ecnh ngh\u0129 nguy\u00ean d\u00e0n \u1edf The Void b\u1ecb Alioth \u0103n h\u1ebft r. Nh\u1eefng g\u00ec Wade l\u00e0m l\u00e0 l\u00e0m cho v\u0169 tr\u1ee5 c\u1ee7a h\u1ecd nh\u1edb v\u1ec1 h\u1ecd th\u00f4i.</p> <p>Note</p> <p>M\u00ecnh bi\u1ebft l\u00e0 trong m\u1ed9t b\u00e0i ph\u1ecfng v\u1ea5n th\u00ec Dafne Keen (di\u1ec5n vi\u00ean \u0111\u00f3ng Laura) c\u00f3 kh\u1eb3ng \u0111\u1ecbnh Laura \u1edf The Void ch\u00ednh l\u00e0 Laura \u1edf trong Logan. Nh\u01b0ng th\u1ee9 nh\u1ea5t, Logan hy sinh \u0111\u1ec3 c\u1ee9u Laura xong Laura l\u1ea1i b\u1ecb TVA b\u1eaft s\u1ebd khi\u1ebfn cho c\u00e1i ch\u1ebft c\u1ee7a Logan kh\u00e1 v\u00f4 ngh\u0129a. Th\u1ee9 hai l\u00e0 nh\u01b0 m\u00ecnh n\u00f3i \u1edf tr\u00ean, th\u1ebf th\u00ec cu\u1ed1i phim Wade \u0111\u01b0a m\u1ed7i Laura v\u1ec1 ch\u1ee9 kh\u00f4ng \u0111\u01b0a m\u1ea5y anh em kh\u00e1c v\u1ec1 \u00e0.</p> <p>N\u00ean m\u00ecnh ngh\u0129 m\u1ea5y c\u00e1i di\u1ec5n vi\u00ean hay \u0111\u1ea1o di\u1ec5n gi\u1ea3i th\u00edch \u1edf ngo\u00e0i phim th\u00ec c\u1ee9 k\u1ec7 \u0111i. Kevin c\u0169ng t\u1eebng n\u00f3i v\u0169 tr\u1ee5 ch\u00ednh l\u00e0 Earth-199999 nh\u01b0ng r\u1ed3i phim n\u00e0y l\u1ea1i ti\u1ebft l\u1ed9 n\u00f3 l\u00e0 Earth-616 \u0111\u1ea5y th\u00f4i.</p> <p>V\u00e0 gi\u1ea3 thi\u1ebft n\u00e0y k\u1ebft h\u1ee3p v\u1edbi gi\u1ea3 thi\u1ebft \u1edf m\u1ee5c 1 m\u00ecnh ngh\u0129 s\u1ebd kh\u1edbp nhau. V\u00ec Laura \u1edf cu\u1ed1i Deadpool &amp; Wolverine r\u00f5 r\u00e0ng l\u00e0 gi\u00e0 h\u01a1n Laura \u1edf Logan, v\u00ec th\u1ebf r\u1ea5t h\u1ee3p l\u00fd n\u1ebfu n\u00f3i r\u1eb1ng m\u1ed1c th\u1eddi gian c\u1ee7a Deadpool &amp; Wolverine l\u00e0 sau n\u0103m 2029.</p>"},{"location":"blog/deadpool-and-wolverine/#3-tva","title":"3. TVA?","text":"<p>C\u00f3 m\u1ed9t th\u1eafc m\u1eafc n\u1eefa l\u00e0 TVA \u1edf phim n\u00e0y v\u00e0 TVA trong Loki c\u00f3 ph\u1ea3i l\u00e0 m\u1ed9t? Hay m\u1ed7i v\u0169 tr\u1ee5 l\u1ea1i c\u00f3 m\u1ed9t TVA kh\u00e1c nhau?</p> <p>Gi\u1ea3 thi\u1ebft c\u1ee7a m\u00ecnh sau khi xem phim l\u00e0 m\u1ed9t TVA qu\u1ea3n l\u00fd nhi\u1ec1u v\u0169 tr\u1ee5, ki\u1ec3u nh\u01b0 chi nh\u00e1nh \u1ea5y. N\u00ean ta kh\u00f4ng th\u1ea5y nh\u1eefng \u0111\u1eb7c v\u1ee5 quen thu\u1ed9c \u1edf Loki xu\u1ea5t hi\u1ec7n trong phim n\u00e0y (v\u00ec h\u1ecd \u1edf chi nh\u00e1nh Earth-616, c\u00f2n \u0111\u00e2y l\u00e0 chi nh\u00e1nh Earth-10005). Ngo\u1ea1i tr\u1eeb B-15 l\u00e0m s\u1ebfp \u0111i qu\u1ea3n l\u00fd c\u00e1c chi nh\u00e1nh n\u00ean m\u1edbi \u0111\u1ebfn gi\u1ea3i quy\u1ebft sai ph\u1ea1m c\u1ee7a Paradox.</p> <p>Nh\u01b0ng v\u1ea5n \u0111\u1ec1 n\u00e0y ch\u1eafc ph\u1ea3i \u0111\u1ee3i nh\u1eefng phim sau gi\u1ea3i th\u00edch th\u00eam, ch\u1ee9 phim n\u00e0y h\u01a1i \u00edt th\u00f4ng tin v\u1ec1 c\u00e1ch v\u1eadn h\u00e0nh c\u1ee7a TVA.</p>"},{"location":"blog/deadpool-and-wolverine/#4-tai-sao-thor-lai-khoc","title":"4. T\u1ea1i sao Thor l\u1ea1i kh\u00f3c?","text":"<p>C\u00e2u h\u1ecfi \u0111\u1ebfn gi\u1edd v\u1eabn ch\u01b0a ai gi\u1ea3i \u0111\u00e1p \u0111\u01b0\u1ee3c th\u00ec t\u1ea5t nhi\u00ean l\u00e0 m\u00ecnh c\u0169ng ch\u1ecbu =)) Nh\u01b0ng m\u1ea1nh d\u1ea1nh \u0111o\u00e1n l\u00e0 s\u1ebd \u0111\u01b0\u1ee3c gi\u1ea3i \u0111\u00e1p trong Secret Wars n\u0103m 2027.</p>"},{"location":"blog/deadpool-and-wolverine/#5-earth-616","title":"5. Earth-616?","text":"<p>C\u00e1i n\u00e0y s\u1ebd li\u00ean h\u1ec7 th\u00eam v\u1edbi si\u00eau ph\u1ea9m Spider-Verse.</p> <p>Tr\u01b0\u1edbc ti\u00ean, trong Spider-Man No Way Home, v\u0169 tr\u1ee5 c\u1ee7a Tobey v\u00e0 Andrew l\u00e0 n\u1eb1m trong c\u00f9ng \u0111a v\u0169 tr\u1ee5 c\u1ee7a MCU.</p> <p>Th\u1ee9 hai, trong Spider-Man: Across the Spider-Verse, v\u0169 tr\u1ee5 c\u1ee7a Tobey v\u00e0 Andrew c\u0169ng l\u00e0 m\u1ed9t ph\u1ea7n c\u1ee7a \u0111a v\u0169 tr\u1ee5 nh\u1ec7n.</p> <p>Nh\u01b0 v\u1eady c\u00f3 th\u1ec3 suy ra nh\u1eefng v\u0169 tr\u1ee5 trong Spider-Verse v\u00e0 nh\u1eefng v\u1ee5 tr\u1ee5 trong MCU l\u00e0 n\u1eb1m trong c\u00f9ng m\u1ed9t \u0111a v\u0169 tr\u1ee5.</p> <p>Tuy nhi\u00ean v\u1ea5n \u0111\u1ec1 n\u1eb1m \u1edf \u0111\u00e2y. Trong ATSV, Earth-616 l\u1ea1i l\u00e0 m\u1ed9t v\u0169 tr\u1ee5 kh\u00e1c.</p> M\u1ed9t c\u1ea3nh trong Spider-Man: Across the Spider-Verse. C\u00f3 th\u1ec3 th\u1ea5y \u1edf g\u00f3c b\u00ean tr\u00e1i c\u00f3 SpiderCide \u0111\u1ebfn t\u1eeb Earth-616. <p>Kh\u00f4ng bi\u1ebft l\u00e0 Marvel v\u00e0 Sony c\u00f3 ng\u1ed3i v\u1edbi nhau \u0111\u1ec3 c\u00f9ng t\u1ea1o ra b\u1ee9c tranh \u0111a v\u0169 tr\u1ee5 n\u00e0y kh\u00f4ng, hay l\u00e0 \u0111a v\u0169 tr\u1ee5 c\u1ee7a Spider Verse v\u00e0 \u0111a v\u0169 tr\u1ee5 c\u1ee7a MCU ch\u1ea3 li\u00ean quan g\u00ec \u0111\u1ebfn nhau.</p> <p>Th\u1ef1c ra th\u00ec chi ti\u1ebft Earth-616 xu\u1ea5t hi\u1ec7n trong ATSV c\u0169ng kh\u00f4ng ph\u1ea3i chi ti\u1ebft g\u00ec l\u1edbn l\u1eafm, Marvel v\u00e0 Sony c\u1ee9 m\u1eb7c k\u1ec7 coi nh\u01b0 n\u00f3 kh\u00f4ng x\u1ea3y ra c\u0169ng ch\u1ea3 sao. Sony c\u0169ng t\u1eebng \u0111\u1ed5i v\u0169 tr\u1ee5 c\u1ee7a Peter B. Parker t\u1eeb Earth-616 th\u00e0nh Earth-616B nh\u01b0 kh\u00f4ng c\u00f3 chuy\u1ec7n g\u00ec x\u1ea3y ra \u0111\u1ea5y th\u00f4i.</p> <p>C\u00e1i n\u00e0y ch\u1eafc ph\u1ea3i ch\u1edd Beyond the Spider-Verse xem c\u00f3 th\u00eam th\u00f4ng tin g\u00ec kh\u00f4ng.</p> <p>N\u00f3i chung c\u00e1i b\u1ee9c tranh \u0111a v\u0169 tr\u1ee5 n\u00e0y v\u1eabn \u0111ang nhi\u1ec1u v\u1ea5n \u0111\u1ec1 vcl. C\u00e0ng li\u00ean h\u1ec7 c\u00e0ng r\u1ed1i, nh\u01b0ng \u0111\u1ea5y l\u1ea1i l\u00e0 l\u00fd do cu\u1ed1n m\u00ecnh \u0111i xem phim, v\u00ec mu\u1ed1n t\u00ecm th\u00eam th\u00f4ng tin \u0111\u1ec3 ho\u00e0n thi\u1ec7n cho c\u00e1i b\u1ee9c tranh \u0111a v\u0169 tr\u1ee5 n\u00e0y.</p> <p>T\u1ed5ng k\u1ebft</p> <p>Ch\u1ea5m \u0111i\u1ec3m: 8.5 / 10</p> <p>\u0110\u00e1ng xem cho fan, nh\u01b0ng kh\u00f4ng \u0111\u00e1ng xem cho non-fan.</p> <p>C\u0169ng mu\u1ed1n nh\u1eafn nh\u1ee7 t\u1edbi m\u1ea5y \u00f4ng non-fan l\u00e0 b\u1ecf ti\u1ec1n ra \u0111i xem phim th\u00ec n\u00ean bi\u1ebft l\u00e0 m\u00ecnh \u0111i xem phim g\u00ec, ch\u1ee9 \u0111\u1eebng c\u00f3 \u0111i xem phim ch\u1ec9 v\u00ec th\u1ea5y n\u00f3 hot tr\u00ean m\u1ea1ng xong v\u1ec1 b\u1ea3o ph\u00ed ti\u1ec1n. C\u00e1i ph\u00ed ti\u1ec1n \u0111\u1ea5y l\u00e0 do t\u1ef1 m\u00ecnh xem theo phong tr\u00e0o ch\u1ee9 kh\u00f4ng t\u00ecm hi\u1ec3u tr\u01b0\u1edbc khi xem, n\u00ean \u0111\u1eebng c\u00f3 ch\u00ea tr\u00e1ch ai. Phim g\u00e1n nh\u00e3n R r\u00f5 r\u00e0ng, v\u1eabn \u0111i xem xong v\u1ec1 ch\u00ea phim m\u00e1u me b\u1ea1o l\u1ef1c. Phim v\u1ec1 Deadpool, n\u1ed5i ti\u1ebfng l\u00e0 joke h\u00e0i joke nh\u1ea3m, v\u1eabn \u0111i xem r\u1ed3i v\u1ec1 ch\u00ea phim h\u00e0i nh\u1ea3m. Nh\u01b0 ki\u1ec3u l\u00ean google search phim s\u1ebd r\u1ed3i xem xong ch\u00ea phim l\u00e0 v\u0103n ho\u00e1 ph\u1ea9m \u0111\u1ed3i tru\u1ef5 v\u1eady. Th\u1ec1 \u0111\u1ecdc b\u1ef1c vl =))</p> <p>Ch\u1eafc ph\u1ea3i \u0111\u1ee3i \u0111\u1ebfn Dooms Day ho\u1eb7c Secret Wars th\u00ec may ra m\u1edbi \u0111\u01b0\u1ee3c xem 2 \u00f4ng n\u00e0y ti\u1ebfp. Ph\u1eadn l\u00e0m fan ng\u1ed3i l\u00f3t d\u00e9p h\u00f3ng th\u00f4i.</p>"},{"location":"blog/spider-man-across-the-spider-verse/","title":"Spider-Man: Across the Spider-Verse - C\u1ea3m nh\u1eadn","text":"<p>Nhanh v\u00e0 ng\u1eafn g\u1ecdn: \u0110\u00e2y l\u00e0 tr\u1ea3i nghi\u1ec7m \u0111i\u1ec7n \u1ea3nh \u0111\u00e3 nh\u1ea5t c\u1ee7a c\u00e1 nh\u00e2n m\u00ecnh t\u00ednh \u0111\u1ebfn th\u1eddi \u0111i\u1ec3m vi\u1ebft b\u00e0i n\u00e0y. Kh\u00f4ng nh\u1eefng th\u1ebf phim n\u00e0y m\u00ecnh \u0111i xem r\u1ea1p t\u1eadn 2 l\u1ea7n, v\u00e0 xem th\u00eam \\(n\\) l\u1ea7n n\u1eefa khi c\u00f3 b\u1ea3n \u0111\u1eb9p. Sau \u0111\u00e2y l\u00e0 nh\u1eefng c\u1ea3m nh\u1eadn c\u1ee7a c\u00e1 nh\u00e2n m\u00ecnh v\u1ec1 phim.</p> <p>Note</p> <p>Tr\u01b0\u1edbc khi \u0111i v\u00e0o ph\u1ea7n ch\u00ednh, xin note m\u1ed9t s\u1ed1 \u00fd:</p> <ul> <li>M\u00ecnh b\u1eaft \u0111\u1ea7u \u0111i xem phim r\u1ea1p t\u1eeb cu\u1ed1i n\u0103m 2019, c\u00e1c si\u00eau ph\u1ea9m tr\u01b0\u1edbc \u0111\u00f3 nh\u01b0 Infinity Wars, Endgame,... th\u00ec v\u00ec c\u00f2n l\u00e0 sinh vi\u00ean n\u00ean ch\u1ec9 c\u00f3 xem tr\u00ean phimmoi. L\u1eddi m\u1edf \u0111\u1ea7u kh\u00f4ng h\u1ec1 n\u00f3i \u0111i\u00eau, \u0111\u00e2y \u0111\u00fang l\u00e0 tr\u1ea3i nghi\u1ec7m xem phim r\u1ea1p m\u00e0 m\u00ecnh nh\u1edb nh\u1ea5t.</li> <li>M\u00ecnh kh\u00f4ng \u0111\u1ecdc comic n\u00ean kh\u00f4ng bi\u1ebft v\u1ec1 s\u1ef1 ki\u1ec7n Spider-Verse trong comic v\u00e0 c\u0169ng kh\u00f4ng r\u00e0nh l\u1eafm v\u1ec1 c\u00e1c bi\u1ebfn th\u1ec3 Spidey (m\u1ea5y bi\u1ebfn th\u1ec3 n\u1ed5i b\u1eadt th\u00ec bi\u1ebft). Nh\u1eefng c\u1ea3m nh\u1eadn c\u1ee7a m\u00ecnh ch\u1ec9 xu\u1ea5t ph\u00e1t t\u1eeb ph\u1ea7n phim n\u00e0y v\u00e0 c\u00e1c phim v\u1ec1 Spider-Man tr\u01b0\u1edbc \u0111\u00f3 (Spider-Man: Into the Spider-Verse, c\u00e1c phim Spider-Man c\u1ee7a Tobey, Andrew v\u00e0 Tom).</li> </ul> <p>L\u01b0u \u00fd</p> <p>\u0110\u00e2y ch\u1ec9 l\u00e0 c\u1ea3m nh\u1eadn c\u1ee7a con d\u00e2n b\u00ecnh th\u01b0\u1eddng \u0111i xem phim, kh\u00f4ng th\u1ec3 chuy\u00ean nghi\u1ec7p nh\u01b0 m\u1ea5y \u00f4ng chuy\u00ean review phim \u0111\u01b0\u1ee3c. </p>"},{"location":"blog/spider-man-across-the-spider-verse/#1-ky-vong-truoc-khi-xem-phim","title":"1. K\u1ef3 v\u1ecdng tr\u01b0\u1edbc khi xem phim","text":"<p>Ph\u1ea3i n\u00f3i m\u00ecnh k\u1ef3 v\u1ecdng r\u1ea5t cao tr\u01b0\u1edbc khi \u0111i xem phim n\u00e0y v\u00ec:</p> <ol> <li>M\u00ecnh c\u0169ng l\u00e0 m\u1ed9t fan c\u1ee7a Spider-Man (who wouldn't? =)) )</li> <li>M\u00ecnh r\u1ea5t th\u00edch ph\u1ea7n phim tr\u01b0\u1edbc Spider-Man: Into the Spider-Verse, \u0111\u1eb7c bi\u1ec7t l\u00e0 m\u1eb7t n\u1ed9i dung v\u00e0 h\u00ecnh \u1ea3nh.</li> </ol> <p>Do v\u1eady, m\u00ecnh \u0111i xem ph\u1ea7n 2 n\u00e0y v\u1edbi k\u1ef3 v\u1ecdng r\u1ea5t l\u1edbn: K\u1ef3 v\u1ecdng v\u1ec1 c\u00e2u chuy\u1ec7n sau khi Spider-Man 2099 \u0111\u01b0\u1ee3c nh\u00e1 h\u00e0ng \u1edf after credit c\u1ee7a ph\u1ea7n tr\u01b0\u1edbc, k\u1ef3 v\u1ecdng v\u1ec1 tr\u1ea3i nghi\u1ec7m h\u00ecnh \u1ea3nh sau khi ph\u1ea7n phim tr\u01b0\u1edbc \u0111\u00e3 l\u00e0m r\u1ea5t t\u1ed1t, k\u1ef3 v\u1ecdng v\u1ec1 c\u00e1c bi\u1ebfn th\u1ec3 Spider-Man m\u1edbi,...</p> <p>V\u00e0 phim th\u1eadm ch\u00ed c\u00f2n v\u01b0\u1ee3t c\u1ea3 nh\u1eefng k\u1ef3 v\u1ecdng tr\u00ean c\u1ee7a m\u00ecnh.</p>"},{"location":"blog/spider-man-across-the-spider-verse/#2-cam-nhan-khi-buoc-ra-khoi-rap","title":"2. C\u1ea3m nh\u1eadn khi b\u01b0\u1edbc ra kh\u1ecfi r\u1ea1p","text":"<p>V\u1eabn nh\u1edb c\u1ea3m x\u00fac \u0111\u1ea7u ti\u00ean ngay khi h\u1ebft phim l\u00e0 ki\u1ec3u \"\u1ee6a h\u1ebft phim r\u1ed3i \u00e0?\".</p> <p>M\u00ecnh xem b\u1ecb cu\u1ed1n t\u1eeb \u0111\u1ea7u \u0111\u1ebfn cu\u1ed1i, ph\u00ea c\u1ea3 v\u1ec1 n\u1ed9i dung, \u00e2m thanh, h\u00ecnh \u1ea3nh c\u1ee7a phim m\u00e0 kh\u00f4ng c\u1ea3m nh\u1eadn \u0111\u01b0\u1ee3c l\u00e0 \u0111\u00e3 xem \u0111\u01b0\u1ee3c h\u01a1n 2 ti\u1ebfng r\u1ed3i. Phim k\u1ebft th\u00fac theo ki\u1ec3u cliffhanger, th\u00e0nh ra c\u00e1i l\u00fac \u0111\u1ea5y m\u00ecnh ngh\u0129 ch\u1eafc m\u1edbi \u0111\u01b0\u1ee3c \u0111\u00e2u \u0111\u00f3 2/3 phim, xong n\u00f3 hi\u1ec7n ra ch\u1eef TO BE CONTINUE. M\u00e1 qu\u1ea3 h\u1ebft phim cay v\u0111 =))</p> \u1ee6a h\u1ebft phim r\u1ed3i \u00e0? <p>C\u00f3 m\u1ed9t nh\u1eadn \u0111\u1ecbnh tr\u00ean m\u1ea1ng m\u00e0 m\u00ecnh th\u1ea5y c\u0169ng \u0111\u00fang l\u00e0 th\u1ebf n\u00e0y:</p> <p>B\u1ea5m t\u1ea1m d\u1eebng b\u1ea5t k\u1ef3 l\u00fac xem phim, \u0111\u1ec1u nh\u1eadn \u0111\u01b0\u1ee3c m\u1ed9t h\u00ecnh \u1ea3nh \u0111\u1eb9p.</p> <p>M\u1ed9t quy\u1ebft \u0111\u1ecbnh c\u1ef1c \u0111\u00fang \u0111\u1eafn l\u00e0 m\u00ecnh ch\u1ecdn xem IMAX trong l\u1ea7n \u0111\u1ea7u xem phim. H\u00ecnh \u1ea3nh c\u1ee7a phim \u0111\u1eb9p d\u00e3 man, m\u00ecnh th\u1ea5y \u0111\u1eb9p h\u01a1n c\u1ea3 ph\u1ea7n tr\u01b0\u1edbc. C\u00f3 qu\u00e1 nhi\u1ec1u c\u1ea3nh \u0111\u1ec3 l\u1ea1i \u1ea5n t\u01b0\u1ee3ng trong \u0111\u1ea7u m\u00ecnh khi b\u01b0\u1edbc ra kh\u1ecfi r\u1ea1p. D\u01b0\u1edbi \u0111\u00e2y ch\u1ec9 l\u00e0 m\u1ed9t v\u00e0i trong s\u1ed1 r\u1ea5t nhi\u1ec1u kho\u1ea3nh kh\u1eafc \u0111\u1ea5y.</p> C\u1ea3nh m\u00e0u n\u01b0\u1edbc thay \u0111\u1ed5i v\u00e0 loang ra theo c\u1ea3m x\u00fac c\u1ee7a Gwen \u1ea5n t\u01b0\u1ee3ng th\u1eadt s\u1ef1. R\u1ea5t th\u00edch khung h\u00ecnh n\u00e0y. \u0110i ch\u01a1i v\u1edbi Crush \u0111\u1ed3. C\u1ea3nh n\u00e0y ki\u1ec3u \u0111\u1eb9p m\u00e0 chill v\u00e3i. L\u00fac xem l\u00e0 bi\u1ebft ngay ch\u1eafc ch\u1eafn \u0111\u00e2y s\u1ebd l\u00e0 h\u00ecnh n\u1ec1n laptop m\u1edbi r\u1ed3i. H\u00ecnh \u1ea3nh v\u1eabn \u0111\u1eb9p nh\u01b0ng \u0111\u1eb9p ki\u1ec3u dark.  <p>Tr\u1ea3i nghi\u1ec7m \u00e2m thanh h\u00f4m \u0111\u1ea5y c\u0169ng r\u1ea5t \u0111\u00e3. L\u1ea7n \u0111\u1ea7u xem th\u00ec kh\u00f4ng bi\u1ebft t\u00ean soundtrack, ch\u1ec9 nh\u1edb nh\u1eefng \u0111o\u1ea1n m\u00e0 th\u1ea5y \u00e2m thanh c\u1ef1c ph\u00ea. Kh\u00f4ng ch\u1ec9 th\u1ebf b\u00e0i end credit c\u0169ng hay n\u1eefa. </p> <p>Fun fact</p> <p>Spotify recap n\u0103m 2023 c\u1ee7a m\u00ecnh th\u00ec m\u00ecnh nghe b\u00e0i Am I Dreaming (end credit c\u1ee7a phim) h\u01a1n 1200 l\u1ea7n, m\u00e0 phim th\u00ec ra v\u00e0o th\u00e1ng 6/2023.</p> <p>Sau khi \u0111i xem v\u1ec1 th\u00ec c\u0169ng b\u1eaft \u0111\u1ea7u t\u00ecm ki\u1ebfm nh\u1ea1c phim. Sau \u0111\u00e2y l\u00e0 danh s\u00e1ch OST m\u00e0 m\u00ecnh th\u1ea5y \u0111\u00e3 nh\u1ea5t l\u00fac xem phim (th\u1eadm ch\u00ed l\u00e0 \u0111\u1ebfn gi\u1edd m\u00ecnh v\u1eabn nghe \u0111i nghe l\u1ea1i nh\u1eefng soundtrack n\u00e0y):</p> <ul> <li> Falling Apart (t\u1eeb \u0111o\u1ea1n 05:24 tr\u1edf \u0111i)</li> <li> The Anomaly </li> <li> Across the Spider-Verse (Start a Band)</li> <li> Am I Dreaming</li> </ul>"},{"location":"blog/spider-man-across-the-spider-verse/#3-mot-vai-khoanh-khac-an-tuong","title":"3. M\u1ed9t v\u00e0i kho\u1ea3nh kh\u1eafc \u1ea5n t\u01b0\u1ee3ng","text":"<p>M\u1ee5c tr\u00ean kia l\u00e0 nh\u1eefng c\u1ea3nh \u1ea5n t\u01b0\u1ee3ng v\u1ec1 m\u1eb7t h\u00ecnh \u1ea3nh. M\u1ee5c n\u00e0y s\u1ebd l\u00e0 nh\u1eefng chi ti\u1ebft trong c\u00e2u chuy\u1ec7n c\u1ee7a phim \u0111\u1ec3 l\u1ea1i c\u1ea3m x\u00fac khi xem.</p> \u0110o\u1ea1n Gwen ti\u1ebft l\u1ed9 danh t\u00ednh tr\u01b0\u1edbc b\u1ed1 c\u1ee7a m\u00ecnh l\u00e0 ph\u00e2n \u0111o\u1ea1n c\u1ea3m x\u00fac \u0111\u1ea7u ti\u00ean. (V\u00e0 h\u00ecnh \u1ea3nh c\u0169ng \u0111\u1eb9p vl. Theo m\u00ecnh th\u00ec Earth-65 c\u1ee7a Gwen l\u00e0 v\u0169 tr\u1ee5 c\u00f3 h\u00ecnh \u1ea3nh \u0111\u1eb9p nh\u1ea5t phim) \u0110\u1ed9i h\u00ecnh Spidey \u0111\u01b0\u1ee3c ng\u01b0\u1eddi d\u00e2n \u1edf Earth-50101 tung h\u00f4 c\u0169ng r\u1ea5t c\u1ea3m x\u00fac. C\u1ea3nh n\u00e0y c\u00e0ng c\u00f3 \u00fd ngh\u0129a h\u01a1n khi ph\u1ea7n sau c\u1ee7a phim ti\u1ebft l\u1ed9 h\u00e0nh \u0111\u1ed9ng c\u1ee9u ng\u01b0\u1eddi c\u1ee7a Miles c\u00f3 th\u1ec3 hu\u1ef7 di\u1ec7t c\u1ea3 v\u0169 tr\u1ee5 n\u00e0y. Ngh\u0129a l\u00e0 m\u1eb7c d\u00f9 l\u00e0m \u0111\u01b0\u1ee3c vi\u1ec7c t\u1ed1t, \u0111\u01b0\u1ee3c ng\u01b0\u1eddi d\u00e2n tung h\u00f4, nh\u01b0ng ch\u01b0a ch\u1eafc vi\u1ec7c l\u00e0m n\u00e0y \u0111\u00e3 l\u00e0 vi\u1ec7c l\u00e0m \u0111\u00fang. L\u1ea7n \u0111\u1ea7u ti\u00ean Spider Society xu\u1ea5t hi\u1ec7n. M\u1ed9t s\u1ef1 cho\u00e1ng ng\u1ee3p. H\u00ecnh \u1ea3nh n\u00e0y ch\u1ec9 l\u00e0 \u0111\u1ea1i di\u1ec7n cho to\u00e0n b\u1ed9 \u0111o\u1ea1n Miguel gi\u1ea3i th\u00edch cho Miles v\u1ec1 Spider verse v\u00e0 Cannon event. Nh\u1eefng c\u00e2u chuy\u1ec7n v\u1ec1 c\u00e1c Spider-Man v\u00e0 nh\u1eefng k\u00fd \u1ee9c tu\u1ed5i th\u01a1 khi nh\u1eefng Spider-Man quen thu\u1ed9c xu\u1ea5t hi\u1ec7n. \u0110o\u1ea1n n\u00e0y ch\u1eafc kh\u00f4ng c\u1ea7n ph\u1ea3i gi\u1ea3i th\u00edch =)) \u0110i xem r\u1ea1p 2 l\u1ea7n th\u00ec c\u1ea3 2 l\u1ea7n nguy\u00ean r\u1ea1p \u0111\u1ec1u c\u01b0\u1eddi \u1ed3 l\u00ean c\u1ea3nh n\u00e0y. Kh\u00fac n\u00e0y b\u1eaft \u0111\u1ea7u c\u0103ng th\u1eb3ng khi m\u00e0 Miles v\u00e0 ng\u01b0\u1eddi xem bi\u1ebft \u0111\u01b0\u1ee3c s\u1ef1 th\u1eadt v\u1ec1 l\u00fd do th\u1ef1c s\u1ef1 t\u1ea1i sao Miles l\u1ea1i th\u00e0nh Spider-Man Ph\u00e2n c\u1ea3nh m\u00ecnh \u1ea5n t\u01b0\u1ee3ng nh\u1ea5t phim. Ngh\u0129 m\u00e0 xem, m\u1ed9t c\u1eadu nh\u00f3c 15 tu\u1ed5i, \u0111ang ph\u1ea3i g\u00e1nh tr\u1ecdng tr\u00e1ch b\u1ea3o v\u1ec7 th\u1ebf gi\u1edbi m\u1ed9t m\u00ecnh v\u00e0 kh\u00f4ng th\u1ec3 chia s\u1ebb n\u00f3 v\u1edbi ai k\u1ec3 c\u1ea3 gia \u0111\u00ecnh. L\u00fac t\u01b0\u1edfng r\u1eb1ng \u0111\u00e3 t\u00ecm \u0111\u01b0\u1ee3c nh\u1eefng ng\u01b0\u1eddi \u0111\u1ec3 chia s\u1ebb th\u00ec nh\u1eadn ra s\u1ef1 th\u1eadt ph\u0169 ph\u00e0ng v\u1ec1 b\u1ea3n th\u00e2n, nh\u01b0ng v\u1eabn ph\u1ea3i t\u1ef1 m\u00ecnh v\u01b0\u1ee3t qua m\u1ecdi th\u1ee9 \u0111\u1ec3 b\u1ea3o v\u1ec7 gia \u0111\u00ecnh kh\u1ecfi m\u1ed1i nguy tr\u01b0\u1edbc m\u1eaft. L\u00fac n\u00e0y \u0111ang \u0111u t\u01a1 v\u00e0 \u0111ang ngh\u0129 v\u1ec1 nh\u1eefng g\u00ec \u0111\u00e3 qua, xem c\u1ea3m x\u00fac th\u1ef1c s\u1ef1. Plot twist s\u1ed1 1: \u0110\u00e2y kh\u00f4ng ph\u1ea3i l\u00e0 v\u0169 tr\u1ee5 Earth-1610 c\u1ee7a Miles m\u00e0 l\u00e0 Earth-42, v\u0169 tr\u1ee5 c\u1ee7a con nh\u1ec7n \u0111\u00e3 c\u1eafn Miles. Ngay sau \u0111\u00f3 th\u00ec ch\u00fa Aaron xu\u1ea5t hi\u1ec7n. Th\u1ec1 xem \u0111o\u1ea1n n\u00e0y t\u1ef1 nhi\u00ean tim \u0111\u1eadp th\u00ecnh th\u1ecbch. Ch\u01b0a h\u1ebft b\u00e0ng ho\u00e0ng th\u00ec phim l\u1ea1i cho th\u00eam plot twist s\u1ed1 2: \u1ede v\u0169 tr\u1ee5 n\u00e0y Miles l\u00e0 Prowler. <p>C\u00e2u chuy\u1ec7n n\u00f3 cu\u1ed1n m\u00ecnh t\u1eeb \u0111\u1ea7u \u0111\u1ebfn cu\u1ed1i. Tr\u00ean kia ch\u1ec9 l\u00e0 nh\u1eefng kho\u1ea3nh kh\u1eafc \u0111\u1ec3 l\u1ea1i \u1ea5n t\u01b0\u1ee3ng s\u00e2u s\u1eafc cho m\u00ecnh khi xem phim.</p>"},{"location":"blog/spider-man-across-the-spider-verse/#4-nhung-iem-thu-vi-phat-hien-ra-sau-nhieu-lan-xem-phim","title":"4. Nh\u1eefng \u0111i\u1ec3m th\u00fa v\u1ecb ph\u00e1t hi\u1ec7n ra sau nhi\u1ec1u l\u1ea7n xem phim","text":"<p>\u0110\u00e3 c\u00f3 qu\u00e1 nhi\u1ec1u video tr\u00ean youtube ch\u1ec9 ra nh\u1eefng \u0111i\u1ec3m th\u00fa v\u1ecb hay Easter Egg c\u00f3 trong phim. \u1ede \u0111\u00e2y m\u00ecnh ch\u1ec9 n\u00eau ra nh\u1eefng ph\u00e1t hi\u1ec7n m\u00e0 m\u00ecnh ch\u01b0a th\u1ea5y ai ch\u1ec9 ra.</p>"},{"location":"blog/spider-man-across-the-spider-verse/#peter-b-parker-hieu-ro-miles","title":"Peter B. Parker hi\u1ec3u r\u00f5 Miles","text":"<p>L\u00fac m\u00e0 to\u00e0n b\u1ed9 Spider Society \u0111ang \u0111u\u1ed5i theo Miles, ch\u1ec9 c\u00f3 duy nh\u1ea5t Peter B. Parker l\u00e0 \u0111u t\u01a1 \u0111i ch\u1ed7 kh\u00e1c. Sau \u0111\u00f3 th\u00ec ta th\u1ea5y Peter B. t\u00f3m \u0111\u01b0\u1ee3c Miles v\u00e0 \u0111\u00e1nh l\u1ea1c h\u01b0\u1edbng to\u00e0n b\u1ed9 \u0111\u00e0n Nh\u1ec7n kia. \u0110i\u1ec1u n\u00e0y ch\u1ee9ng t\u1ecf Peter B. hi\u1ec3u r\u00f5 phong c\u00e1ch l\u00e0m Spider-Man c\u1ee7a Miles v\u00ec ch\u00ednh Peter B. l\u00e0 ng\u01b0\u1eddi \u0111\u00e3 d\u1ea1y Miles nh\u1eefng k\u1ef9 n\u0103ng c\u01a1 b\u1ea3n khi l\u00e0m Spider-Man \u1edf ph\u1ea7n tr\u01b0\u1edbc.</p> Peter B. Parker t\u00e1ch \u0111o\u00e0n v\u00e0 \u0111u t\u01a1 \u0111i ch\u1ed7 kh\u00e1c"},{"location":"blog/spider-man-across-the-spider-verse/#miles-khong-biet-comics-con-la-gi","title":"Miles kh\u00f4ng bi\u1ebft Comics Con l\u00e0 g\u00ec","text":"<p>\u0110\u00e2y l\u00e0 m\u1ed9t chi ti\u1ebft th\u00fa v\u1ecb. \u1ede ph\u1ea7n phim tr\u01b0\u1edbc, c\u00f3 m\u1ed9t \u0111o\u1ea1n Miles h\u1ecfi \"Comics-Con l\u00e0 g\u00ec?\"</p> <p>V\u00e0 sau m\u1ea5y n\u0103m th\u00ec Miles v\u1eabn kh\u00f4ng bi\u1ebft Comics-Con l\u00e0 g\u00ec =))</p> Rio: \"Is this where you dress up like your favourite character for... What's it called? Comics-Con?\" - Miles: \"I don't know what that is.\" =))"},{"location":"blog/spider-man-across-the-spider-verse/#earth-616","title":"Earth-616","text":"<p>\u0110\u00e1 qua MCU m\u1ed9t t\u00ed. Ta bi\u1ebft r\u1eb1ng Earth-616 l\u00e0 v\u0169 tr\u1ee5 g\u1ed1c c\u1ee7a MCU.</p> <p>Trong phim n\u00e0y th\u00ec Earth-616 c\u0169ng xu\u1ea5t hi\u1ec7n, nh\u01b0ng c\u00f3 v\u1ebb nh\u01b0 \u0111\u00f3 l\u00e0 m\u1ed9t v\u0169 tr\u1ee5 ch\u1ea3 c\u00f3 g\u00ec \u0111\u1eb7c bi\u1ec7t.</p> Phim c\u00f3 xu\u1ea5t hi\u1ec7n Spider-Man c\u1ee7a Earth-616 (g\u00f3c tr\u00e1i) <p>M\u00ecnh \u0111ang ngh\u0129 \u0111a v\u0169 tr\u1ee5 Spider-Verse v\u00e0 \u0111a v\u0169 tr\u1ee5 MCU l\u00e0 c\u00f9ng m\u1ed9t \u0111a v\u0169 tr\u1ee5, v\u00ec c\u1ea3 2 \u0111\u1ec1u c\u00f3 chung v\u0169 tr\u1ee5 c\u1ee7a nh\u1ec7n Tobey v\u00e0 nh\u1ec7n Andrew. Hy v\u1ecdng l\u00e0 Sony v\u00e0 Marvel th\u1ef1c s\u1ef1 th\u1ed1ng nh\u1ea5t c\u00e1i n\u00e0y. C\u00e1ch \u0111\u01a1n gi\u1ea3n nh\u1ea5t l\u00e0 c\u1ee9 thay \u0111\u1ed5i Earth-616 c\u1ee7a Spider-Verse th\u00e0nh m\u1ed9t Earth kh\u00e1c.</p> <p>Note</p> <p>M\u1ed9t \u00edt ki\u1ebfn th\u1ee9c v\u1ec1 comic: Theo m\u00ecnh bi\u1ebft th\u00ec c\u00f3 2 v\u0169 tr\u1ee5 m\u00e0 \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn m\u1ea1ch truy\u1ec7n ch\u00ednh c\u1ee7a Marvel Comic ch\u00ednh l\u00e0 Earth-616 v\u00e0 Earth-1610. V\u00ec v\u1eady m\u00ecnh ngh\u0129 n\u1ebfu Sony v\u00e0 Marvel ch\u1ecbu ng\u1ed3i v\u1edbi nhau \u0111\u1ec3 th\u1ed1ng nh\u1ea5t b\u1ee9c tranh \u0111a v\u0169 tr\u1ee5 n\u00e0y, s\u1ebd l\u00e0 m\u1ed9t ngu\u1ed3n t\u00e0i nguy\u00ean r\u1ea5t l\u1edbn \u0111\u1ec3 v\u1eaft s\u1eefa =))</p>"},{"location":"blog/spider-man-across-the-spider-verse/#5-mot-it-suy-oan-ve-phan-tiep-theo","title":"5. M\u1ed9t \u00edt suy \u0111o\u00e1n v\u1ec1 ph\u1ea7n ti\u1ebfp theo","text":"<p>V\u00e0o th\u1eddi \u0111i\u1ec3m m\u00ecnh vi\u1ebft b\u00e0i n\u00e0y, ch\u01b0a h\u1ec1 c\u00f3 th\u00f4ng tin g\u00ec v\u1ec1 ph\u1ea7n phim ti\u1ebfp theo. \u0110\u00e2y ch\u1ec9 l\u00e0 m\u1ed9t s\u1ed1 suy \u0111o\u00e1n d\u1ef1a v\u00e0o ph\u1ea7n phim n\u00e0y.</p>"},{"location":"blog/spider-man-across-the-spider-verse/#jeff-bo-cua-miles-la-toi-pham-o-earth-42","title":"Jeff - B\u1ed1 c\u1ee7a Miles l\u00e0 t\u1ed9i ph\u1ea1m \u1edf Earth-42","text":"<p>M\u00ecnh d\u1ef1a v\u00e0o c\u00e1c l\u00fd do sau:</p> <ul> <li>M\u1ed9t s\u1ed1 story board v\u00e0 catalog b\u1ecb l\u1ed9 ra ti\u1ebft l\u1ed9 r\u1eb1ng \u1edf Earth-42, Prowler (Miles) l\u00e0 anh h\u00f9ng ch\u1ee9 kh\u00f4ng ph\u1ea3i t\u1ed9i ph\u1ea1m.</li> <li>H\u00ecnh \u1ea3nh Jeff \u0111\u01b0\u1ee3c s\u01a1n l\u00ean t\u01b0\u1eddng, t\u01b0\u01a1ng t\u1ef1 nh\u01b0 ch\u00fa Aaron \u1edf Earth-1610, m\u00e0 \u1edf \u0111\u00e2y th\u00ec Aaron l\u00e0 t\u1ed9i ph\u1ea1m.</li> <li>D\u01b0\u1eddng nh\u01b0 c\u1ea3 Miles v\u00e0 Rio \u0111\u1ec1u t\u1eeb ch\u1ed1i s\u1ef1 li\u00ean quan \u0111\u1ebfn Jeff (l\u00fac Miles c\u1ee7a Earth-1610 nh\u1eafc \u0111\u1ebfn b\u1ed1 th\u00ec Rio c\u1ee7a Earth-42 l\u1eadp t\u1ee9c n\u00e9 tr\u00e1nh, v\u00e0 cu\u1ed1i phim Miles c\u1ee7a Earth-42 c\u0169ng ch\u1ed1i b\u1ecf vi\u1ec7c Jeff l\u00e0 b\u1ed1 c\u1ee7a m\u00ecnh)</li> </ul>"},{"location":"blog/spider-man-across-the-spider-verse/#spider-gwen-se-hy-sinh","title":"Spider-Gwen s\u1ebd hy sinh?","text":"<p>C\u00e1i n\u00e0y th\u00ec linh c\u1ea3m l\u00e0 ch\u00ednh. Tr\u01b0\u1edbc khi Gwen l\u00ean \u0111\u01b0\u1eddng c\u1ee9u Miles, c\u00f3 h\u1ee9a v\u1edbi b\u1ed1 c\u1ee7a m\u00ecnh l\u00e0 m\u00ecnh s\u1ebd quay l\u1ea1i. Kh\u00f4ng hi\u1ec3u sao m\u00ecnh c\u00f3 linh c\u1ea3m x\u1ea5u sau c\u00e2u n\u00f3i n\u00e0y.</p> Sau c\u00e2u n\u00e0y l\u00e0 \"Promise\""},{"location":"blog/spider-man-across-the-spider-verse/#tong-ket","title":"T\u1ed5ng k\u1ebft","text":"<p>Ch\u01b0a bao gi\u1edd ngh\u0129 m\u00ecnh l\u1ea1i th\u00edch m\u1ed9t c\u00e1i phim ho\u1ea1t h\u00ecnh \u0111\u1ebfn v\u1eady.</p> <p>Hi\u1ec7n t\u1ea1i v\u1eabn ch\u01b0a h\u1ec1 c\u00f3 m\u1ed9t th\u00f4ng tin g\u00ec v\u1ec1 ph\u1ea7n ti\u1ebfp theo c\u1ee7a phim, th\u1eadm ch\u00ed l\u00e0 ng\u00e0y ra m\u1eaft. V\u1eabn tr\u00ean t\u00ecnh th\u1ea7n l\u00e0 mong \u0111\u1ee3i cao, hy v\u1ecdng ph\u1ea7n ti\u1ebfp theo s\u1ebd so\u00e1n ng\u00f4i \"Tr\u1ea3i nghi\u1ec7p xem r\u1ea1p \u0111\u00e3 nh\u1ea5t\" c\u1ee7a c\u00e1 nh\u00e2n m\u00ecnh =))</p>"},{"location":"blog/algorithms-for-rate-limiting/","title":"Algorithms for rate limiting","text":"<p>In this post, we're going to discuss what a rate limiter is and which algorithms have been used for rate limiters.</p>"},{"location":"blog/algorithms-for-rate-limiting/#rate-limiter-overview","title":"Rate limiter overview","text":""},{"location":"blog/algorithms-for-rate-limiting/#what-is-a-rate-limiter","title":"What is a rate limiter?","text":"<p>In a network system, a rate limiter is used to control the rate of traffic sent by a client or a service.</p> <p>In HTTP world, a rate limiter limits the number of client requests allowed to be sent over a specified period.</p> <p>If the API request count exceeds the threshold defined by the rate limiter, all the excess calls are blocked.</p> Example <ul> <li>A user can write no more than 2 posts per second</li> <li>You can create a maximum of 100 accounts per day from the same IP address</li> <li>You can claim rewards no more than 5 times per week from the same device</li> </ul>"},{"location":"blog/algorithms-for-rate-limiting/#benefits-of-using-a-rate-limiter","title":"Benefits of using a rate limiter","text":""},{"location":"blog/algorithms-for-rate-limiting/#common-rate-limiting-algorithms","title":"Common rate limiting algorithms","text":"<p>This section will only provide a high-level understanding for popular algorithms for rate limiting.<sup>1</sup></p>"},{"location":"blog/algorithms-for-rate-limiting/#fixed-window-counter","title":"Fixed window counter","text":"<p>The fixed window counter algorithm divides the timeline into fixed-size time windows, and assigns a counter for each window.</p> <p>Each request increments the counter by some value based on the relative cost of the request.</p> <p>Once the counter reaches the threshold, subsequent requests are blocked until the new time window begins.</p> Example <p>In this example, the time unit is 1 second and the system allows a maximum of 3 requests per second.</p> <p>In each 1-second time window, if more than 3 requests are received, subsequent requests arriving within the same time window are dropped.</p> <p></p> <p>This algorithm is simple to implement. A major problem with it is that a burst of traffic at the beginning or end of time windows could allow excess requests over the threshold to go through.</p> Example <p>The rate limiter allows a maximum of 5 requests per minute, and the available quota resets at the top of each minute.</p> <p>There are five requests between 2:00:00 and 2:01:00 and five more requests between 2:01:00 and 2:02:00. For the 1-minute window between 2:00:30 and 2:01:30, 10 requests go through. That is twice as many as the allowed number of requests.</p> <p></p>"},{"location":"blog/algorithms-for-rate-limiting/#sliding-window-log","title":"Sliding window log","text":"<p>The sliding window log algorithm keeps track of the timestamps of individual requests in a log. The log is usually kept in a cache, such as sorted sets in Redis.</p> <p>When a new request arrives, the log is checked for requests within the window. The check removes all outdated timestamps older than the start of the current time window from the logs and adds the new request to the log. The new request is allowed if the number of existing requests within the window is below the limit.</p> Example <p>The rate limiter allows 2 requests per minute.</p> <p></p> <ol> <li>The log is empty when a new request arrives at 1:00:01. The request is allowed.</li> <li>A new request arrives at 1:00:30, the timestamp is inserted into the log. Now the log size is 2. It is below the threshold of 2. This request is also allowed.</li> <li>Another request arrives at 1:00:50, and the timestamp is inserted into the log. The new log size is 3, which is larger than the threshold. This request is rejected.</li> <li>The final request arrives at 1:01:40. Requests in the range \\([\\)1:00:40, 1:01:40\\()\\) are in the latest time window, but requests sent before 1:00:40 are outdated. Two outdated timestamps, 1:00:01 and 1:00:30, are removed from the log. After clearing the old log entries, the log size is 2, and the request is accepted.</li> </ol> <p>This algorithm ensures that in any rolling window, requests will not exceed the limit.</p> <p>However, the algorithm consumes a lot of memory. It maintains a log of timestamps, even for requests that are rejected.</p>"},{"location":"blog/algorithms-for-rate-limiting/#sliding-window-counter","title":"Sliding window counter","text":"<p>The sliding window counter algorithm is a more efficient variation of the sliding window log algorithm. It is a hybrid that combines the fixed window counter and sliding window log.</p> <p>Instead of maintaining a log of request timestamps, it calculates the weighted counter for the previous time window. When a new request arrives, the counter is adjusted based on the weight, and the request is allowed if the total is below the limit.</p> <p>The number of requests in the rolling window is calculated using the following formula:</p> \\[ \\tag{1} \\begin{array}{c} \\small\\text{requests in} \\\\ \\small\\text{current window} \\end{array} ~ + ~  \\begin{array}{c} \\small\\text{requests in the} \\\\ \\small\\text{previous window} \\end{array} ~ \\times ~ \\begin{array}{c} \\small\\text{overlap percentage of the} \\\\ \\small\\text{rolling window and previous window} \\end{array} \\] Example <p>The rate limiter allows a maximum of 7 requests per minute. There are 5 requests in the previous minute and 3 in the current minute. For a new request that arrives at 30% (18 seconds) into the current minute, </p> <p>Using formula \\((1)\\), we get \\(3 + 5 \\times 0.7 = 6.5\\) requests. Depending on the use case, the number can either be rounded up or down. In this example, it is rounded down to 6.</p> <p></p> <p>Since the rate limiter allows 7 requests per minute, the current request can go through.</p> <p>Note</p> <p>There is another way to implement this algorithm that is more complicated. Instead of computing a weighted counter for the previous window, it uses a counter for each time slot within the window. We will not discuss this other implementation here.</p> <p>This algorithm reduces storage and processing requirements compared to the sliding window log algorithm.</p> <p>However, it may still allow bursts of requests to slip through. It is an approximation of the actual rate because it assumes requests in the previous window are evenly distributed.</p>"},{"location":"blog/algorithms-for-rate-limiting/#token-bucket","title":"Token bucket","text":"<p>The token bucket algorithm is widely used for rate limiting. It is simple, well understood, and commonly used by large tech companies.</p> <p>The token bucket algorithm uses a \"bucket\" to hold a token. The tokens represent the allowed number of requests. The bucket is initially filled with tokens, and tokens are added at a fixed rate over time.</p> <p>When a request arrives, it consumes a token from the bucket, and the request is allowed if there are enough tokens.</p> Example <p>Here, the token capacity is 4. The refiller puts 2 tokens into the bucket every second. Once the bucket is full, extra tokens will overflow.</p> <p></p> <p>Each request consumes one token. When a request arrives, we check if there are enough tokens in the bucket. If there are enough tokens, we take one token out for each request, and the request goes through. If there are not enough tokens, the request is dropped.</p> <p></p> <p>The following diagram illustrates how token consumption, refill, and rate limiting logic work. In this example, the token bucket size is 4, and the refill is 4 per 1 minute.</p> <p></p> <p>The token bucket algorithm takes two parameters:</p> <ul> <li>Bucket size: The maximum number of tokens allowed in the bucket.</li> <li>Refill rate: number of tokens put into the bucket every second.</li> </ul> <p>How many buckets do we need? This depends on the rate-limiting rules.</p> <p>Example</p> <ul> <li> <p>It is usually necessary to have different buckets for different API endpoints. For instance, if a user is allowed to make 1 post per second, add 150 friends per day, and like 5 posts per second, 3 buckets are required for each user.</p> </li> <li> <p>If we need to throttle requests based on IP addresses, each IP address requires a bucket.</p> </li> <li> <p>If the system allows a maximum of 10000 requests per second, it makes sense to have a global bucket shared by all requests.</p> </li> </ul> <p>This algorithm allows a smooth distribution of requests and can handle burst of requests up to the bucket's capacity. It is memory efficient and relatively easy to implement.</p>"},{"location":"blog/algorithms-for-rate-limiting/#leaky-bucket","title":"Leaky bucket","text":"<p>The leaky bucket algorithm uses a \"bucket\" metaphor but processes requests differently.</p> <p>Requests enter the bucket and are processed at a fixed rate, simulating a \"leak\" in the bucket. If the bucket becomes full, new requests are discarded until there is space available.</p> <p>It is usually implemented with a FIFO queue. The algorithm works as follows:</p> <ul> <li>When a request arrives, the system checks if the queue is full. If it is not full, the request is added to the queue.</li> <li>Otherwise, the request is dropped.</li> <li>Requests are pulled from the queue and processed at regular intervals.</li> </ul> <p></p> <p>The leaky bucket algorithm takes the following two parameters:</p> <ul> <li>Bucket size: It is equal to the queue size. The queue holds the requests to be processed at a fixed rate.</li> <li>Outflow rate: It defines how many requests can be processed at a fixed rate, usually in requests per second.</li> </ul> <p>This algorithm is memory efficient given the limited queue size. Requests are processed at a fixed rate. It smooths out request bursts and enforces a consistent rate of processing. It is suitable for use cases where a stable outflow rate is required.</p> <p>However, a burst of requests would fill up the queue with old requests, and if they are not processed in time, recent requests will be rate limited. It may result in longer waiting times for requests during high-traffic periods.</p>"},{"location":"blog/algorithms-for-rate-limiting/#summary","title":"Summary","text":"<p>Five common rate limiting algorithms:</p> <ul> <li>Fixed Window Counter: Divides time into fixed windows and counts the number of requests within each window.</li> <li>Sliding Window Log: Keeps a log of request timestamps and continuously updates it to track requests within a sliding time window.</li> <li>Sliding Window Counter: Combines fixed and sliding window approaches by calculating a weighted counter from previous and current windows to regulate request rates.</li> <li>Token Bucket: Maintains a bucket of tokens, where each token allows a request. Tokens are added at a fixed rate, and requests are processed if enough tokens are available.</li> <li>Leaky Bucket: Processes requests at a constant rate by adding them to a queue and handling them one-by-one, simulating a fixed outflow rate.</li> </ul> <p>Each of these rate limiting algorithms has its strengths and weaknesses. The choice of the appropriate algorithm depends on the specific requirements of the system and its desired behavior under various conditions.</p> <ol> <li> <p>ByteByteGo, Rate Limiting Fundamentals \u21a9</p> </li> </ol>"},{"location":"blog/cap-theorem/","title":"The CAP theorem","text":"<p>In this post, we're going to explore what the CAP theorem is and its relevance in today\u2019s distributed systems.</p> <p>To be more intuitive, let's use a real-life example to illustrate the concepts:<sup>1</sup></p> <p>Tiny Bank example</p> <p>Let's say we have a tiny bank with exactly two ATMs connected over a network. The ATMs support three operations: deposit, withdraw, and check balance. There is no central database to keep the account balance, it is stored on both ATMs. No matter what happens, the balance should never go below zero.</p> <p> </p>","tags":["CAP theorem"]},{"location":"blog/cap-theorem/#what-is-the-cap-theorem","title":"What is the CAP theorem?","text":"<p>In database theory, the CAP theorem states that any distributed data store can provide only two of the following three guarantees:</p> <ul> <li> <p>Consistency: Refers to the property of a system where all nodes have a consistent view of the data. It means all clients see the same data at the same time no matter which node they connect to.</p> Tiny Bank example <p>Consistency means that the balance is always the same on both ATMs. When a customer uses an ATM, no matter which one they are using, they always see the same balance.</p> </li> <li> <p>Availability: Refers to the ability of a system to respond to requests from users at all times.</p> Tiny Bank example <p>Availability means that clients can always perform operations at any ATM.</p> </li> <li> <p>Partition tolerance: Refers to the ability of a system to continue operating even if there is a network partition.</p> Tiny Bank example <p>Partition tolerance means that the bank should remain operational even if the two ATMs are unable to communicate with each other.</p> </li> </ul> <p>Note</p> <p>In practice, during a network partition, a system must choose between consistency and availability.</p> <p>If the system prioritizes consistency, it may become unavailable until the partition is resolved.</p> <p>Conversely, if the system prioritizes availability, it may allow updates to the data, potentially resulting in data inconsistencies until the partition is resolved.</p> <p> </p> <p>We will discuss this in more detail in the next section.</p>","tags":["CAP theorem"]},{"location":"blog/cap-theorem/#cap-theorem-nosql-database-types","title":"CAP theorem NoSQL database types","text":"<p>NoSQL databases are ideal for distributed network applications. Unlike their vertically scalable SQL (relational) counterparts, NoSQL databases are horizontally scalable and distributed by design.<sup>2</sup></p> <p>Today, NoSQL databases are classified based on the two CAP characteristics they support:</p>","tags":["CAP theorem"]},{"location":"blog/cap-theorem/#cp-database","title":"CP database","text":"<p>A CP database delivers consistency and partition tolerance at the expense of availability.</p> <p>When a partition occurs between any two nodes, the system has to shut down the non-consistent node (i.e., make it unavailable) until the partition is resolved.</p> Tiny Bank example <p>If there is a network partition and the ATMs are unable to communicate with each other, and the bank prioritizes consistency, the ATMs may refuse to process deposits or withdrawals until the partition is resolved. This ensures that the balance remains consistent, but the system is unavailable to customers.</p> <p> If a network partition occurs, customers cannot make deposits or withdrawals, ensuring the system's consistency. </p>","tags":["CAP theorem"]},{"location":"blog/cap-theorem/#ap-database","title":"AP database","text":"<p>An AP database delivers availability and partition tolerance at the expense of consistency.</p> <p>When a partition occurs, all nodes remain available but those at the wrong end of a partition might return an older version of data than others. (When the partition is resolved, the AP databases typically resync the nodes to repair all inconsistencies in the system.)</p> Tiny Bank example <p>If there is a network partition and the ATMs are unable to communicate with each other, and the bank prioritizes availability, the ATM may allow deposits and withdrawals to occur, but the balance may become inconsistent until the partition is resolved.</p> <p> If a network partition occurs, the balance may become inconsistent when customers make deposits or withdrawals. </p>","tags":["CAP theorem"]},{"location":"blog/cap-theorem/#ca-database","title":"CA database","text":"<p>A CA database delivers consistency and availability across all nodes. It can\u2019t do this if there is a partition between any two nodes in the system. Therefore, it can\u2019t deliver fault tolerance.</p> <p>In practice, this means that for a CA database to function correctly, it must operate in an environment where network partitions are impossible or extremely rare.</p> Tiny Bank example <p>If the system requires both consistency and availability, then network partitions must not occur. If a network partition does happen, the system will become unavailable, users will experience downtime.</p> <p>Note</p> <p>In a distributed system, partitions can\u2019t be avoided. So, while we can discuss a CA distributed database in theory, for all practical purposes, a CA distributed database can\u2019t exist. This doesn\u2019t mean you can\u2019t have a CA database for your distributed application if you need one. Many relational databases, such as PostgreSQL, deliver consistency and availability in a single-node setup or with replication, assuming no network partitions occur.<sup>2</sup></p>","tags":["CAP theorem"]},{"location":"blog/cap-theorem/#summary","title":"Summary","text":"<p>The CAP theorem is a useful tool for understanding the high-level trade-offs to consider during a network partition. While it is a good starting point, it does not provide a complete picture of the trade-offs involved in designing a comprehensive distributed system.</p> <p>Despite numerous advancements in NoSQL databases and other distributed systems, the CAP theorem remains relevant today as a fundamental tradeoff in distributed system designs.<sup>3</sup></p> <p>Note</p> <p>The CAP theorem assumes 100% availability or 100% consistency. In the real world, there are degrees of consistency and availability that distributed system designers must carefully consider.</p> Tiny Bank Example <p>During a network partition, the ATMs could allow only balance inquiries to be processed, while deposits or withdrawals are blocked. This maintains the system's consistency but is not 100% unavailable to customers (customers can still perform balance inquiries).</p> <p> If a network partition occurs, the ATMs could allow only balance inquiries to be processed, while deposits or withdrawals are blocked. </p> <ol> <li> <p>ByteByteGo, CAP Theorem Simplified \u21a9</p> </li> <li> <p>IBM, What is the CAP theorem? \u21a9\u21a9</p> </li> <li> <p>RR, CAP theorem \u2014 Is it still relevant? \u21a9</p> </li> </ol>","tags":["CAP theorem"]},{"location":"blog/hadoop-overview/","title":"Gi\u1edbi thi\u1ec7u v\u1ec1 Apache Hadoop","text":"<p>B\u00e0i vi\u1ebft n\u00e0y gi\u1edbi thi\u1ec7u c\u00e1i nh\u00ecn t\u1ed5ng quan nh\u1ea5t v\u1ec1 Apache Hadoop, bao g\u1ed3m ki\u1ebfn tr\u00fac, c\u00e1ch th\u1ee9c ho\u1ea1t \u0111\u1ed9ng c\u1ee7a n\u00f3.</p> <p>Apache Hadoop l\u00e0 m\u1ed9t framework d\u00f9ng \u0111\u1ec3 l\u01b0u tr\u1eef v\u00e0 x\u1eed l\u00fd d\u1eef li\u1ec7u l\u1edbn. Hadoop s\u1eed d\u1ee5ng m\u1ed9t cluster g\u1ed3m nhi\u1ec1u nodes \u0111\u1ec3 x\u1eed l\u00fd d\u1eef li\u1ec7u song song thay v\u00ec ch\u1ec9 s\u1eed d\u1ee5ng m\u1ed9t m\u00e1y duy nh\u1ea5t, c\u1ea3i thi\u1ec7n t\u1ed1c \u0111\u1ed9 khi x\u1eed l\u00fd d\u1eef li\u1ec7u l\u1edbn.<sup>1</sup></p>","tags":["Hadoop"]},{"location":"blog/hadoop-overview/#tong-quan-ve-hadoop","title":"T\u1ed5ng quan v\u1ec1 Hadoop","text":"<p>Hadoop s\u1eed d\u1ee5ng h\u00e0ng tr\u0103m th\u1eadm ch\u00ed h\u00e0ng ng\u00e0n servers l\u00e0m vi\u1ec7c c\u00f9ng nhau \u0111\u1ec3 l\u01b0u tr\u1eef v\u00e0 x\u1eed l\u00fd d\u1eef li\u1ec7u l\u1edbn.</p> <p>Hadoop bao g\u1ed3m 4 modules ch\u00ednh<sup>1</sup>:</p> <ul> <li>Hadoop Distributed File System (HDFS) l\u00e0 m\u1ed9t distributed file system, d\u00f9ng \u0111\u1ec3 l\u01b0u tr\u1eef data.</li> <li>Yet Another Resource Negotiator (YARN) l\u00e0 module \u0111\u1ec3 qu\u1ea3n l\u00fd v\u00e0 monitor c\u00e1c nodes. N\u00f3 c\u00f3 t\u00e1c d\u1ee5ng schedules c\u00e1c jobs v\u00e0 tasks, \u0111\u00f3ng vai tr\u00f2 nh\u01b0 m\u1ed9t resource manager.</li> <li>MapReduce l\u00e0 module th\u1ef1c thi\u1ec7n x\u1eed l\u00fd data. </li> <li>Hadoop Common cung c\u1ea5p c\u00e1c th\u01b0 vi\u1ec7n java \u0111\u1ec3 c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng \u1edf c\u00e1c module kh\u00e1c.</li> </ul> <p>M\u1ed9t Hadoop cluster bao g\u1ed3m m\u1ed9t ho\u1eb7c nhi\u1ec1u master nodes v\u00e0 nhi\u1ec1u slave nodes, c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c scale out b\u1eb1ng c\u00e1ch th\u00eam nodes v\u00e0o cluster.</p> <p>C\u00e1c ph\u1ea7n ti\u1ebfp theo c\u1ee7a b\u00e0i vi\u1ebft s\u1ebd n\u00f3i k\u1ef9 h\u01a1n v\u1ec1 ki\u1ebfn tr\u00fac v\u00e0 c\u00e1ch ho\u1ea1t \u0111\u1ed9ng c\u1ee7a Hadoop.</p>","tags":["Hadoop"]},{"location":"blog/hadoop-overview/#kien-truc-hadoop","title":"Ki\u1ebfn tr\u00fac Hadoop","text":"<p>Ki\u1ebfn tr\u00fac c\u1ee7a Hadoop c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c chia th\u00e0nh 4 layers:</p> T\u1ed5ng quan v\u1ec1 ki\u1ebfn tr\u00fac c\u1ee7a Hadoop","tags":["Hadoop"]},{"location":"blog/hadoop-overview/#distributed-storage-layer","title":"Distributed Storage Layer","text":"<p>Th\u1eb1ng n\u00e0y ch\u00ednh l\u00e0 th\u1eb1ng HDFS, bao g\u1ed3m m\u1ed9t ho\u1eb7c nhi\u1ec1u master nodes (hay c\u00f2n g\u1ecdi l\u00e0 NameNode) v\u00e0 nhi\u1ec1u slave nodes (hay c\u00f2n g\u1ecdi l\u00e0 DataNode). M\u1ed7i node c\u00f3 b\u1ed9 nh\u1edb c\u1ee7a ri\u00eang n\u00f3. Data \u0111\u01b0\u1ee3c \u0111\u01b0a v\u00e0o s\u1ebd \u0111\u01b0\u1ee3c chia th\u00e0nh c\u00e1c data blocks sau \u0111\u00f3 \u0111\u01b0\u1ee3c l\u01b0u \u1edf HDFS distributed storage layer. Ngo\u00e0i ra, HDFS l\u01b0u th\u00eam 3 b\u1ea3n copies c\u1ee7a data \u1edf tr\u00ean kh\u1eafp cluster. NameNode s\u1ebd l\u01b0u th\u00f4ng tin v\u1ec1 c\u00e1c data block c\u1ee5 th\u1ec3 v\u00e0 c\u00e1c replicas c\u1ee7a n\u00f3 \u0111\u01b0\u1ee3c l\u01b0u \u1edf \u0111\u00e2u trong cluster.</p>","tags":["Hadoop"]},{"location":"blog/hadoop-overview/#cluster-resource-management","title":"Cluster Resource Management","text":"<p>Th\u1eb1ng n\u00e0y ch\u00ednh l\u00e0 th\u1eb1ng YARN. N\u00f3 s\u1ebd ch\u1ec9 \u0111\u1ecbnh resource cho c\u00e1c frameworks kh\u00e1c \u0111\u01b0\u1ee3c vi\u1ebft cho Hadoop. M\u1ed9t s\u1ed1 framework nh\u01b0 Apache Pig, Hive, Giraph, Zookeeper. N\u00f3 c\u0169ng ch\u1ec9 \u0111\u1ecbnh resource cho ch\u00ednh th\u1eb1ng MapReduce lu\u00f4n.</p>","tags":["Hadoop"]},{"location":"blog/hadoop-overview/#processing-framework-layer","title":"Processing Framework Layer","text":"<p>Layer n\u00e0y bao g\u1ed3m c\u00e1c frameworks th\u1ef1c hi\u1ec7n c\u00e1c b\u01b0\u1edbc x\u1eed l\u00fd data. C\u00e1c framework nh\u01b0 Spark, Storm hay Tez b\u00e2y gi\u1edd c\u00f3 th\u1ec3 x\u1eed l\u00fd real-time, t\u0103ng hi\u1ec7u qu\u1ea3 cho h\u1ec7 th\u1ed1ng.</p>","tags":["Hadoop"]},{"location":"blog/hadoop-overview/#application-programming-interface","title":"Application Programming Interface","text":"<p>Nh\u01b0 t\u00ean g\u1ecdi c\u1ee7a n\u00f3, layer n\u00e0y g\u1ed3m c\u00e1c API \u0111\u1ec3 c\u00e1c l\u1eadp tr\u00ecnh vi\u00ean s\u1eed d\u1ee5ng.</p> <p>Chi ti\u1ebft v\u1ec1 c\u00e1ch ho\u1ea1t \u0111\u1ed9ng c\u1ee7a t\u1eebng th\u00e0nh ph\u1ea7n s\u1ebd \u0111\u01b0\u1ee3c n\u00f3i k\u1ef9 h\u01a1n \u1edf m\u1ed9t b\u00e0i vi\u1ebft kh\u00e1c.</p> <ol> <li> <p>AWS, What is Hadoop \u21a9\u21a9</p> </li> </ol>","tags":["Hadoop"]},{"location":"blog/load-balancing-algorithms/","title":"Load Balancing Algorithms","text":"<p>In this post, we'll provide a comprehensive overview of load balancing algorithms, discussing how they work and their pros and cons.</p> <p>A load balancer is a device that distributes network traffic across multiple servers. A load balancing algorithm is the logic a load balancer uses to distribute network traffic among these servers.<sup>1</sup></p> <p>There are two main categories of algorithms: static and dynamic. Let's explore each category and dive deeper into the major specific algorithms.<sup>2</sup></p>","tags":["Load Balancing"]},{"location":"blog/load-balancing-algorithms/#static-algorithms","title":"Static Algorithms","text":"<p>Static load balancing algorithms distribute requests to servers without taking into account the servers' real-time conditions and performance metrics.</p>","tags":["Load Balancing"]},{"location":"blog/load-balancing-algorithms/#round-robin","title":"Round Robin","text":"<p>Description</p> <p>Distributes requests evenly among servers in sequence.</p> <p>Pros</p> <ul> <li>Easy to implement and understand.</li> </ul> <p>Cons</p> <ul> <li>Can potentially overload servers if they are not properly monitored.</li> </ul>","tags":["Load Balancing"]},{"location":"blog/load-balancing-algorithms/#sticky-round-robin","title":"Sticky Round Robin","text":"<p>Description</p> <p>An extension of round robin that tries to route subsequent requests from the same user to the same server.</p> <p>Pros</p> <ul> <li>Improves performance by keeping related data on the same server.</li> </ul> <p>Cons</p> <ul> <li>Uneven loads can easily occur since newly arriving users are assigned randomly.</li> </ul>","tags":["Load Balancing"]},{"location":"blog/load-balancing-algorithms/#weighted-round-robin","title":"Weighted Round Robin","text":"<p>Description</p> <p>Allows admins to assign different weights or priorities to different servers. Servers with higher weights receive higher number of requests.</p> <p>Pros</p> <ul> <li>Accounts for heterogeneous server capabilities.</li> </ul> <p>Cons</p> <ul> <li>Weights must be manually configured, which is less adaptive to real-time changes.</li> </ul>","tags":["Load Balancing"]},{"location":"blog/load-balancing-algorithms/#hash-based-algorithms","title":"Hash-Based Algorithms","text":"<p>Description</p> <p>Uses a hash function to map incoming requests to the backend servers. The hash function often uses the client's IP address or the requested URL as input for determining where to route each request.</p> <p>Pros</p> <ul> <li>Can evenly distribute requests if the function is chosen wisely.</li> </ul> <p>Cons</p> <ul> <li>Selecting an optimal hash function can be challenging.</li> </ul>","tags":["Load Balancing"]},{"location":"blog/load-balancing-algorithms/#dynamic-algorithms","title":"Dynamic Algorithms","text":"<p>Dynamic load balancing algorithms adapt in real-time by taking active performance metrics and server conditions into account when distributing requests.</p>","tags":["Load Balancing"]},{"location":"blog/load-balancing-algorithms/#least-connections","title":"Least Connections","text":"<p>Description</p> <p>Sends each new request to the server currently with the least number of active connections or open requests.</p> <p>Pros</p> <ul> <li>New requests are adaptively routed to where there is the most remaining capacity.</li> </ul> <p>Cons</p> <ul> <li>Requires actively tracking the number of ongoing connections on each backend server.</li> <li>Load can unintentionally concentrate on certain servers if connections pile up unevenly.</li> </ul>","tags":["Load Balancing"]},{"location":"blog/load-balancing-algorithms/#least-response-time","title":"Least Response Time","text":"<p>Description</p> <p>Sends incoming requests to the server with the lowest current latency or fastest response time. Latency for each server is continuously measured and factored in.</p> <p>Pros</p> <ul> <li>Highly adaptive and reactive.</li> </ul> <p>Cons</p> <ul> <li>Requires constant monitoring, which incurs significant overhead and introduces complexity.</li> <li>Does not consider how many existing requests each server already has.</li> </ul>","tags":["Load Balancing"]},{"location":"blog/load-balancing-algorithms/#summary","title":"Summary","text":"","tags":["Load Balancing"]},{"location":"blog/load-balancing-algorithms/#static-algorithms_1","title":"Static Algorithms","text":"<p>There are clear tradeoffs between simple static algorithms and more adaptive dynamic ones. Static algorithms like round robin work well for stateless applications. Dynamic algorithms help optimize response times and availability for large, complex applications.<sup>2</sup></p> <ol> <li> <p>Cloudflare, Types of load balancing algorithms \u21a9</p> </li> <li> <p>ByteByteGo, Top 6 Load Balancing Algorithms Every Developer Should Know \u21a9\u21a9</p> </li> </ol>","tags":["Load Balancing"]},{"location":"course/","title":"Courses","text":"<ul> <li> <p> Advanced Python</p> <p>Explains the advanced Python concepts and helps you understand how and why things work in Python under the hood.</p> <p> Go to course notes</p> </li> <li> <p> Python Concurrency \\(~\\) </p> <p>Python concurrency including multithreading, multiprocessing, and asynchronous programming from scratch.</p> <p> Go to course notes</p> </li> <li> <p> Python OOP \\(~\\) </p> <p>Object-oriented principles. How to use Python syntax to create reliable and robust software applications.</p> <p> Go to course notes</p> </li> </ul>"},{"location":"course/advance-python/","title":"Advanced Python","text":"<p>For more information on the course, visit the original source here.</p> <p>Abstract</p> <p>Explains the advanced Python concepts and helps you understand how and why things work in Python under the hood.</p> <p>Some of the advanced Python concepts introduced in the original source are already familiar to me, so I might skip those in this course. The bottom line is that this is my notebook, not a textbook.</p>"},{"location":"course/advance-python/#section-1-variables-memory-management","title":"Section 1. Variables &amp; Memory Management","text":"<ul> <li>Section Summary - Variables &amp; Memory Management</li> </ul>"},{"location":"course/advance-python/#section-2-integer-types","title":"Section 2. Integer types","text":"<ul> <li>Section Summary - Integer types</li> </ul>"},{"location":"course/advance-python/#section-3-float","title":"Section 3. Float","text":"<ul> <li>Section Summary - Float</li> </ul>"},{"location":"course/advance-python/#section-4-decimal","title":"Section 4. Decimal","text":"<ul> <li>Section Summary - Decimal</li> </ul>"},{"location":"course/advance-python/#section-5-variable-scopes","title":"Section 5. Variable scopes","text":""},{"location":"course/advance-python/#section-6-closures","title":"Section 6. Closures","text":""},{"location":"course/advance-python/#section-7-decorators","title":"Section 7. Decorators","text":"<ul> <li>Section Summary - Decorators</li> </ul>"},{"location":"course/advance-python/#section-8-named-tuples","title":"Section 8. Named Tuples","text":"<ul> <li>Section Summary - Named Tuples</li> </ul>"},{"location":"course/advance-python/#section-9-sequence-types","title":"Section 9. Sequence Types","text":"<ul> <li>Section Summary - Sequence Types</li> </ul>"},{"location":"course/advance-python/#section-10-iterators-and-iterables","title":"Section 10. Iterators and Iterables","text":"<ul> <li>Section Summary - Iterators and Iterables</li> </ul>"},{"location":"course/advance-python/#section-11-generators","title":"Section 11. Generators","text":"<ul> <li>Section Summary - Generators</li> </ul>"},{"location":"course/advance-python/#section-12-context-managers","title":"Section 12. Context Managers","text":"<ul> <li>Section Summary - Context Managers</li> </ul>"},{"location":"course/advance-python/S01-Summary/","title":"Variables &amp; Memory Management","text":"<p>Summary</p> <ul> <li>Python garbage collector helps to avoid memory leaks by detecting circular references and destroy objects appropriately.</li> <li>Never disable the garbage collector unless we have a good reason to do so.</li> <li>In Python, variables don't associate with any particular types. Use the <code>type()</code> function to get the type of the objects that variables reference.</li> <li>An object whose internal state cannot be changed is called immutable for example a number, a string, and a tuple. An object whose internal state can be changed is called mutable for example a list, a set, and a dictionary.</li> <li>Use the <code>is</code> operator to check if two variables reference the same object. Use the <code>not</code> operator to negate the result of the <code>is</code> operator.</li> <li><code>None</code> is not equal to anything except itself.</li> </ul>"},{"location":"course/advance-python/S02-Summary/","title":"Integer types","text":"<p>Summary</p> <ul> <li>Use the <code>getsizeof()</code> function of the <code>sys</code> module to get the number of bytes of an integer.</li> </ul>"},{"location":"course/advance-python/S03-Summary/","title":"Float","text":"<p>Summary</p> <ul> <li>Python use a fixed number of bytes (8 bytes) to represent floats. Therefore, it can present some numbers in binary approximately.</li> <li> <p>Use <code>isclose()</code> function from the <code>math</code> module to test equality for floating-point numbers.</p> <p>Example</p> <pre><code>from math import isclose\n\nx = 0.1 + 0.1 + 0.1\ny = 0.3\n\nprint(isclose(x,y))\n</code></pre> </li> <li> <p>float to int:      <li> <p>Use the <code>round(number, ndigits)</code> function to round a <code>number</code> to the <code>digits</code> precision after the decimal point.</p> <p>Example</p> <p><pre><code>round(2/3, 3)\n</code></pre> Output<pre><code>0.667\n</code></pre></p> </li>"},{"location":"course/advance-python/S04-Summary/","title":"Decimal","text":"<p>Summary</p> <ul> <li>Use the Python <code>decimal</code> module when you want to support fast correctly-rounded decimal floating-point arithmetic.</li> <li>Use the <code>Decimal</code> class from the <code>decimal</code> module to create Decimal object from strings, integers, and tuples.</li> <li>The <code>Decimal</code> numbers have a context that controls the precision and rounding mechanism.</li> <li>The <code>Decimal</code> class doesn\u2019t have all methods defined in the <code>math</code> module. However, you should use the Decimal\u2019s arithmetic methods if they\u2019re available.</li> </ul>"},{"location":"course/advance-python/S07-Summary/","title":"Python Decorators","text":""},{"location":"course/advance-python/S07-Summary/#what-is-a-decorator-in-python","title":"What is a decorator in Python?","text":"<p>A decorator is a function that takes another function as an argument and extends its behavior without changing the original function explicitly.</p> <p>In general, a decorator is:</p> <ul> <li>A function that takes another function (original function) as an argument and returns another function (or closure)</li> <li>The closure typically accepts any combination of positional and keyword-only arguments</li> <li>The closure function calls the original function using the arguments passed to the closure and returns the result of the function.</li> </ul>"},{"location":"course/advance-python/S07-Summary/#decorator-example","title":"Decorator example","text":"<p>Example</p> <pre><code>from functools import wraps\n\ndef currency(fn):  #(1)\n    @wraps(fn)\n    def wrapper(*args, **kwargs):  #(2)\n        result = fn(*args, **kwargs)  #(3)\n        return f'${result}'\n    return wrapper  #(4)\n\n@currency\ndef net_price(price, tax):\n    \"\"\" calculate the net price from price and tax\n    Arguments:\n        price: the selling price\n        tax: value added tax or sale tax\n    Return\n        the net price\n    \"\"\"\n    return price * (1 + tax)\n\nhelp(net_price)\nprint(net_price.__name__)\n</code></pre> <ol> <li>The <code>currency</code> decorator is a function that takes another function as an argument.</li> <li>We define a closure that accepts any combination of positional and keyword-only arguments.</li> <li>The closure function calls the original function using the arguments passed to the closure and returns the result of the function.</li> <li>The decorator return the closure.</li> </ol> Output<pre><code>net_price(price, tax)\n    calculate the net price from price and tax\n    Arguments:\n        price: the selling price\n        tax: value added tax or sale tax\n    Return\n        the net price\n\nnet_price\n</code></pre>"},{"location":"course/advance-python/S07-Summary/#decorator-with-arguments","title":"Decorator with Arguments","text":"<p>Example</p> <p><pre><code>from functools import wraps\n\ndef repeat(times):\n    ''' call a function a number of times '''\n    def decorate(fn):\n        @wraps(fn)\n        def wrapper(*args, **kwargs):\n            for _ in range(times):\n                result = fn(*args, **kwargs)\n            return result\n        return wrapper\n    return decorate\n\n@repeat(10)\ndef say(message):\n    ''' print the message\n    Arguments\n        message: the message to show\n    '''\n    print(message)\n\nsay('Hello')\n</code></pre> Output<pre><code>Hello\nHello\nHello\nHello\nHello\nHello\nHello\nHello\nHello\nHello\n</code></pre></p>"},{"location":"course/advance-python/S07-Summary/#class-decorator","title":"Class decorator","text":"<p>Example</p> <pre><code>from functools import wraps\n\nclass Star:\n    def __init__(self, n):\n        self.n = n\n\n    def __call__(self, fn):\n        @wraps(fn)\n        def wrapper(*args, **kwargs):\n            print(self.n*'*')\n            result = fn(*args, **kwargs)\n            print(result)\n            print(self.n*'*')\n            return result\n        return wrapper\n\n@Star(5)\ndef add(a, b):\n    return a + b\n\nadd(10, 20)\n</code></pre> <p>Summary</p> <ul> <li>A decorator is a function that changes the behavior of another function without explicitly modifying it.</li> <li>Use <code>wraps</code> function from the <code>functools</code> built-in module to retain the documentation and name of the original function.</li> <li>Use a factory decorator to return a decorator that accepts arguments.</li> <li>Use callable classes as decorators by implementing the <code>__call__</code> method. Pass the decorator arguments to the <code>__init__</code> method.</li> </ul>"},{"location":"course/advance-python/S08-Summary/","title":"Named Tuple","text":"<p>A named tuple is a subclass of <code>tuple</code>. On top of that, it adds property names to the positional elements.</p> <p>Example</p> <pre><code>from collections import namedtuple\n\nPoint = namedtuple(\"Point2D\", [\"x\", \"y\"])\n\nA = Point(6, 9)\nB = Point(x=5, y=3)\n\nprint(A._fields)\nprint(A.x, A.y)\nprint(B.x, B.y)\n</code></pre> Output<pre><code>('x', 'y')\n6 9\n5 3\n</code></pre> <p>Summary</p> <ul> <li>Named tuples are tuples whose element positions have meaningful names.</li> <li>Use the <code>namedtuple</code> function from the <code>collections</code> standard library to create a named tuple class.</li> <li>Named tuples are immutable.</li> </ul>"},{"location":"course/advance-python/S09-Summary/","title":"Sequence Types","text":"<p>A custom sequence type needs to implement the following methods:</p> <ul> <li> <p><code>__getitem__</code></p> <ul> <li>Has the <code>index</code> argument which should be either an integer or a slice object.</li> <li>If the <code>index</code> is out of bounds, the <code>__getitem__</code> method should raise an <code>IndexError</code> exception.</li> </ul> </li> <li> <p><code>__len__</code></p> <ul> <li>Returns the length of the sequence.</li> </ul> </li> </ul> <p>Example</p> <pre><code>class Sentence:\n    def __init__(self, sentence: str) -&gt; None:\n        self.sentence = sentence\n        self.words = sentence.split()\n\n    def __len__(self):\n        return len(self.words)\n\n    def __getitem__(self, index):\n        if isinstance(index, int):\n            if index &gt; len(self.words):\n                raise IndexError\n            return self.words[index]\n\n        elif isinstance(index, slice):\n            indices = index.indices(len(self.words))\n            return \" \".join([self.words[i] for i in range(*indices)])\n\n        else:\n            raise TypeError\n\n\nsentence = Sentence(\"I love you 3000\")\n\nprint(sentence[-1])\nprint(sentence[1:3])\nprint(sentence[5])\n</code></pre> Output<pre><code>3000\nlove you\nTraceback (most recent call last):\nFile \"/Users/duynm/duynm/me/studying/AdvancePython/Section 09. Sequence Types/test.py\", line 27, in &lt;module&gt;\n    print(sentence[5])\nFile \"/Users/duynm/duynm/me/studying/AdvancePython/Section 09. Sequence Types/test.py\", line 12, in __getitem__\n    raise IndexError\nIndexError\n</code></pre> <p>Summary</p> <ul> <li>Implement the <code>__len__</code> and <code>__getitem__</code> method to define a custom sequence.</li> <li>The <code>__getitem__</code> method need to returns an element based on a given index or raise an <code>IndexError</code> if the index is out of bounds.</li> </ul>"},{"location":"course/advance-python/S10-Summary/","title":"Iterators and Iterables","text":""},{"location":"course/advance-python/S10-Summary/#iterator","title":"Iterator","text":"<p>An iterator is an object that implements the iterator protocol:</p> <ul> <li><code>__iter__</code> method that returns the object itself</li> <li><code>__next__</code> method that returns the next item. If all the items have been returned, the method raises a <code>StopIteration</code> exception.</li> </ul> <p>Example</p> <pre><code>class Square:\n    def __init__(self, n) -&gt; None:\n        self.n = n\n        self.curr = 0\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.curr &gt;= self.n:\n            raise StopIteration\n\n        self.curr += 1\n        return self.curr**2\n\n\nsquare = Square(5)\nfor i in square:\n    print(i)\n\nnext(square)\n</code></pre> Output<pre><code>1\n4\n9\n16\n25\nTraceback (most recent call last):\nFile \"/Users/duynm/duynm/me/studying/AdvancePython/Section 10. Iterators and Iterables/test.py\", line 21, in &lt;module&gt;\n    next(square)\nFile \"/Users/duynm/duynm/me/studying/AdvancePython/Section 10. Iterators and Iterables/test.py\", line 11, in __next__\n    raise StopIteration\nStopIteration\n</code></pre>"},{"location":"course/advance-python/S10-Summary/#iterables","title":"Iterables","text":"<p>An object is iterable when it implements the <code>__iter__</code> method and its <code>__iter__</code> method returns a new iterator.</p> <p>Example</p> <pre><code>class Colors:\n    def __init__(self):\n        self.rgb = ['red', 'green', 'blue']\n\n    def __len__(self):\n        return len(self.rgb)\n\n    def __iter__(self):\n        return self.ColorIterator(self)\n\n    class ColorIterator:\n        def __init__(self, colors):\n            self.__colors = colors\n            self.__index = 0\n\n        def __iter__(self):\n            return self\n\n        def __next__(self):\n            if self.__index &gt;= len(self.__colors):\n                raise StopIteration\n\n            # return the next color\n            color = self.__colors.rgb[self.__index]\n            self.__index += 1\n            return color\n</code></pre>"},{"location":"course/advance-python/S10-Summary/#python-iter","title":"Python <code>iter</code>","text":"<p>The <code>iter()</code> function required an argument that can be an iterable or a sequence. In general, the object argument can be any object that supports either iteration or sequence protocol.</p> <p>The following flowchart illustrates how the <code>iter()</code> function works:</p> <p>Summary</p> <ul> <li>An iterable is an object that implements the <code>__iter__</code> method which returns an iterator.</li> <li>An iterator is an object that implements the <code>__iter__</code> method which returns itself and the <code>__next__</code> method which returns the next element.</li> <li>Iterators are also iterables</li> <li>Use the Python <code>iter()</code> function to get in iterator of an object.</li> </ul>"},{"location":"course/advance-python/S11-Summary/","title":"Generators","text":""},{"location":"course/advance-python/S11-Summary/#python-generators","title":"Python Generators","text":"<p>To pause a function midway and resume from where the function was paused, we use the <code>yield</code> statement.</p> <p>A generator is a function that contains at least one <code>yield</code> statement.</p> <p>When we call a generator function, it returns a new generator object. However, it doesn't start the function.</p> <p>Generator objects (or generators) implement the iterator protocol.</p> <p>Example</p> <pre><code>def squares(length):\n    for n in range(length):\n        yield n ** 2\n\nlength = 5\nsquare = squares(length)\nfor s in square:\n    print(s)\n</code></pre> Output<pre><code>0\n1\n4\n9\n16\n</code></pre>"},{"location":"course/advance-python/S11-Summary/#generator-expressions","title":"Generator Expressions","text":"<p>Example</p> <pre><code>square_generator = (n**2 for n in range(5))\n\nprint(next(square_generator))\nprint(next(square_generator))\nprint(next(square_generator))\nprint(next(square_generator))\nprint(next(square_generator))\nprint(next(square_generator))\n</code></pre> Output<pre><code>0\n1\n4\n9\n16\nTraceback (most recent call last):\nFile \"/Users/duynm/duynm/me/studying/AdvancePython/Section 11. Generators/test.py\", line 8, in &lt;module&gt;\n    print(next(square_generator))\nStopIteration\n</code></pre> <p>Summary</p> <ul> <li>Python generators are functions that contain at least one <code>yield</code> statement.</li> <li>A generator function returns a generator object.</li> <li>A generator object is an iterator. Therefore, it becomes exhausted once there's no remaining item to return.</li> <li>Use a Python generator expression to return a generator.</li> </ul>"},{"location":"course/advance-python/S12-Summary/","title":"Context Manager","text":""},{"location":"course/advance-python/S12-Summary/#python-with-statement","title":"Python <code>with</code> statement","text":"<p>Here is the typical syntax of the <code>with</code> statement:</p> <pre><code>with context as ctx:\n    # use the the object\n\n# context is cleaned up\n</code></pre> <p>How it works:</p> <ul> <li>When Python encouters the <code>with</code> st atement, it creates a new context. The context can optionally return an <code>object</code>.</li> <li>After the <code>with</code> block, Python cleans up the context automatically</li> <li>The scope of the <code>ctx</code> has the same scope as the <code>with</code> statement. It means that you can access the <code>ctx</code> both inside and after the <code>with</code> statement.</li> </ul>"},{"location":"course/advance-python/S12-Summary/#python-context-manager-protocol","title":"Python context manager protocol","text":"<p>Python context managers work based on the context manager prototol.</p> <p>The context manager protocol has the following methods:</p> <ul> <li><code>__enter__()</code> - setup the context and optionally returns some object</li> <li><code>__exit__()</code> - cleanup the object</li> </ul> <p>Example</p> <pre><code>class File:\n    def __init__(self, filename, mode):\n        self.filename = filename\n        self.mode = mode\n\n    def __enter__(self):\n        print(f'Opening the file {self.filename}.')\n        self.__file = open(self.filename, self.mode)\n        return self.__file\n\n    def __exit__(self, exc_type, exc_value, exc_traceback):\n        print(f'Closing the file {self.filename}.')\n        if not self.__file.closed:\n            self.__file.close()\n\n        return False\n\nwith File('data.txt', 'r') as f:  #(1)\n    print(int(next(f)))\n</code></pre> <ol> <li> <p>The <code>f</code> references the object returned by the <code>__enter__()</code> method. It doesn't reference the instance of the <code>File</code> class.</p> </li> </ol> <p>Summary</p> <ul> <li>Use Python context manager to define runtime contexts when executing in the <code>with</code> statement.</li> <li>Implement the <code>__enter__()</code> and <code>__exit__()</code> methods to support the context manager protocol.</li> </ul>"},{"location":"course/ml-algorithms/","title":"Machine Learning Algorithms","text":"<ul> <li>Decision Tree</li> <li>Naive Bayes Classifier</li> </ul>"},{"location":"course/ml-algorithms/all/","title":"T\u1ed5ng h\u1ee3p Machine Learning Algorithms","text":""},{"location":"course/ml-algorithms/all/#linear-regression","title":"Linear Regression","text":"\\[ \\begin{array}{l} \\mathbf{x} \\in \\mathbb{R}^m, \\quad y \\in \\mathbb{R} \\\\ \\hat{y} = \\bar{\\mathbf{x}}^\\intercal \\mathbf{w}, \\quad \\mathbf{w} \\in \\mathbb{R}^{m + 1} \\end{array} \\] <p>Loss function:</p> \\[ \\begin{array}{l} J(\\mathbf{w})   &amp;=&amp; \\dfrac{1}{2N} \\displaystyle \\sum_{i=1}^N \\left( y_i - \\hat{y}_i \\right)^2 \\\\                 &amp;=&amp; \\dfrac{1}{2N} \\left[ \\left(y_1 -  \\bar{\\mathbf{x}}_1^\\intercal \\mathbf{w} \\right)^2 + \\dots + \\left(y_N - \\bar{\\mathbf{x}}_N^\\intercal \\mathbf{w} \\right)^2 \\right] \\\\                 &amp;=&amp; \\dfrac{1}{2N} \\displaystyle \\lVert \\bar{\\mathbf{X}}^\\intercal \\mathbf{w} - \\mathbf{y} \\rVert_2^2 \\end{array} \\] <p>\u0110\u1ea1o h\u00e0m:</p> \\[ \\dfrac{\\partial J}{\\partial \\mathbf{w}} = \\dfrac{1}{N} \\bar{\\mathbf{X}} \\left( \\bar{\\mathbf{X}}^\\intercal \\mathbf{w} - \\mathbf{y} \\right) \\] <p>Code</p> <pre><code>class LinearRegression:\n    def __init__(self, init_w: np.ndarray, lr: float, n_iters: int) -&gt; None:\n        self.w = init_w\n        self.lr = lr\n        self.n_iters = n_iters\n\n    def loss(self, X: np.ndarray, y: np.ndarray):\n        y_hat = X.T.dot(self.w)\n        return (np.linalg.norm(y - y_hat, 2) ** 2) / (2 * N)\n\n    def fit(self, X: np.ndarray, y: np.ndarray):\n        y = np.expand_dims(y, axis=1)\n\n        for i in range(self.n_iters):\n            grad_w = 1 / N * (X.dot(X.T.dot(self.w) - y))\n            self.w -= self.lr * grad_w\n\n    def predict(self, x: np.ndarray):\n        return x.transpose().dot(self.w)\n</code></pre>"},{"location":"course/ml-algorithms/all/#logistic-regression","title":"Logistic Regression","text":"\\[ \\begin{array}{l} \\mathbf{x} \\in \\mathbb{R}^m, \\quad y \\in \\left\\{ 0, 1 \\right\\} \\\\ \\hat{y} = \\sigma(\\bar{\\mathbf{x}}^\\intercal \\mathbf{w}), \\quad \\mathbf{w} \\in \\mathbb{R}^{m + 1} \\\\ \\sigma(z) = \\dfrac{1}{1 + e^{-z}} \\end{array} \\] <p>Gradient descent:</p> \\[ \\mathbf{w} = \\mathbf{w} - \\eta \\mathbf{X} \\left( \\hat{\\mathbf{y}} - \\mathbf{y} \\right) \\] <p>Code</p> <pre><code>class LogisticRegression:\n    def __init__(self, pretrained: np.ndarray, lr: float, n_iter: int) -&gt; None:\n        self.w = pretrained\n        self.lr = lr\n        self.n_iter = n_iter\n\n    def fit(self, X, y):\n        for _ in range(self.n_iter):\n            y_hat = sigmoid(X.T @ self.w)\n            J = X @ (y_hat - y)\n            J /= X.shape[1]\n            self.w -= self.lr * J\n\n    def predict_proba(self, X):\n        return sigmoid(X.T @ self.w)\n\n    def predict(self, X):\n        return self.predict_proba(X) &gt;= 0.5\n</code></pre>"},{"location":"course/ml-algorithms/all/#svm","title":"SVM","text":"\\[ \\begin{array}{l} \\mathbf{x} \\in \\mathbb{R}^m, \\quad y \\in \\left\\{ -1, 1 \\right\\} \\\\ \\hat{y} = \\mathbf{w}^\\intercal\\mathbf{x} + b, \\quad \\mathbf{w} \\in \\mathbb{R}^m, \\quad b \\in \\mathbb{R} \\end{array} \\] <p>Loss function:</p> \\[ J(\\mathbf{\\bar{w}}) = \\underbrace{\\sum_{i=1}^N \\max(0, 1 - y_i\\bar{\\mathbf{w}}^T\\bar{\\mathbf{x}}_i)}_{\\text{hinge loss}} + \\underbrace{\\frac{\\lambda}{2} \\lVert \\mathbf{w} \\rVert_2^2}_{\\text{regularization}} \\] <p>Gradient descent:</p> \\[ \\bar{\\mathbf{w}} = \\bar{\\mathbf{w}} - \\eta \\left(\\sum_{i \\in \\mathcal{H}} - y_i\\bar{\\mathbf{x}}_n + \\lambda \\left[\\begin{matrix} \\mathbf{w}\\newline 0 \\end{matrix}\\right]\\right), \\quad \\mathcal{H} = \\left\\{ i: y_i\\bar{\\mathbf{w}}^T\\bar{\\mathbf{x}}_i &lt; 1 \\right\\} \\] <p>Code</p> <pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import make_circles, make_classification\nfrom sklearn import preprocessing\n\nnp.random.seed(42)\n\nmeans = [[2, 2], [2.75, 1.25]]\ncov = [[.3, .15], [.15, .3]]\nN = 50\nX0 = np.random.multivariate_normal(means[0], cov, N)\nX1 = np.random.multivariate_normal(means[1], cov, N)\n\nX = np.concatenate((X0.T, X1.T), axis = 1)\ny = np.concatenate((np.ones((1, N)), -1*np.ones((1, N))), axis = 1)\n\n\nclass SVM:\n    def __init__(self, w: np.ndarray, lr: float, regularization: float) -&gt; None:\n        self.w = w\n        self.lr = lr\n        self.lamb = regularization\n\n    def y_hat(self, X: np.ndarray, y: np.ndarray):\n        return self.w.T @ X\n\n    def loss(self, X: np.ndarray, y: np.ndarray):\n        z = self.y_hat(X, y)  # Shape (1, N)\n        return (np.sum(np.maximum(0, 1 - y * z)) + self.lamb * 0.5 * np.linalg.norm(self.w, 2) ** 2) / X.shape[1]\n\n    def grad(self, X: np.ndarray, y: np.ndarray):\n        z = self.y_hat(X, y)  # Shape (1, N)\n        yz = y * z  # Shape (1, N)\n        active_set = np.where(yz &lt; 1)[1]\n\n        yX = -y * X  # Shape (m, N)\n\n        w_0 = self.w.copy()\n        w_0[-1] = 0\n\n        grad_w = (np.sum(yX[:, active_set], axis=1, keepdims=True) + self.lamb * w_0) / X.shape[1]  # Shape (m, 1)\n\n        return grad_w\n\n    def fit(self, X: np.ndarray, y: np.ndarray, n_iter: int = 1e6):\n        it = 0\n        best_loss = 1e9\n        best_iter = -1\n        while it &lt; n_iter:\n            it += 1\n            gw = self.grad(X, y)\n            self.w -= self.lr * gw\n\n            loss = self.loss(X, y)\n            if loss &lt; best_loss:\n                best_loss = loss\n                best_iter = it\n            elif it - best_iter &gt; 100:\n                print(\"No improve in the last 20 iter\")\n                break\n\n            if (it % 100) == 0:\n                print(f\"iter {it}; loss: {loss}\")\n</code></pre>"},{"location":"course/ml-algorithms/all/#k-nn","title":"K-NN","text":"<p>Code</p> <pre><code>class KNN:\n    def __init__(self, k: int) -&gt; None:\n        print(\"k = \", k)\n        self.k = k\n        self.X = None\n        self.y = None\n\n    def fit(self, X, y):\n        self.X = X\n        self.y = y\n\n    def predict(self, z: np.ndarray):\n        indices = list(range(X.shape[1]))\n        indices = sorted(\n            indices,\n            key=lambda i: np.linalg.norm(self.X[:, i].reshape(2, 1), 2) ** 2 - 2 * z.transpose().dot(self.X[:, i].reshape(2, 1))\n        )\n        knn_indices = indices[: self.k]\n        knn_labels = [self.y[i] for i in knn_indices]\n        return knn_indices, Counter(knn_labels).most_common(1)[0][0]\n</code></pre>"},{"location":"course/ml-algorithms/all/#k-means","title":"K-means","text":"<p>Code</p> <pre><code>class KMeansCluster:\n    def __init__(self, n_cluster: int):\n        self.n_cluster = n_cluster\n\n        self.centroids = []\n        self.cluster_of_item = []\n\n    def fit(self, X):\n        self.centroids = random.choices(X, k=self.n_cluster)\n        self.cluster_of_item = [-1] * len(X)\n\n        while True:\n            stop = True\n\n            for ix, x in enumerate(X):\n                closet_center_idx = min(list(range(len(self.centroids))), key=lambda i: np.linalg.norm(x - self.centroids[i], 2))\n                if self.cluster_of_item[ix] != closet_center_idx:\n                    stop = False\n\n                self.cluster_of_item[ix] = closet_center_idx\n\n            for ic, _ in enumerate(self.centroids):\n                x_in_cluster = [X[i] for i in range(len(X)) if self.cluster_of_item[i] == ic]\n                new_center = np.array(x_in_cluster).mean(axis=0)\n                self.centroids[ic] = new_center\n\n            if stop:\n                break\n</code></pre>"},{"location":"course/ml-algorithms/all/#navie-bayes-classifier","title":"Navie Bayes Classifier","text":"<p>Navie Bayes Classifier</p>"},{"location":"course/ml-algorithms/all/#decision-tree","title":"Decision Tree","text":"<p>Decision Tree</p>"},{"location":"course/ml-algorithms/all/#random-forest","title":"Random Forest","text":"<pre><code>class RandomForest:\n    def __init__(self, num_trees: int) -&gt; None:\n        self.num_trees = num_trees\n        self.trees = []\n\n    def bootstrap_sample(self, data):\n        n_samples = data.shape[0]\n        indices = np.random.choice(n_samples, size=n_samples, replace=True)\n        bootstrap_sample = data.iloc[indices].reset_index(drop=True)\n        return bootstrap_sample\n\n    def fit(self, data, target_column):\n        for _ in range(self.num_trees):\n            tree = DecisionTree()\n            sample_data = self.bootstrap_sample(data)\n            tree.fit(sample_data, target_column=target_column)\n            self.trees.append(tree)\n\n    def predict(self, new_data):\n        predictions = [tree.predict(new_data) for tree in self.trees]\n        labels = [list(pred) for pred in zip(*predictions)]\n        return [Counter(lb).most_common(1)[0][0] for lb in labels]\n</code></pre>"},{"location":"course/ml-algorithms/decision-tree/","title":"Decision Tree","text":"<p>B\u00e0i n\u00e0y s\u1ebd n\u00f3i v\u1ec1 thu\u1eadt to\u00e1n Decision Tree v\u00e0 th\u1ef1c h\u00e0nh n\u00f3 tr\u00ean Python.</p> <p>\u0110\u1ecdc b\u00e0i g\u1ed1c \u1edf b\u00e0i vi\u1ebft tr\u00ean forum Machine Learning c\u01a1 b\u1ea3n.</p>"},{"location":"course/ml-algorithms/decision-tree/#bai-toan","title":"B\u00e0i to\u00e1n","text":"<p>T\u1eeb m\u1ed9t b\u1ea3ng d\u1eef li\u1ec7u, ta s\u1ebd x\u00e2y d\u1ef1ng m\u1ed9t Decision Tree \u0111\u1ec3 d\u1ef1 \u0111o\u00e1n nh\u00e3n c\u1ee7a m\u1ed9t \u0111i\u1ec3m d\u1eef li\u1ec7u m\u1edbi khi bi\u1ebft c\u00e1c thu\u1ed9c t\u00ednh c\u1ee7a \u0111i\u1ec3m d\u1eef li\u1ec7u \u0111\u00f3.</p> Th\u1ef1c h\u00e0nh <p>Cho m\u1ed9t b\u1ea3ng d\u1eef li\u1ec7u ghi ch\u00e9p l\u1ea1i d\u1eef li\u1ec7u th\u1eddi ti\u1ebft c\u1ee7a 14 ng\u00e0y, c\u00f9ng v\u1edbi \u0111\u00f3 l\u00e0 vi\u1ec7c m\u1ed9t \u0111\u1ed9i b\u00f3ng c\u00f3 quy\u1ebft \u0111\u1ecbnh \u0111i ch\u01a1i b\u00f3ng hay kh\u00f4ng:</p> B\u1ea3ng d\u1eef li\u1ec7u <code>weather.csv</code> id outlook temperature humidity wind play 1 sunny hot high weak no 2 sunny hot high strong no 3 overcast hot high weak yes 4 rainy mild high weak yes 5 rainy cool normal weak yes 6 rainy cool normal strong no 7 overcast cool normal strong yes 8 sunny mild high weak no 9 sunny cool normal weak yes 10 rainy mild normal weak yes 11 sunny mild normal strong yes 12 overcast mild high strong yes 13 overcast hot normal weak yes 14 rainy mild high strong no <p>T\u1eeb b\u1ea3ng d\u1eef li\u1ec7u n\u00e0y, ta s\u1ebd x\u00e2y d\u1ef1ng m\u1ed9t m\u00f4 h\u00ecnh Decision Tree \u0111\u1ec3 d\u1ef1 \u0111o\u00e1n \u0111\u1ed9i b\u00f3ng n\u00e0y c\u00f3 \u0111i ch\u01a1i b\u00f3ng hay kh\u00f4ng n\u1ebfu bi\u1ebft d\u1eef li\u1ec7u th\u1eddi ti\u1ebft c\u1ee7a ng\u00e0y h\u00f4m \u0111\u00f3. N\u00f3i c\u00e1ch kh\u00e1c, ta c\u1ea7n d\u1ef1 \u0111o\u00e1n gi\u00e1 tr\u1ecb c\u1ee7a play khi bi\u1ebft gi\u00e1 tr\u1ecb c\u1ee7a 4 thu\u1ed9c t\u00ednh l\u00e0 outlook, temperature, humidity, wind.</p>"},{"location":"course/ml-algorithms/decision-tree/#xay-dung-decision-tree","title":"X\u00e2y d\u1ef1ng Decision Tree","text":"<p>\u0110\u1ea7u ti\u00ean, v\u1edbi b\u1ea3ng d\u1eef li\u1ec7u ban \u0111\u1ea7u, ta c\u1ea7n t\u00ecm m\u1ed9t thu\u1ed9c t\u00ednh \u0111\u1ec3 chia d\u1eef li\u1ec7u th\u00e0nh c\u00e1c nh\u00f3m kh\u00e1c nhau, m\u1ed7i nh\u00f3m t\u01b0\u01a1ng \u1ee9ng v\u1edbi m\u1ed9t gi\u00e1 tr\u1ecb c\u1ee7a thu\u1ed9c t\u00ednh \u0111\u00f3.</p> Th\u1ef1c h\u00e0nh <p>\u0110\u1ed1i v\u1edbi b\u00e0i to\u00e1n c\u1ee5 th\u1ec3 n\u00f3i tr\u00ean, ta c\u1ea7n t\u00ecm m\u1ed9t trong s\u1ed1 4 thu\u1ed9c t\u00ednh l\u00e0 outlook, temperature, humidity, wind \u0111\u1ec3 chia d\u1eef li\u1ec7u th\u00e0nh c\u00e1c nh\u00f3m kh\u00e1c nhau, m\u1ed7i nh\u00f3m t\u01b0\u01a1ng \u1ee9ng v\u1edbi m\u1ed9t gi\u00e1 tr\u1ecb c\u1ee7a thu\u1ed9c t\u00ednh \u0111\u00f3.</p> <p>V\u1eady trong c\u00e1c thu\u1ed9c t\u00ednh c\u1ee7a m\u1ed9t b\u1ea3ng d\u1eef li\u1ec7u, l\u00e0m sao \u0111\u1ec3 bi\u1ebft ta n\u00ean chia theo thu\u1ed9c t\u00ednh n\u00e0o?</p> <p>C\u00e2u tr\u1ea3 l\u1eddi l\u00e0 ta s\u1ebd \u0111i t\u00ednh information gain c\u1ee7a t\u1eebng thu\u1ed9c t\u00ednh, sau \u0111\u00f3 ch\u1ecdn ra thu\u1ed9c t\u00ednh c\u00f3 information gain l\u1edbn nh\u1ea5t r\u1ed3i chia theo thu\u1ed9c t\u00ednh \u0111\u00f3.</p> <p>C\u00f4ng th\u1ee9c t\u00ednh information gain c\u1ee7a m\u1ed9t thu\u1ed9c t\u00ednh \\(x\\) trong b\u1ea3ng d\u1eef li\u1ec7u \\(\\mathcal{S}\\) nh\u01b0 sau:</p> \\[ \\tag{1} G(x, \\mathcal{S}) = H(\\mathcal{S}) - H(x, \\mathcal{S}) \\] <p>trong \u0111\u00f3:</p> <ul> <li>\\(H(\\mathcal{S})\\) l\u00e0 entropy c\u1ee7a b\u1ea3ng d\u1eef li\u1ec7u \\(\\mathcal{S}\\)</li> <li>\\(H(x, \\mathcal{S})\\) l\u00e0 weighted entropy c\u1ee7a b\u1ea3ng d\u1eef li\u1ec7u \\(\\mathcal{S}\\) sau khi \u0111\u01b0\u1ee3c chia theo thu\u1ed9c t\u00ednh \\(x\\)</li> </ul> <p>V\u1eady th\u00ec 2 c\u00e1i n\u00e0y \u0111\u01b0\u1ee3c t\u00ednh nh\u01b0 th\u1ebf n\u00e0o?</p>"},{"location":"course/ml-algorithms/decision-tree/#entropy","title":"Entropy","text":"<p>Cho b\u1ea3ng d\u1eef li\u1ec7u \\(\\mathcal{S}\\), entropy c\u1ee7a n\u00f3 \u0111\u01b0\u1ee3c t\u00ednh nh\u01b0 sau:</p> \\[ \\tag{2} H(\\mathcal{S}) = - \\sum_{c \\in \\mathbf{C}} \\dfrac{N_c}{N} \\log_2 \\left( \\dfrac{N_c}{N} \\right) \\] <p>trong \u0111\u00f3:</p> <ul> <li>\\(\\mathbf{C}\\) l\u00e0 t\u1eadp c\u00e1c class c\u1ee7a b\u00e0i to\u00e1n</li> <li>\\(N_c\\) l\u00e0 s\u1ed1 \u0111i\u1ec3m d\u1eef li\u1ec7u thu\u1ed9c class \\(c\\) trong b\u1ea3ng d\u1eef li\u1ec7u \\(\\mathcal{S}\\)</li> <li>\\(N\\) l\u00e0 t\u1ed5ng s\u1ed1 \u0111i\u1ec3m d\u1eef li\u1ec7u trong b\u1ea3ng d\u1eef li\u1ec7u \\(\\mathcal{S}\\)</li> </ul> <p>L\u01b0u \u00fd</p> <ul> <li>Ph\u00e9p \\(\\log\\) l\u00e0 l\u1ea5y theo c\u01a1 s\u1ed1 \\(2\\).</li> <li>Quy \u01b0\u1edbc: \\(0 \\log 0 = 0\\)</li> </ul> Th\u1ef1c h\u00e0nh <p>V\u1edbi b\u1ea3ng d\u1eef li\u1ec7u \u0111\u00e3 cho, ta c\u00f3:</p> <ul> <li>\\(\\mathbf{C} = \\left\\{ \\texttt{yes}, \\texttt{no} \\right\\}\\)</li> <li>\\(N = 14\\)</li> <li>\\(N_{\\texttt{yes}} = 9\\); \\(N_{\\texttt{no}} = 5\\)</li> </ul> <p>Do \u0111\u00f3, ta t\u00ednh \u0111\u01b0\u1ee3c \\(H(\\mathcal{S})\\):</p> \\[ H(\\mathcal{S}) = - \\frac{5}{14}\\log\\left(\\frac{5}{14}\\right) - \\frac{9}{14}\\log\\left(\\frac{9}{14}\\right) \\approx 0.9403 \\]"},{"location":"course/ml-algorithms/decision-tree/#weighted-entropy","title":"Weighted Entropy","text":"<p>Cho b\u1ea3ng d\u1eef li\u1ec7u \\(\\mathcal{S}\\) v\u00e0 m\u1ed9t thu\u1ed9c t\u00ednh \\(x\\), weighted entropy c\u1ee7a \\(\\mathcal{S}\\) khi chia theo thu\u1ed9c t\u00ednh \\(x\\) nh\u01b0 sau:</p> \\[ \\tag{3} H(x, \\mathcal{S}) = \\sum_{k \\in K} \\frac{m_k}{N} H(\\mathcal{S}_k) \\] <p>trong \u0111\u00f3:</p> <ul> <li>\\(K\\) l\u00e0 t\u1eadp c\u00e1c gi\u00e1 tr\u1ecb c\u1ee7a thu\u1ed9c t\u00ednh \\(x\\)</li> <li>\\(N\\) l\u00e0 t\u1ed5ng s\u1ed1 \u0111i\u1ec3m d\u1eef li\u1ec7u trong b\u1ea3ng d\u1eef li\u1ec7u \\(\\mathcal{S}\\)</li> <li>\\(\\mathcal{S}_k\\) l\u00e0 b\u1ea3ng d\u1eef li\u1ec7u m\u1edbi thu \u0111\u01b0\u1ee3c khi ch\u1ec9 l\u1ea5y c\u00e1c \u0111i\u1ec3m d\u1eef li\u1ec7u c\u00f3 \\(x = k\\)</li> <li>\\(m_k\\) l\u00e0 t\u1ed5ng s\u1ed1 \u0111i\u1ec3m d\u1eef li\u1ec7u c\u00f3 \\(x = k\\). N\u00f3i c\u00e1ch kh\u00e1c, \\(m_k\\) l\u00e0 t\u1ed5ng s\u1ed1 \u0111i\u1ec3m d\u1eef li\u1ec7u c\u1ee7a \\(\\mathcal{S}_k\\)</li> </ul> Th\u1ef1c h\u00e0nh <p>V\u1edbi b\u1ea3ng d\u1eef li\u1ec7u ban \u0111\u1ea7u, x\u00e9t thu\u1ed9c t\u00ednh outlook, c\u00f3 3 gi\u00e1 tr\u1ecb l\u00e0 sunny, overcast, rainy. T\u01b0\u01a1ng \u1ee9ng ta c\u00f3 3 b\u1ea3ng d\u1eef li\u1ec7u m\u1edbi l\u00e0 \\(\\mathcal{S}_s\\), \\(\\mathcal{S}_o\\), \\(\\mathcal{S}_r\\):</p> \\(\\mathcal{S}_s\\)\\(\\mathcal{S}_o\\)\\(\\mathcal{S}_r\\) id outlook temperature humidity wind play 1 sunny hot high weak no 2 sunny hot high strong no 8 sunny mild high weak no 9 sunny cool normal weak yes 11 sunny mild normal strong yes id outlook temperature humidity wind play 3 overcast hot high weak yes 7 overcast cool normal strong yes 12 overcast mild high strong yes 13 overcast hot normal weak yes id outlook temperature humidity wind play 4 rainy mild high weak yes 5 rainy cool normal weak yes 6 rainy cool normal strong no 10 rainy mild normal weak yes 14 rainy mild high strong no <p>S\u1ed1 \u0111i\u1ec3m d\u1eef li\u1ec7u c\u1ee7a 3 b\u1ea3ng d\u1eef li\u1ec7u n\u00e0y l\u1ea7n l\u01b0\u1ee3t l\u00e0: \\(m_s = 5\\), \\(m_o = 4\\), \\(m_r = 5\\).</p> <p>Ta t\u00ednh \u0111\u01b0\u1ee3c entropy c\u1ee7a 3 b\u1ea3ng d\u1eef li\u1ec7u n\u00e0y nh\u01b0 sau:</p> \\[ \\begin{eqnarray}     H(\\mathcal{S}_s) &amp;=&amp;-\\frac{3}{5}\\log\\left(\\frac{3}{5}\\right) - \\frac{2}{5}\\log\\left(\\frac{2}{5}\\right) \\approx 0.9710 \\\\     H(\\mathcal{S}_o) &amp;=&amp;-\\frac{0}{4}\\log\\left(\\frac{0}{4}\\right) - \\frac{4}{4}\\log\\left(\\frac{4}{4}\\right) = 0\\\\     H(\\mathcal{S}_r) &amp;=&amp; -\\frac{2}{5}\\log\\left(\\frac{2}{5}\\right) - \\frac{3}{5}\\log\\left(\\frac{3}{5}\\right) \\approx 0.9710 \\end{eqnarray} \\] <p>T\u1eeb \u0111\u00f3 ta t\u00ednh \u0111\u01b0\u1ee3c weighted entropy c\u1ee7a \\(\\mathcal{S}\\) khi chia theo thu\u1ed9c t\u00ednh outlook nh\u01b0 sau:</p> \\[     H({outlook}, \\mathcal{S}) = \\frac{5}{14}H(\\mathcal{S}_s) + \\frac{4}{14}H(\\mathcal{S}_o) + \\frac{5}{14}H(\\mathcal{S}_r) \\approx 0.6935 \\] <p>T\u01b0\u01a1ng t\u1ef1, ta c\u00f3 th\u1ec3 t\u00ednh \u0111\u01b0\u1ee3c weighted entropy cho c\u00e1c thu\u1ed9c t\u00ednh c\u00f2n l\u1ea1i:</p> \\[ H({temperature, \\mathcal{S}}) \\approx 0.9111, \\quad H(humidity, \\mathcal{S}) \\approx 0.7885, \\quad H(wind, \\mathcal{S}) \\approx 0.8922 \\]"},{"location":"course/ml-algorithms/decision-tree/#information-gain","title":"Information Gain","text":"<p>Sau khi t\u00ednh \u0111\u01b0\u1ee3c entropy c\u1ee7a b\u1ea3ng d\u1eef li\u1ec7u v\u00e0 weighted entropy c\u1ee7a t\u1eebng thu\u1ed9c t\u00ednh, ta t\u00ednh information gain c\u1ee7a t\u1eebng thu\u1ed9c t\u00ednh theo c\u00f4ng th\u1ee9c \\((1)\\). Ch\u1ecdn ra thu\u1ed9c t\u00ednh c\u00f3 information gain l\u1edbn nh\u1ea5t v\u00e0 chia b\u1ea3ng d\u1eef li\u1ec7u theo thu\u1ed9c t\u00ednh \u0111\u00f3 \u0111\u1ec3 \u0111\u01b0\u1ee3c c\u00e1c b\u1ea3ng d\u1eef li\u1ec7u m\u1edbi nh\u1ecf h\u01a1n.</p> <p>D\u1ec5 th\u1ea5y thu\u1ed9c t\u00ednh c\u00f3 information gain l\u1edbn nh\u1ea5t th\u00ec ch\u00ednh l\u00e0 thu\u1ed9c t\u00ednh c\u00f3 weighted entropy nh\u1ecf nh\u1ea5t.</p> <p>\u1ede \u0111\u00e2y b\u1ea3ng d\u1eef li\u1ec7u ban \u0111\u1ea7u t\u01b0\u01a1ng \u1ee9ng v\u1edbi m\u1ed9t node c\u1ee7a Decision Tree, c\u00e1c b\u1ea3ng d\u1eef li\u1ec7u con t\u01b0\u01a1ng \u1ee9ng v\u1edbi c\u00e1c node con c\u1ee7a node \u0111\u00f3.</p> <p>V\u1edbi m\u1ed7i b\u1ea3ng d\u1eef li\u1ec7u t\u01b0\u01a1ng \u1ee9ng v\u1edbi c\u00e1c node con, ta ti\u1ebfp t\u1ee5c khi n\u00f3 th\u00e0nh c\u00e1c d\u1eef li\u1ec7u nh\u1ecf h\u01a1n cho \u0111\u1ebfn khi b\u1ea3ng d\u1eef li\u1ec7u thu \u0111\u01b0\u1ee3c ch\u1ec9 c\u00f3 \u0111\u00fang 1 class (node l\u00e1), hay b\u1ea3ng d\u1eef li\u1ec7u thu \u0111\u01b0\u1ee3c c\u00f3 entropy b\u1eb1ng \\(0\\)</p> Th\u1ef1c h\u00e0nh <p>V\u1edbi b\u1ea3ng d\u1eef li\u1ec7u ban \u0111\u1ea7u, ta th\u1ea5y outlook l\u00e0 thu\u1ed9c t\u00ednh c\u00f3 weighted entropy nh\u1ecf nh\u1ea5t, nh\u01b0 v\u1eady ta s\u1ebd ch\u1ecdn thu\u1ed9c t\u00ednh n\u00e0y \u0111\u1ea7u ti\u00ean cho Decision Tree.</p> <p>B\u1eaft \u0111\u1ea7u v\u1edbi b\u1ea3ng d\u1eef li\u1ec7u ban \u0111\u1ea7u t\u01b0\u01a1ng \u1ee9ng v\u1edbi root node, ta \u0111\u01b0\u1ee3c 3 b\u1ea3ng d\u1eef li\u1ec7u con t\u01b0\u01a1ng \u1ee9ng v\u1edbi 3 node con.</p> <p>Ti\u1ebfp t\u1ee5c th\u1ef1c hi\u1ec7n c\u00e1c b\u01b0\u1edbc tr\u00ean \u1edf c\u00e1c b\u1ea3ng d\u1eef li\u1ec7u con cho \u0111\u1ebfn khi thu \u0111\u01b0\u1ee3c b\u1ea3ng d\u1eef li\u1ec7u c\u00f3 entropy b\u1eb1ng 0, ta \u0111\u01b0\u1ee3c h\u00ecnh d\u1ea1ng c\u1ee7a Decision Tree cho b\u00e0i to\u00e1n n\u00e0y nh\u01b0 sau<sup>1</sup>:</p> <p> </p>"},{"location":"course/ml-algorithms/decision-tree/#ieu-kien-dung","title":"\u0110i\u1ec1u ki\u1ec7n d\u1eebng","text":"<p>Trong thu\u1eadt to\u00e1n tr\u00ean, ta li\u00ean t\u1ee5c chia c\u00e1c node cho \u0111\u1ebfn khi \u0111\u01b0\u1ee3c node l\u00e1. K\u1ebft qu\u1ea3 cu\u1ed1i c\u00f9ng s\u1ebd thu \u0111\u01b0\u1ee3c m\u1ed9t tree m\u00e0 m\u1ecdi \u0111i\u1ec3m trong t\u1eadp train \u0111\u1ec1u \u0111\u01b0\u1ee3c d\u1ef1 \u0111o\u00e1n \u0111\u00fang. L\u00fac n\u00e0y tree s\u1ebd r\u1ea5t ph\u1ee9c t\u1ea1p, nhi\u1ec1u node l\u00e1 ch\u1ec9 c\u00f3 m\u1ed9t v\u00e0i \u0111i\u1ec3m d\u1eef li\u1ec7u. Nh\u01b0 v\u1eady, t\u00ecnh tr\u1ea1ng overfitting r\u1ea5t d\u1ec5 x\u1ea3y ra.</p> <p>\u0110\u1ec3 tr\u00e1nh t\u00ecnh tr\u1ea1ng tr\u00ean, c\u00f3 m\u1ed9t s\u1ed1 ph\u01b0\u01a1ng ph\u00e1p \u0111\u1ec3 ki\u1ec3m tra \u0111i\u1ec1u ki\u1ec7n d\u1eebng. N\u1ebfu m\u1ed9t trong s\u1ed1 c\u00e1c \u0111i\u1ec1u ki\u1ec7n n\u00e0y x\u1ea3y ra, ta s\u1ebd kh\u00f4ng ti\u1ebfp t\u1ee5c ph\u00e2n chia node \u0111\u00f3 v\u00e0 coi n\u00f3 l\u00e0 m\u1ed9t node l\u00e1:</p> <ul> <li>N\u1ebfu node \u0111\u00f3 c\u00f3 entropy b\u1eb1ng 0, t\u1ee9c m\u1ecdi \u0111i\u1ec3m trong node \u0111\u1ec1u thu\u1ed9c m\u1ed9t class</li> <li>N\u1ebfu node \u0111\u00f3 c\u00f3 s\u1ed1 ph\u1ea7n t\u1eed nh\u1ecf h\u01a1n m\u1ed9t ng\u01b0\u1ee1ng n\u00e0o \u0111\u00f3</li> <li>N\u1ebfu kho\u1ea3ng c\u00e1ch t\u1eeb node \u0111\u00f3 \u0111\u1ebfn root node \u0111\u1ea1t t\u1edbi m\u1ed9t gi\u00e1 tr\u1ecb n\u00e0o \u0111\u00f3</li> <li>N\u1ebfu t\u1ed5ng s\u1ed1 node l\u00e1 v\u01b0\u1ee3t qua m\u1ed9t ng\u01b0\u1ee1ng n\u00e0o \u0111\u00f3</li> <li>N\u1ebfu vi\u1ec7c ph\u00e2n chia node \u0111\u00f3 kh\u00f4ng l\u00e0m gi\u1ea3m entropy qu\u00e1 nhi\u1ec1u (information gain nh\u1ecf h\u01a1n m\u1ed9t ng\u01b0\u1ee1ng n\u00e0o \u0111\u00f3)</li> </ul> <p>Khi s\u1eed d\u1ee5ng c\u00e1c ph\u01b0\u01a1ng ph\u00e1p tr\u00ean, ta ch\u1ea5p nh\u1eadn vi\u1ec7c c\u00f3 m\u1ed9t s\u1ed1 \u0111i\u1ec3m trong t\u1eadp train b\u1ecb ph\u00e2n l\u1edbp sai \u0111\u1ec3 tr\u00e1nh overfitting.</p> <p>Ngo\u00e0i c\u00e1c ph\u01b0\u01a1ng ph\u00e1p tr\u00ean, m\u1ed9t ph\u01b0\u01a1ng ph\u00e1p ph\u1ed5 bi\u1ebfn kh\u00e1c \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng \u0111\u1ec3 tr\u00e1nh overfitting l\u00e0 pruning.</p>"},{"location":"course/ml-algorithms/decision-tree/#pruning","title":"Pruning","text":"<p>Note</p> <p>Ph\u1ea7n n\u00e0y ch\u1ec9 tr\u00ecnh b\u00e0y \u00fd t\u01b0\u1edfng c\u1ee7a ph\u01b0\u01a1ng ph\u00e1p pruning ch\u1ee9 kh\u00f4ng \u0111i v\u00e0o chi ti\u1ebft.</p> <p>\u00dd t\u01b0\u1edfng chung c\u1ee7a ph\u01b0\u01a1ng ph\u00e1p pruning l\u00e0 \u0111\u1ea7u ti\u00ean, x\u00e2y d\u1ef1ng m\u1ed9t decision tree trong \u0111\u00f3 m\u1ecdi \u0111i\u1ec3m trong t\u1eadp train \u0111\u1ec1u \u0111\u01b0\u1ee3c ph\u00e2n l\u1edbp \u0111\u00fang. Sau \u0111\u00f3, c\u00e1c node l\u00e1 c\u00f3 chung m\u1ed9t node cha s\u1ebd \u0111\u01b0\u1ee3c c\u1eaft t\u1ec9a v\u00e0 node cha \u0111\u00f3 s\u1ebd tr\u1edf th\u00e0nh m\u1ed9t node l\u00e1.</p> <p>M\u1ed9t s\u1ed1 c\u00e1ch \u0111\u1ec3 pruning nh\u01b0 sau:</p> <ol> <li> <p>Tr\u01b0\u1edbc ti\u00ean dataset \u0111\u01b0\u1ee3c chia th\u00e0nh m\u1ed9t t\u1eadp train v\u00e0 t\u1eadp validation. Decision tree \u0111\u01b0\u1ee3c x\u00e2y d\u1ef1ng tr\u00ean t\u1eadp train cho t\u1edbi khi m\u1ecdi \u0111i\u1ec3m trong t\u1eadp train \u0111\u1ec1u \u0111\u01b0\u1ee3c ph\u00e2n l\u1edbp \u0111\u00fang. Sau \u0111\u00f3 \u0111i ng\u01b0\u1ee3c t\u1eeb c\u00e1c node l\u00e1, c\u1eaft t\u1ec9a c\u00e1c node anh em c\u1ee7a n\u00f3 (c\u00e1c node c\u00f3 c\u00f9ng node cha) n\u1ebfu nh\u01b0 \u0111\u1ed9 ch\u00ednh x\u00e1c tr\u00ean t\u1eadp validation \u0111\u01b0\u1ee3c c\u1ea3i thi\u1ec7n. Khi n\u00e0o \u0111\u1ed9 ch\u00ednh x\u00e1c tr\u00ean t\u1eadp validation kh\u00f4ng c\u1ea3i thi\u1ec7n \u0111\u01b0\u1ee3c n\u1eefa th\u00ec d\u1eebng l\u1ea1i.</p> </li> <li> <p>S\u1eed d\u1ee5ng to\u00e0n b\u1ed9 t\u1eadp train \u0111\u1ec3 x\u00e2y d\u1ef1ng decision tree. Gi\u1ea3 s\u1eed decision tree cu\u1ed1i c\u00f9ng c\u00f3 \\(K\\) node l\u00e1, t\u1eadp h\u1ee3p c\u00e1c \u0111i\u1ec3m d\u1eef li\u1ec7u \u1edf m\u1ed7i node l\u00e1 l\u1ea7n l\u01b0\u1ee3t l\u00e0 \\(\\mathcal{S}_1, \\dots, \\mathcal{S}_K\\), ta \u0111\u1ecbnh ngh\u0129a h\u00e0m loss sau:</p> \\[     \\tag{4}     \\mathcal{L} = \\sum_{k = 1}^K \\frac{|\\mathcal{S}_k|}{|\\mathcal{S}|} H(\\mathcal{S}_k) + \\lambda K, \\quad \\lambda \\in \\mathbb{R}^+ \\] <p>\u0110\u00e2y ch\u00ednh l\u00e0 k\u1ef9 thu\u1eadt regularization. Gi\u00e1 tr\u1ecb c\u1ee7a h\u00e0m s\u1ed1 n\u00e0y nh\u1ecf n\u1ebfu c\u1ea3 data loss (s\u1ed1 h\u1ea1ng th\u1ee9 nh\u1ea5t) nh\u1ecf (entropy t\u1ea1i m\u1ed7i node l\u00e0 th\u1ea5p) v\u00e0 regularization (s\u1ed1 h\u1ea1ng th\u1ee9 hai) c\u0169ng nh\u1ecf (s\u1ed1 node l\u00e1 \u00edt). Tr\u01b0\u1edbc h\u1ebft, x\u00e2y d\u1ef1ng m\u1ed9t decision tree m\u00e0 m\u1ecdi \u0111i\u1ec3m trong t\u1eadp train \u0111\u1ec1u \u0111\u01b0\u1ee3c ph\u00e2n lo\u1ea1i \u0111\u00fang (to\u00e0n b\u1ed9 c\u00e1c entopy c\u1ee7a c\u00e1c node b\u1eb1ng 0). L\u00fac n\u00e0y data loss b\u1eb1ng \\(0\\) nh\u01b0ng regularization c\u00f3 th\u1ec3 l\u1edbn, khi\u1ebfn cho \\(\\mathcal{L}\\) l\u1edbn. Sau \u0111\u00f3, ta t\u1ec9a d\u1ea7n c\u00e1c node l\u00e1 sao cho \\(\\mathcal{L}\\) gi\u1ea3m. Vi\u1ec7c c\u1eaft t\u1ec9a \u0111\u01b0\u1ee3c l\u1eb7p l\u1ea1i \u0111\u1ebfn khi \\(\\mathcal{L}\\) kh\u00f4ng th\u1ec3 gi\u1ea3m \u0111\u01b0\u1ee3c n\u1eefa.</p> </li> </ol>"},{"location":"course/ml-algorithms/decision-tree/#code","title":"Code","text":"<p>Download d\u1eef li\u1ec7u <code>weather.csv</code> t\u1ea1i \u0111\u00e2y.</p> <p>\u0110\u1ea7u ti\u00ean ta import c\u00e1c th\u01b0 vi\u1ec7n c\u1ea7n thi\u1ebft:</p> <pre><code>import pandas as pd\nimport numpy as np\n</code></pre> <p>Load d\u1eef li\u1ec7u:</p> <pre><code>df = pd.read_csv(\"weather.csv\")\nprint(df)\n</code></pre> <pre><code>    id   outlook temperature humidity    wind play\n0    1     sunny         hot     high    weak   no\n1    2     sunny         hot     high  strong   no\n2    3  overcast         hot     high    weak  yes\n3    4     rainy        mild     high    weak  yes\n4    5     rainy        cool   normal    weak  yes\n5    6     rainy        cool   normal  strong   no\n6    7  overcast        cool   normal  strong  yes\n7    8     sunny        mild     high    weak   no\n8    9     sunny        cool   normal    weak  yes\n9   10     rainy        mild   normal    weak  yes\n10  11     sunny        mild   normal  strong  yes\n11  12  overcast        mild     high  strong  yes\n12  13  overcast         hot   normal    weak  yes\n13  14     rainy        mild     high  strong   no\n</code></pre> <p>Vi\u1ebft h\u00e0m t\u00ednh entropy c\u1ee7a m\u1ed9t b\u1ea3ng d\u1eef li\u1ec7u: (1)</p> <ol> <li>Nh\u1eafc l\u1ea1i: $$ \\tag{2}     H(\\mathcal{S}) = - \\sum_{c \\in \\mathbf{C}} \\dfrac{N_c}{N} \\log_2 \\left( \\dfrac{N_c}{N} \\right)     $$</li> </ol> <pre><code>def entropy(data: pd.DataFrame):\n    y = data.iloc[:, -1]  # Retrieve the labels\n    value_counts = y.value_counts()  # Calculate all N_c\n    probs = value_counts / len(y)  # Calculate all N_c / N\n    entropy = -np.sum(probs * np.log2(probs))  # Calculate the entropy\n    return entropy\n</code></pre> <p>Vi\u1ebft h\u00e0m t\u00ednh weighted entropy c\u1ee7a m\u1ed9t b\u1ea3ng d\u1eef li\u1ec7u v\u00e0 m\u1ed9t thu\u1ed9c t\u00ednh: (1)</p> <ol> <li>Nh\u1eafc l\u1ea1i: $$ \\tag{3}     H(x, \\mathcal{S}) = \\sum_{k \\in K} \\frac{m_k}{N} H(\\mathcal{S}_k)     $$</li> </ol> <pre><code>def weighted_entropy(data: pd.DataFrame, prop: str):\n    N = len(data)\n    weighted_entropy = 0\n\n    for value in data[prop].unique():\n        subset = data[data[prop] == value]  # Calculate m_k\n        value_entropy = entropy(subset)  # Calculate H(S_k)\n\n        weighted_entropy += value_entropy * len(subset) / N  # Add to the final result\n\n    return weighted_entropy\n</code></pre> <p>Ta c\u00f3 th\u1ec3 th\u1eed ch\u1ea1y h\u00e0m <code>weighted_entropy</code> tr\u00ean b\u1ea3ng d\u1eef li\u1ec7u ban \u0111\u1ea7u xem k\u1ebft qu\u1ea3 \u0111\u00e3 \u0111\u00fang ch\u01b0a:</p> <p><pre><code>for col in [\"outlook\", \"temperature\", \"humidity\", \"wind\"]:\n    print(col, weighted_entropy(df, col))\n</code></pre> <pre><code>outlook 0.6935361388961919\ntemperature 0.9110633930116763\nhumidity 0.7884504573082896\nwind 0.8921589282623617\n</code></pre> Ta th\u1ea5y n\u00f3 kh\u1edbp v\u1edbi k\u1ebft qu\u1ea3 ta \u0111\u00e3 t\u00ednh ph\u00eda tr\u00ean. Nh\u01b0 v\u1eady c\u00f3 v\u1ebb h\u00e0m <code>entropy</code> v\u00e0 <code>weighted_entropy</code> \u0111\u00e3 \u1ed5n.</p> <p>Gi\u1edd ta s\u1ebd tri\u1ec3n khai decision tree. \u0110\u1ea7u ti\u00ean, ta vi\u1ebft class <code>TreeNode</code> nh\u01b0 sau: <pre><code>class TreeNode:\n    def __init__(self, row_indices: List[int]) -&gt; None:\n        self.row_indices = row_indices  # Indices of data points of the node \n        self.split_column = None  # Property to split the data\n        self.children = {}  # A dictionary of &lt;column value&gt; : &lt;child node&gt;\n        self.label = None\n\n    def add(self, child_node, column_value):\n        self.children[column_value] = child_node\n\n    def __str__(self) -&gt; str:\n        return str(self.row_indices)\n</code></pre> V\u00e0 class <code>DecisionTree</code>: <pre><code>class DecisionTree:\n    def __init__(self) -&gt; None:\n        self.root = None  # to store the root TreeNode\n        self.leaves = []  # to store leaf nodes\n</code></pre></p> <p>V\u1edbi h\u00e0m training cho Decision Tree, ta s\u1eed d\u1ee5ng thu\u1eadt to\u00e1n BFS \u0111\u1ec3 duy\u1ec7t c\u00e2y (code h\u01a1i d\u00e0i nh\u01b0ng c\u00f3 coment \u0111\u1ea7y \u0111\u1ee7) <pre><code>    def fit(self, data):\n        # Initialize the root node with all row indices from the dataset\n        self.root = TreeNode(list(range(len(data))))\n\n        # Exclude the label column from the features\n        X = data.iloc[:, :-1]\n\n        # Initialize the queue for BFS\n        queue = deque([self.root])\n\n        # Perform BFS to build the decision tree\n        while queue:\n            # Retrieve the current node from the queue\n            node = queue.popleft()\n\n            # Get the subset of data corresponding to the current node\n            node_data = data.iloc[node.row_indices]\n\n            # Check if the current node is a leaf node\n            if entropy(node_data) &lt; 1e-6:\n                node.label = node_data.iloc[:, -1].mode()[0]  # Assign the most frequent label to the leaf node\n                self.leaves.append(node)  # Add the leaf node to the list of leaves\n                continue  # Stop further splitting for this node\n\n            # Find the feature with the minimum entropy for splitting\n            node.split_column = min(X.columns, key=lambda col: weighted_entropy(node_data, col))\n\n            # Group the data indices by the selected split column.\n            # Note: 'splits' contains indices relative to 'node_data', not the original data.\n            splits = node_data.groupby(node_data[node.split_column]).indices\n\n            # Convert grouped indices back to the original data indices\n            for val in splits:\n                splits[val] = [node.row_indices[ind] for ind in splits[val]]\n\n            # Create child nodes for each group and add them to the current node\n            for value in splits:\n                indices = splits[value]\n                child_node = TreeNode(indices)\n                node.add(child_node, value)\n                queue.append(child_node)  # Add the child node to the queue for further processing\n</code></pre> Cu\u1ed1i c\u00f9ng l\u00e0 h\u00e0m predict. V\u1edbi m\u1ed9t b\u1ea3ng d\u1eef li\u1ec7u m\u1edbi, ta s\u1ebd duy\u1ec7t t\u1eebng h\u00e0ng c\u1ee7a b\u1ea3ng d\u1eef li\u1ec7u, \u0111\u01b0a v\u00e0o decision tree v\u1eeba x\u00e2y d\u1ef1ng \u0111\u1ec3 predict cho t\u1eebng h\u00e0ng. <pre><code>    def predict(self, new_data):\n        npoints = new_data.count()[0]  # Retrieve the number of data points in new_data\n        labels = [None] * npoints  # Initialize the list to store prediction results\n\n        for n in range(npoints):\n            x = new_data.iloc[n, :]  # Get the current data point\n            node = self.root  # Start prediction from the root node\n\n            # Traverse the tree until a leaf node is reached\n            while node.children:\n                col_to_split = node.split_column  # Get the column used for splitting at this node\n                if x[col_to_split] not in node.children:  # Check if the split value exists in the children of the current node\n                    break  # If the value is not found, this data point cannot be classified\n\n                # Move to the corresponding child node based on the split value\n                node = node.children[x[col_to_split]]\n\n            # Assign the label of the reached leaf node to the current data point\n            labels[n] = node.label\n\n        return labels\n</code></pre> Nh\u01b0 v\u1eady l\u00e0 ta \u0111\u00e3 code xong decision tree. Gi\u1edd ta s\u1ebd ch\u1ea1y th\u1eed tr\u00ean ch\u00ednh t\u1eadp d\u1eef li\u1ec7u \u0111\u00e3 cho \u0111\u1ec3 xem t\u1ea5t c\u1ea3 c\u00e1c \u0111i\u1ec3m d\u1eef li\u1ec7u \u0111\u00e3 \u0111\u01b0\u1ee3c ph\u00e2n lo\u1ea1i \u0111\u00fang hay ch\u01b0a. <pre><code>if __name__ == \"__main__\":\n    df = pd.read_csv(\"weather.csv\")\n    X = df.iloc[:, 1:]\n    y = df.iloc[:, -1]\n\n    dt = DecisionTree()\n    dt.fit(X)\n\n    print(dt.predict(X))\n    print(y.to_list())\n</code></pre> <pre><code>['no', 'no', 'yes', 'yes', 'yes', 'no', 'yes', 'no', 'yes', 'yes', 'yes', 'yes', 'yes', 'no']\n['no', 'no', 'yes', 'yes', 'yes', 'no', 'yes', 'no', 'yes', 'yes', 'yes', 'yes', 'yes', 'no']\n</code></pre> K\u1ebft qu\u1ea3 ph\u00e2n lo\u1ea1i c\u1ee7a decision tree tr\u00f9ng kh\u1edbp ho\u00e0n to\u00e0n v\u1edbi label ban \u0111\u1ea7u c\u1ee7a data, nh\u01b0 v\u1eady l\u00e0 ta \u0111\u00e3 c\u00e0i \u0111\u1eb7t th\u00e0nh c\u00f4ng decision tree.</p> <p>Ta c\u00f3 th\u1ec3 v\u1ebd l\u1ea1i decision tree ta v\u1eeba x\u00e2y d\u1ef1ng nh\u01b0 sau: <pre><code>flowchart TD\n    root(\n        row_indices = 0, 1, ..., 13\n        split_column = outlook\n    )\n\n    child1(\n        row_indices = 0, 1, 7, 8, 10\n        split_column = humidity\n    )\n\n    child2(\n        row_indices = 3, 4, 5, 9, 13\n        split_column = wind\n    )\n\n    leaf1((N))\n    leaf2((Y))\n    leaf3((Y))\n    leaf4((Y))\n    leaf5((N))\n\n    root -- sunny ---&gt; child1\n    root -- overcast --&gt; leaf3\n    root -- rainy ---&gt; child2\n\n    child1 -- high --&gt; leaf1\n    child1 -- normal --&gt; leaf2\n\n    child2 -- weak --&gt; leaf4\n    child2 -- strong --&gt; leaf5\n\n    style leaf1 fill:#f3b7b6,stroke:#555,stroke-width:1px,color:#000\n    style leaf2 fill:#c4fdbb,stroke:#555,stroke-width:1px,color:#000\n    style leaf3 fill:#c4fdbb,stroke:#555,stroke-width:1px,color:#000\n    style leaf4 fill:#c4fdbb,stroke:#555,stroke-width:1px,color:#000\n    style leaf5 fill:#f3b7b6,stroke:#555,stroke-width:1px,color:#000</code></pre></p> Code ho\u00e0n ch\u1ec9nh <code>decision_tree.py</code> decision_tree.py<pre><code>from typing import List\nimport pandas as pd\nimport numpy as np\nfrom collections import deque\n\n\ndef entropy(data: pd.DataFrame):\n    y = data.iloc[:, -1]  # Retrieve the labels\n    value_counts = y.value_counts()  # Calculate all N_c\n    probs = value_counts / len(y)  # Calculate all N_c / N\n    entropy = -np.sum(probs * np.log2(probs))  # Calculate the entropy\n    return entropy\n\n\ndef weighted_entropy(data: pd.DataFrame, prop: str):\n    N = len(data)\n    weighted_entropy = 0\n\n    for value in data[prop].unique():\n        subset = data[data[prop] == value]  # Calculate m_k\n        value_entropy = entropy(subset)  # Calculate H(S_k)\n\n        weighted_entropy += value_entropy * len(subset) / N  # Add to the final result\n\n    return weighted_entropy\n\n\nclass TreeNode:\n    def __init__(self, row_indices) -&gt; None:\n        self.row_indices = row_indices\n        self.split_column = None\n        self.children = {}\n        self.label = None\n\n    def add(self, child_node, column_value):\n        self.children[column_value] = child_node\n\n    def __str__(self) -&gt; str:\n        return str(self.row_indices)\n\n\nclass DecisionTree:\n    def __init__(self) -&gt; None:\n        self.root = None  # The root node of the decision tree\n        self.leaves = []  # List to store all the leaf nodes\n\n    def fit(self, data):\n        # Initialize the root node with all row indices from the dataset\n        self.root = TreeNode(list(range(len(data))))\n\n        # Exclude the label column from the features\n        X = data.iloc[:, :-1]\n\n        # Initialize the queue for BFS\n        queue = deque([self.root])\n\n        # Perform BFS to build the decision tree\n        while queue:\n            # Retrieve the current node from the queue\n            node = queue.popleft()\n\n            # Get the subset of data corresponding to the current node\n            node_data = data.iloc[node.row_indices]\n\n            # Check if the current node is a leaf node\n            if entropy(node_data) &lt; 1e-6:\n                node.label = node_data.iloc[:, -1].mode()[0]  # Assign the most frequent label to the leaf node\n                self.leaves.append(node)  # Add the leaf node to the list of leaves\n                continue  # Stop further splitting for this node\n\n            # Find the feature with the minimum entropy for splitting\n            node.split_column = min(X.columns, key=lambda col: weighted_entropy(node_data, col))\n\n            # Group the data indices by the selected split column.\n            # Note: 'splits' contains indices relative to 'node_data', not the original data.\n            splits = node_data.groupby(node_data[node.split_column]).indices\n\n            # Convert grouped indices back to the original data indices\n            for val in splits:\n                splits[val] = [node.row_indices[ind] for ind in splits[val]]\n\n            # Create child nodes for each group and add them to the current node\n            for value in splits:\n                indices = splits[value]\n                child_node = TreeNode(indices)\n                node.add(child_node, value)\n                queue.append(child_node)  # Add the child node to the queue for further processing\n\n    def predict(self, new_data):\n        npoints = new_data.count()[0]  # Retrieve the number of data points in new_data\n        labels = [None] * npoints  # Initialize the list to store prediction results\n\n        for n in range(npoints):\n            x = new_data.iloc[n, :]  # Get the current data point\n            node = self.root  # Start prediction from the root node\n\n            # Traverse the tree until a leaf node is reached\n            while node.children:\n                col_to_split = node.split_column  # Get the column used for splitting at this node\n                if x[col_to_split] not in node.children:  # Check if the split value exists in the children of the current node\n                    break  # If the value is not found, this data point cannot be classified\n\n                # Move to the corresponding child node based on the split value\n                node = node.children[x[col_to_split]]\n\n            # Assign the label of the reached leaf node to the current data point\n            labels[n] = node.label\n\n        return labels\n\n\nif __name__ == \"__main__\":\n    df = pd.read_csv(\"weather.csv\")\n    X = df.iloc[:, 1:]\n    y = df.iloc[:, -1]\n\n    dt = DecisionTree()\n    dt.fit(X)\n\n    print(dt.predict(X))\n    print(y.to_list())\n</code></pre> <ol> <li> <p>https://machinelearningcoban.com/2018/01/14/id3/\u00a0\u21a9</p> </li> </ol>"},{"location":"course/ml-algorithms/linear-regression/","title":"Linear Regression","text":"<p>V\u00ec c\u00e1i n\u00e0y \u0111\u01a1n gi\u1ea3n n\u00ean s\u1ebd \u0111i th\u1eb3ng lu\u00f4n v\u00e0o ph\u1ea7n th\u1ef1c h\u00e0nh, v\u1eeba th\u1ef1c h\u00e0nh v\u1eeba gi\u1ea3i th\u00edch.</p>"},{"location":"course/ml-algorithms/linear-regression/#bai-toan","title":"B\u00e0i to\u00e1n","text":"<p>B\u00e0i to\u00e1n kinh \u0111i\u1ec3n l\u00e0 d\u1ef1 \u0111o\u00e1n gi\u00e1 nh\u00e0. Download data t\u1ea1i \u0111\u00e2y:</p> <p>House Sales in King County, USA</p>"},{"location":"course/ml-algorithms/linear-regression/#code","title":"Code","text":""},{"location":"course/ml-algorithms/nbc/","title":"Naive Bayes Classifier","text":"<p>B\u00e0i n\u00e0y s\u1ebd n\u00f3i v\u1ec1 thu\u1eadt to\u00e1n Decision Tree v\u00e0 th\u1ef1c h\u00e0nh n\u00f3 tr\u00ean Python.</p> <p>\u0110\u1ecdc b\u00e0i g\u1ed1c \u1edf b\u00e0i vi\u1ebft tr\u00ean forum Machine Learning c\u01a1 b\u1ea3n.</p>"},{"location":"course/ml-algorithms/nbc/#bai-toan","title":"B\u00e0i to\u00e1n","text":"<p>X\u00e9t b\u00e0i to\u00e1n classification v\u1edbi \\(C\\) classes \\(1, 2, \\dots, C\\). Gi\u1ea3 s\u1eed c\u00f3 m\u1ed9t \u0111i\u1ec3m d\u1eef li\u1ec7u \\(\\mathbf{x} \\in \\mathbb{R}^d\\), h\u00e3y t\u00ednh x\u00e1c su\u1ea5t \u0111\u1ec3 \u0111i\u1ec3m d\u1eef li\u1ec7u n\u00e0y r\u01a1i v\u00e0o class \\(c\\):</p> \\[ \\tag{1} p(c|\\mathbf{x}) \\] <p>\u0110\u1ec3 ph\u00e2n l\u1edbp m\u1ed9t \u0111i\u1ec3m d\u1eef li\u1ec7u, ta t\u00ednh x\u00e1c su\u1ea5t \u0111\u1ec3 \u0111i\u1ec3m d\u1eef li\u1ec7u \u0111\u00f3 r\u01a1i v\u00e0o m\u1ed7i class v\u00e0 ch\u1ecdn ra class c\u00f3 x\u00e1c su\u1ea5t cao nh\u1ea5t.</p> \\[ \\tag{2} c = \\arg\\max_{c \\in \\{1, \\dots, C\\}} p(c | \\mathbf{x}) \\] <p>\u00c1p d\u1ee5ng quy t\u1eafc Bayes:</p> \\[ \\tag{3} c = \\arg\\max_c p(c | \\mathbf{x}) = \\arg\\max_c \\dfrac{p(\\mathbf{x} | c) p(c)}{p(\\mathbf{x})} \\] <p>Do m\u1eabu s\u1ed1 \\(p(\\mathbf{x})\\) kh\u00f4ng ph\u1ee5 thu\u1ed9c v\u00e0o \\(c\\):</p> \\[ \\tag{4} c = \\arg\\max_c p(\\mathbf{x} | c) p(c) \\] <p>trong \u0111\u00f3:</p> <ul> <li>\\(p(c)\\): x\u00e1c su\u1ea5t \u0111\u1ec3 m\u1ed9t \u0111i\u1ec3m r\u01a1i v\u00e0o class \\(c\\)</li> <li>\\(p(\\mathbf{x} | c)\\): ph\u00e2n ph\u1ed1i c\u1ee7a \u0111i\u1ec3m d\u1eef li\u1ec7u \\(\\mathbf{x}\\) trong class \\(c\\)</li> </ul> <p>\u0110\u1ec3 d\u1ec5 t\u00ednh \\(p(\\mathbf{x} | c)\\), ta th\u01b0\u1eddng gi\u1ea3 thi\u1ebft r\u1eb1ng c\u00e1c th\u00e0nh ph\u1ea7n c\u1ee7a \\(\\mathbb{x}\\) l\u00e0 \u0111\u1ed9c l\u1eadp v\u1edbi nhau:</p> \\[ \\tag{5} p(\\mathbf{x} | c) = p(x_1, x_2, \\dots, x_d | c) =  \\prod_{i = 1}^d p(x_i | c) \\] <p>Note</p> <p>Gi\u1ea3 thi\u1ebft c\u00e1c chi\u1ec1u c\u1ee7a d\u1eef li\u1ec7u \u0111\u1ed9c l\u1eadp v\u1edbi nhau, n\u1ebfu bi\u1ebft \\(c\\), l\u00e0 qu\u00e1 ch\u1eb7t v\u00e0 \u00edt khi t\u00ecm \u0111\u01b0\u1ee3c d\u1eef li\u1ec7u m\u00e0 c\u00e1c th\u00e0nh ph\u1ea7n ho\u00e0n to\u00e0n \u0111\u1ed9c l\u1eadp v\u1edbi nhau. Tuy nhi\u00ean, gi\u1ea3 thi\u1ebft ng\u00e2y ng\u00f4 n\u00e0y l\u1ea1i mang l\u1ea1i nh\u1eefng k\u1ebft qu\u1ea3 t\u1ed1t b\u1ea5t ng\u1edd. Gi\u1ea3 thi\u1ebft v\u1ec1 s\u1ef1 \u0111\u1ed9c l\u1eadp c\u1ee7a c\u00e1c chi\u1ec1u d\u1eef li\u1ec7u n\u00e0y \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 Naive Bayes. C\u00e1ch x\u00e1c \u0111\u1ecbnh class c\u1ee7a d\u1eef li\u1ec7u d\u1ef1a tr\u00ean gi\u1ea3 thi\u1ebft n\u00e0y c\u00f3 t\u00ean l\u00e0 Naive Bayes Classifier (NBC).<sup>1</sup></p> <p>V\u1edbi m\u1ed9t \u0111i\u1ec3m d\u1eef li\u1ec7u m\u1edbi \\(\\mathbf{x}\\), class c\u1ee7a n\u00f3 s\u1ebd \u0111\u01b0\u1ee3c x\u00e1c \u0111\u1ecbnh b\u1edfi:</p> \\[ \\tag{6} c = \\arg\\max_{c \\in \\{1, \\dots, C\\}} p(c) \\prod_{i=1}^d p(x_i | c) \\] <p>Khi \\(d\\) l\u1edbn v\u00e0 c\u00e1c x\u00e1c su\u1ea5t \\(p(x_i | c)\\) nh\u1ecf, v\u1ebf ph\u1ea3i c\u1ee7a \\((6)\\) s\u1ebd l\u00e0 m\u1ed9t s\u1ed1 r\u1ea5t nh\u1ecf, khi t\u00ednh to\u00e1n c\u00f3 th\u1ec3 g\u1eb7p sai s\u1ed1. \u0110\u1ec3 kh\u1eafc ph\u1ee5c, ta l\u1ea5y \\(\\log\\) v\u1ebf ph\u1ea3i c\u1ee7a \\((6)\\). Vi\u1ec7c n\u00e0y kh\u00f4ng \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn k\u1ebft qu\u1ea3 v\u00ec \\(\\log\\) l\u00e0 m\u1ed9t h\u00e0m \u0111\u1ed3ng bi\u1ebfn tr\u00ean t\u1eadp c\u00e1c s\u1ed1 d\u01b0\u01a1ng.</p> \\[ \\tag{7} c = \\arg\\max_{c \\in \\{1, \\dots, C\\}} \\left( \\log(p(c)) + \\sum_{i=1}^d \\log(p(x_i | c)) \\right) \\]"},{"location":"course/ml-algorithms/nbc/#cac-phan-phoi-thuong-dung-cho-px_i-c","title":"C\u00e1c ph\u00e2n ph\u1ed1i th\u01b0\u1eddng d\u00f9ng cho \\(p(x_i | c)\\)","text":"<p>L\u01b0u \u00fd</p> \\[\\displaystyle \\sum_{i = 1}^d p(x_i | c) = 1, \\quad \\forall c\\]"},{"location":"course/ml-algorithms/nbc/#gaussian-naive-bayes","title":"Gaussian Naive Bayes","text":"<p>Th\u01b0\u1eddng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho lo\u1ea1i d\u1eef li\u1ec7u m\u00e0 c\u00e1c th\u00e0nh ph\u1ea7n l\u00e0 c\u00e1c bi\u1ebfn li\u00ean t\u1ee5c.</p> \\[ \\tag{8} p(x_i|c) =  \\dfrac{1}{\\sqrt{2\\pi \\sigma_{ci}^2}} \\exp\\left(- \\dfrac{(x_i - \\mu_{ci})^2}{2 \\sigma_{ci}^2}\\right) \\]"},{"location":"course/ml-algorithms/nbc/#multinomial-naive-bayes","title":"Multinomial Naive Bayes","text":"<p>Th\u01b0\u1eddng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho lo\u1ea1i d\u1eef li\u1ec7u m\u00e0 features vector \u0111\u01b0\u1ee3c t\u00ednh b\u1eb1ng Bags of Words.</p> \\[ \\tag{9} p(x_i | c) = \\dfrac{N_{ci}}{N_c} \\] <p>trong \u0111\u00f3:</p> <ul> <li>\\(N_{ci}\\): t\u1ed5ng s\u1ed1 l\u01b0\u1ee3ng word \\(x_i\\) trong class \\(c\\)h</li> <li>\\(N_c\\): t\u1ed5ng s\u1ed1 l\u01b0\u1ee3ng word c\u1ee7a class \\(c\\)</li> </ul> <p>C\u00e1ch t\u00ednh n\u00e0y c\u00f3 m\u1ed9t v\u1ea5n \u0111\u1ec1: n\u1ebfu t\u1eeb \\(x_i\\) ch\u01b0a bao gi\u1edd xu\u1ea5t hi\u1ec7n trong class \\(c\\) th\u00ec bi\u1ec3u th\u1ee9c \\((10)\\) s\u1ebd b\u1eb1ng \\(0\\), d\u1eabn \u0111\u1ebfn v\u1ebf ph\u1ea3i c\u1ee7a \\((6)\\) b\u1eb1ng \\(0\\) b\u1ea5t k\u1ec3 c\u00e1c gi\u00e1 tr\u1ecb kh\u00e1c c\u00f3 l\u1edbn th\u1ebf n\u00e0o.</p> <p>\u0110\u1ec3 kh\u1eafc ph\u1ee5c, m\u1ed9t k\u1ef9 thu\u1eadt \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 Laplace smoothing \u0111\u01b0\u1ee3c \u00e1p d\u1ee5ng:</p> \\[ \\tag{10} p(x_i | c) = \\dfrac{N_{ci} + \\alpha}{N_{c} + d\\alpha}, \\quad \\alpha &gt; 0 \\] <p>Th\u01b0\u1eddng th\u00ec ta l\u1ea5y \\(\\alpha = 1\\).</p> <p>Note</p> <p>C\u00f3 th\u1ec3 h\u00ecnh dung ph\u01b0\u01a1ng ph\u00e1p n\u00e0y l\u00e0 v\u1edbi m\u1ed7i class \\(c\\), v\u1edbi m\u1ed7i t\u1eeb \\(x_i\\), ta \u0111\u1ec1u th\u00eam s\u1eb5n m\u1ed9t s\u1ed1 l\u01b0\u1ee3ng \\(\\alpha\\) t\u1eeb \\(x_i\\).</p>"},{"location":"course/ml-algorithms/nbc/#bernoulli-naive-bayes","title":"Bernoulli Naive Bayes","text":"<p>Th\u01b0\u1eddng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng cho lo\u1ea1i d\u1eef li\u1ec7u m\u00e0 m\u1ed7i th\u00e0nh ph\u1ea7n l\u00e0 m\u1ed9t gi\u00e1 tr\u1ecb binary.</p> \\[ \\tag{11} p\\left(x_i | c\\right) = p\\left(i | c\\right)^{x_i} \\left(1 - p\\left(i | c\\right)\\right) ^{1 - x_i} \\] <p>trong \u0111\u00f3 \\(p\\left(x_i | c\\right)\\) c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c hi\u1ec3u l\u00e0 x\u00e1c su\u1ea5t t\u1eeb th\u1ee9 \\(i\\) xu\u1ea5t hi\u1ec7n trong c\u00e1c v\u0103n b\u1ea3n c\u1ee7a class \\(c\\).</p>"},{"location":"course/ml-algorithms/nbc/#thuc-hanh","title":"Th\u1ef1c h\u00e0nh","text":"<p>Ph\u1ea7n n\u00e0y ta s\u1ebd x\u00e2y d\u1ef1ng c\u00e1c b\u01b0\u1edbc \u0111\u1ec3 gi\u1ea3i m\u1ed9t b\u00e0i to\u00e1n Navie Bayes Classifier s\u1eed d\u1ee5ng c\u00e1c ki\u1ebfn th\u1ee9c \u1edf tr\u00ean.</p> V\u00ed d\u1ee5: B\u1eafc hay Nam <p>Ta s\u1ebd th\u1ef1c h\u00e0nh tr\u00ean b\u00e0i to\u00e1n sau: Cho c\u00e1c v\u0103n b\u1ea3n \\(\\text{d1}\\), \\(\\text{d2}\\), \\(\\text{d3}\\), \\(\\text{d4}\\) nh\u01b0 trong b\u1ea3ng d\u01b0\u1edbi \u0111\u00e2y. M\u1ed7i v\u0103n b\u1ea3n n\u00e0y thu\u1ed9c v\u00e0o 1 trong 2 classes: \\(\\text{B}\\) (B\u1eafc) ho\u1eb7c \\(\\text{N}\\) (Nam). H\u00e3y x\u00e1c \u0111\u1ecbnh class c\u1ee7a v\u0103n b\u1ea3n \\(\\text{d5}\\).</p> Document Content Class Training \\(\\text{d1}\\) \\(\\text{hanoi pho chaolong hanoi}\\) \\(\\text{B}\\) \\(\\text{d2}\\) \\(\\text{hanoi buncha pho omai}\\) \\(\\text{B}\\) \\(\\text{d3}\\) \\(\\text{pho bahngio omai}\\) \\(\\text{B}\\) \\(\\text{d4}\\) \\(\\text{saigon hutiu banhbo pho}\\) \\(\\text{N}\\) Test \\(\\text{d5}\\) \\(\\text{hanoi hanoi buncha hutiu}\\) \\(\\text{?}\\)"},{"location":"course/ml-algorithms/nbc/#training","title":"Training","text":"<ul> <li> <p>B\u01b0\u1edbc 1: T\u00ednh c\u00e1c \\(p(c)\\)</p> V\u00ed d\u1ee5: B\u1eafc hay Nam <p>V\u00ed d\u1ee5 ta \u0111ang x\u00e9t c\u00f3 2 class l\u00e0 \\(\\text{B}\\) v\u00e0 \\(\\text{N}\\). Ta s\u1ebd t\u00ednh c\u00e1c \\(p(\\text{B})\\) v\u00e0 \\(p(\\text{N})\\):</p> \\[ p(\\text{B}) = \\dfrac{3}{4}, \\quad\\quad p(\\text{N}) = \\dfrac{1}{4} \\] </li> <li> <p>B\u01b0\u1edbc 2: X\u00e1c \u0111\u1ecbnh \\(V = \\text{Bags of Words}\\), l\u00e0 t\u1eadp h\u1ee3p to\u00e0n b\u1ed9 c\u00e1c t\u1eeb trong v\u0103n b\u1ea3n.</p> V\u00ed d\u1ee5: B\u1eafc hay Nam \\[ V = \\{\\text{hanoi, pho, chaolong, buncha, omai, banhgio, saigon, hutiu, banhbo}\\}, \\quad \\lvert V \\rvert = 9 \\] </li> <li> <p>B\u01b0\u1edbc 3: V\u1edbi m\u1ed7i word \\(x_i \\in V\\), v\u1edbi m\u1ed7i class \\(c\\), t\u00ednh \\(p(x_i | c)\\).</p> V\u00ed d\u1ee5: B\u1eafc hay Nam <p>\u0110\u1ea7u ti\u00ean \u0111\u1ebfm s\u1ed1 t\u1eeb c\u1ee7a m\u1ed7i class, ta t\u00ednh \u0111\u01b0\u1ee3c class \\(\\text{B}\\) c\u00f3 t\u1ed5ng c\u1ed9ng \\(11\\) word v\u00e0 class \\(\\text{N}\\) c\u00f3 t\u1ed5ng c\u1ed9ng 4 word:</p> \\[ N_\\text{B} = 11, \\quad N_\\text{N} = 4 \\] <p>X\u00e9t class \\(\\text{B}\\), v\u00ed d\u1ee5 v\u1edbi word \\(\\text{hanoi}\\), trong t\u1ea5t c\u1ea3 c\u00e1c v\u0103n b\u1ea3n thu\u1ed9c class \\(\\text{B}\\), word \\(\\text{hanoi}\\) xu\u1ea5t hi\u1ec7n t\u1ed5ng c\u1ed9ng \\(3\\) l\u1ea7n.</p> <p>\u00c1p d\u1ee5ng \\((10)\\) v\u1edbi \\(\\alpha = 1\\), ta t\u00ednh \u0111\u01b0\u1ee3c:</p> \\[ p(\\text{hanoi} | \\text{B}) = \\dfrac{3 + 1}{11 + 9.1} = \\dfrac{4}{20} \\] <p>T\u01b0\u01a1ng t\u1ef1 v\u1edbi c\u00e1c word c\u00f2n l\u1ea1i v\u00e0 class \\(\\text{N}\\), ta t\u00ednh \u0111\u01b0\u1ee3c c\u00e1c \\(p(x_i | c)\\) nh\u01b0 sau (k\u00fd hi\u1ec7u \\(\\hat{\\lambda}\\) trong h\u00ecnh ch\u00ednh l\u00e0 \\(p\\)):</p> <p></p> </li> </ul>"},{"location":"course/ml-algorithms/nbc/#test","title":"Test","text":"<p>V\u1edbi m\u1ed7i v\u0103n b\u1ea3n m\u1edbi, ta th\u1ef1c hi\u1ec7n c\u00e1c b\u01b0\u1edbc sau:</p> <ul> <li> <p>B\u01b0\u1edbc 1: T\u00ednh \u0111i\u1ec3m d\u1eef li\u1ec7u \\(\\mathbf{x}\\) t\u01b0\u01a1ng \u1ee9ng</p> V\u00ed d\u1ee5: B\u1eafc hay Nam <p>V\u1edbi</p> \\[\\text{d5} = \\text{hanoi hanoi buncha hutiu}\\] <p>v\u00e0</p> \\[ V = \\{\\text{hanoi, pho, chaolong, buncha, omai, banhgio, saigon, hutiu, banhbo}\\} \\] <p>ta t\u00ednh \u0111\u01b0\u1ee3c \\(\\mathbf{x}_5 = \\left[ 2, 0, 0, 1, 0, 0, 0, 1, 0 \\right]\\).</p> </li> <li> <p>B\u01b0\u1edbc 2: X\u00e1c \u0111\u1ecbnh class c\u1ee7a n\u00f3 nh\u01b0 \u1edf \\((6)\\)</p> \\[ \\tag{6} c = \\arg\\max_{c \\in \\{1, \\dots, C\\}} p(c) \\prod_{i=1}^d p(x_i | c) \\] </li> </ul> <ol> <li> <p>https://machinelearningcoban.com/2017/08/08/nbc/\u00a0\u21a9</p> </li> </ol>"},{"location":"course/ml-algorithms/svm/","title":"Soft Margin Support Vector Machine","text":"<p>B\u00e0i n\u00e0y s\u1ebd n\u00f3i v\u1ec1 Soft Margin SVM v\u00e0 th\u1ef1c h\u00e0nh n\u00f3 tr\u00ean Python.</p> <p>\u0110\u1ecdc b\u00e0i g\u1ed1c \u1edf b\u00e0i vi\u1ebft tr\u00ean forum Machine Learning c\u01a1 b\u1ea3n.</p>"},{"location":"course/ml-algorithms/svm/#bai-toan","title":"B\u00e0i to\u00e1n","text":""},{"location":"course/python-concurrency/","title":"Python Concurrency","text":"<p>For more information on the course, visit the original source here.</p> <p>Abstract</p> <p>In this section, we\u2019ll learn about Python concurrency including multithreading, multiprocessing, and asynchronous programming from scratch.</p> <p>What we\u2019ll learn:</p> <ul> <li>Build high-performance &amp; responsive Python applications using concurrency techniques.</li> <li>Develop multithreaded applications using multithreading.</li> <li>Develop a program that processes tasks in parallel.</li> <li>Understand the single-threaded concurrency model.</li> </ul>"},{"location":"course/python-concurrency/#section-1-multithreading","title":"Section 1. Multithreading","text":"<ul> <li>Lecture 1. Understanding Processes and Threads</li> <li>Lecture 2. Threading</li> <li>Lecture 3. Extending the Thread class</li> <li>Lecture 4. Returning values from a Thread</li> <li>Lecture 5. Multithreading Example</li> <li>Lecture 6. Daemon threads</li> <li>Lecture 7. Thread Pools</li> <li>Section Summary - Multithreading</li> </ul>"},{"location":"course/python-concurrency/#section-2-thread-synchronization-techniques","title":"Section 2. Thread Synchronization Techniques","text":"<ul> <li>Lecture 1. Lock</li> <li>Lecture 2. Event</li> <li>Lecture 3. How to stop a thread</li> <li>Lecture 4. Semaphore</li> <li>Section Summary - Thread Synchronization Techniques</li> </ul>"},{"location":"course/python-concurrency/#section-3-sharing-data-between-threads","title":"Section 3. Sharing Data Between Threads","text":"<ul> <li>Lecture 1. Thread-safe Queue</li> </ul>"},{"location":"course/python-concurrency/#section-4-multiprocessing","title":"Section 4. Multiprocessing","text":"<ul> <li>Lecture 1. Multiprocessing</li> <li>Lecture 2. Process Pools</li> </ul>"},{"location":"course/python-concurrency/#section-5-async-io","title":"Section 5. Async I/O","text":"<ul> <li>Lecture 1. Understanding Event Loop</li> <li>Lecture 2. <code>async</code>/<code>await</code></li> <li>Lecture 3. Creating tasks</li> <li>Lecture 4. Canceling tasks</li> <li>Lecture 5. Canceling a task with a timeout</li> <li>Lecture 6. <code>asyncio.wait()</code></li> <li>Lecture 7. <code>Future</code></li> <li>Lecture 8. Running multiple tasks concurrently with <code>gather()</code></li> </ul>"},{"location":"course/python-concurrency/S01-Summary/","title":"Section Summary - Multithreading","text":""},{"location":"course/python-concurrency/S01-Summary/#process-vs-thread","title":"Process vs Thread","text":"Process Thread Definition A process is an instance of a program running on a computer. A thread is a unit of execution within a process. Memory Sharing Memory is not shared between processes Memory is shared between threads within a process Memory footprint Large Small CPU-bound &amp; I/O-bound processing Use for CPU-bound tasks Use for I/O bound tasks Starting time Slower than a thread Faster than a process Interruptablity Child processes are interruptible. Threads are not interruptible."},{"location":"course/python-concurrency/S01-Summary/#threading-module","title":"<code>threading</code> module","text":"<ul> <li>Use <code>Thread(function, args)</code> to create a new thread.</li> <li>Call the <code>start()</code> method of the <code>Thread</code> class to start the thread.</li> <li>Call the <code>join()</code> method of the <code>Thread</code> class to wait for the thread to complete in the main thread.</li> <li>Extend the <code>Thread</code> class to run code in a new thread by calling the <code>__init__()</code> method of the superclass in the subclass and override the <code>run</code> method to add the code to run in a new thread.</li> <li>Extend the <code>Thread</code> class and set the instance variables inside the subclass to return the values from a child thread to the main thread.</li> </ul>"},{"location":"course/python-concurrency/S01-Summary/#daemon-threads","title":"Daemon Threads","text":"<p>Daemon threads are background threads. In other words, daemon threads execute tasks in the background.</p> <p>Example</p> <ul> <li>Log information to a file in the background</li> <li>Scrap contents from a website in the background</li> <li>Auto-save the data into a database in the background</li> </ul> <p>The program can exit and doesn't need to wait for the daemon threads to be completed. A daemon thread is automatically killed when the program exits.</p>"},{"location":"course/python-concurrency/S01-Summary/#thread-pools","title":"Thread Pools","text":"<p>A thread pool is a \"collection\" of worker threads that are used to execute tasks concurrently.</p> <p>The <code>ThreadPoolExecutor</code> class extends the <code>Executor</code> class and returns a <code>Future</code> object. Use context manager when working with thread pool.</p>"},{"location":"course/python-concurrency/S01L01-Understanding-Processes-and-Threads/","title":"What\u2019s are the Differences between Processes and Threads","text":""},{"location":"course/python-concurrency/S01L01-Understanding-Processes-and-Threads/#introduction-to-processes-and-threads","title":"Introduction to processes and threads","text":"<p>Definition</p> <ul> <li>A process is an instance of a program running on a computer.</li> <li>A thread is a unit of execution within a process.</li> </ul> <p>A program may have one or more processes and a process can have one or more threads.</p> <p>When a program has multiple processes, it's called multiprocessing.</p> <p>If a program has multiple threads, it's called multi threading.</p> <p>In general, programs deal with two types of tasks: I/O-bound or CPU-bound</p> <ul> <li> <p>I/O-bound tasks spend more time doing I/O than doing computations. </p> <p>Example</p> <p>Network requests, database connections, and file reading/writing.</p> </li> <li> <p>CPU-bound tasks use more time doing computation than generating I/O requests.</p> <p>Example</p> <p>Matrix multiplication, finding prime numbers, video compression, video streaming.</p> </li> </ul> <p>Technically, multithreading is suitable for I/O-bound tasks, and multiprocessing is suitable for CPU-bound tasks.</p>"},{"location":"course/python-concurrency/S01L01-Understanding-Processes-and-Threads/#the-main-differences-between-processes-and-threads","title":"The main differences between processes and threads","text":"Criteria Process Thread Memory Sharing Memory is not shared between processes Memory is shared between threads within a process Memory footprint Large Small CPU-bound &amp; I/O-bound processing Optimized for CPU-bound tasks Optimized for I/O bound tasks Starting time Slower than a thread Faster than a process Interruptablity Child processes are interruptible. Threads are not interruptible. <p>Summary</p> <ul> <li>A process is an instance of a program running on a computer.</li> <li>A thread is a unit of execution within a process.</li> <li>A program can have one or more processes and a process can have one or more threads.</li> </ul>"},{"location":"course/python-concurrency/S01L02-Threading/","title":"Python Threading","text":""},{"location":"course/python-concurrency/S01L02-Threading/#single-threaded-applications","title":"Single-threaded applications","text":"<p>Let's start with a simple program:</p> <p><pre><code>from time import sleep, perf_counter\n\ndef task():\n    print('Starting a task...')\n    sleep(1)\n    print('done')\n\n\nstart_time = perf_counter()\n\ntask()\ntask()\n\nend_time = perf_counter()\n\nprint(f'It took {end_time- start_time: 0.2f} second(s) to complete.')\n</code></pre> Output<pre><code>Starting a task...\ndone\nStarting a task...\ndone\nIt took 2.01 second(s) to complete.\n</code></pre></p> <p>The following diagram illustrates how the program works:</p> <p>This program has one process with single thread, which is called the main thread.</p> <p>Because the program has only one thread, it's called a single-threaded program.</p>"},{"location":"course/python-concurrency/S01L02-Threading/#multi-threaded-program-example","title":"Multi-threaded program example","text":"<p>We will create a multi-threaded program.</p> <p>First, import the Thread class from the threading module.</p> <pre><code>from threading import Thread\n</code></pre> <p>Then, create a new thread by instantiating an instance of the Thread class:</p> <pre><code>new_thread = Thread(target=fn,args=args_tuple)\n</code></pre> <p>The two main parameters of <code>Thread()</code> are:</p> <ul> <li><code>target</code>: the function (<code>fn</code>) to run in the new thread.</li> <li><code>args</code>: the arguments of the function (<code>fn</code>). The <code>args</code> is a tuple.</li> </ul> <p>Third, start the thread by calling <code>start()</code> method of <code>Thread</code> instance:</p> <pre><code>new_thread.start()\n</code></pre> <p>Call the <code>join()</code> method if we want to wait for the thread to complete in the main thread.</p> <pre><code>new_thread.join()\n</code></pre> <p>The following program illustrates how to use the <code>threading</code> module:</p> <p><pre><code>from time import sleep, perf_counter\nfrom threading import Thread\n\n\ndef task():\n    print('Starting a task...')\n    sleep(1)\n    print('done')\n\n\nstart_time = perf_counter()\n\n# create two new threads\nt1 = Thread(target=task)\nt2 = Thread(target=task)\n\n# start the threads\nt1.start()\nt2.start()\n\n# wait for the threads to complete\nt1.join()\nt2.join()\n\nend_time = perf_counter()\n\nprint(f'It took {end_time- start_time: 0.2f} second(s) to complete.')\n</code></pre> Output<pre><code>Starting a task...\nStarting a task...\ndone\ndone\nIt took  1.00 second(s) to complete.\n</code></pre></p> <p>When the program executes, it'll have three threads: The main thread and two other child threads.</p> <p>The following diagram shows how threads execute:</p>"},{"location":"course/python-concurrency/S01L02-Threading/#passing-arguments-to-threads","title":"Passing arguments to threads","text":"<p>The following program shows how to pass arguments to the function assigned to a thread:</p> <p><pre><code>from time import sleep, perf_counter\nfrom threading import Thread\n\n\ndef task(id):\n    print(f'Starting the task {id}...')\n    sleep(1)\n    print(f'The task {id} completed')\n\n\nstart_time = perf_counter()\n\n# create and start 10 threads\nthreads = []\nfor n in range(1, 11):\n    t = Thread(target=task, args=(n,))\n    threads.append(t)\n    t.start()\n\n# wait for the threads to complete\nfor t in threads:\n    t.join()\n\nend_time = perf_counter()\n\nprint(f'It took {end_time- start_time: 0.2f} second(s) to complete.')\n</code></pre> Output<pre><code>Starting the task 1...\nStarting the task 2...\nStarting the task 3...\nStarting the task 4...\nStarting the task 5...\nStarting the task 6...\nStarting the task 7...\nStarting the task 8...\nStarting the task 9...\nStarting the task 10...\nThe task 10 completed\nThe task 8 completed\nThe task 1 completed\nThe task 6 completed\nThe task 7 completed\nThe task 9 completed\nThe task 3 completed\nThe task 4 completed\nThe task 2 completed\nThe task 5 completed\nIt took  1.02 second(s) to complete.\n</code></pre></p> <p>Note</p> <p>The program doesn't execute the thread in the order from 1 to 10.</p> Why do we have to call the <code>join()</code> methods in a separate loop? <p>Have a look at the program: <pre><code># create and start 10 threads\nthreads = []\nfor n in range(1, 11):\n    t = Thread(target=task, args=(n,))\n    threads.append(t)\n    t.start()\n    t.join()\n</code></pre> Here, we create, start, and immediately join each thread within the loop. This causes each thread to run sequentially instead of concurrently because the program waits for each thread to finish (<code>t.join()</code>) before starting a new one.</p>"},{"location":"course/python-concurrency/S01L02-Threading/#when-to-use-python-threading","title":"When to use Python threading","text":"<p>Python threading is optimized for I/O-bound tasks. For example, requesting remote resources, connecting a database server, or reading and writing files.</p>"},{"location":"course/python-concurrency/S01L02-Threading/#a-practical-python-threading-example","title":"A Practical Python threading example","text":"<p>The following multi-threaded program shows how to replace a substring with the new one in the text files:</p> <p><pre><code>from threading import Thread\nfrom time import perf_counter\n\n\ndef replace(filename, substr, new_substr):\n    print(f'Processing the file {filename}')\n    # get the contents of the file\n    with open(filename, 'r') as f:\n        content = f.read()\n\n    # replace the substr by new_substr\n    content = content.replace(substr, new_substr)\n\n    # write data into the file\n    with open(filename, 'w') as f:\n        f.write(content)\n\n\ndef main():\n    filenames = [\n        'c:/temp/test1.txt',\n        'c:/temp/test2.txt',\n        'c:/temp/test3.txt',\n        'c:/temp/test4.txt',\n        'c:/temp/test5.txt',\n        'c:/temp/test6.txt',\n        'c:/temp/test7.txt',\n        'c:/temp/test8.txt',\n        'c:/temp/test9.txt',\n        'c:/temp/test10.txt',\n    ]\n\n    # create threads\n    threads = [Thread(target=replace, args=(filename, 'id', 'ids'))\n            for filename in filenames]\n\n    # start the threads\n    for thread in threads:\n        thread.start()\n\n    # wait for the threads to complete\n    for thread in threads:\n        thread.join()\n\n\nif __name__ == \"__main__\":\n    start_time = perf_counter()\n\n    main()\n\n    end_time = perf_counter()\n    print(f'It took {end_time- start_time :0.2f} second(s) to complete.')\n</code></pre> Output<pre><code>Processing the file c:/temp/test1.txt\nProcessing the file c:/temp/test2.txt\nProcessing the file c:/temp/test3.txt\nProcessing the file c:/temp/test4.txt\nProcessing the file c:/temp/test5.txt\nProcessing the file c:/temp/test6.txt\nProcessing the file c:/temp/test7.txt\nProcessing the file c:/temp/test8.txt\nProcessing the file c:/temp/test9.txt\nProcessing the file c:/temp/test10.txt\nIt took 0.02 second(s) to complete.\n</code></pre></p> <p>Summary</p> <ul> <li>Use the Python <code>threading</code> module to create a multi-threaded application.</li> <li>Use <code>Thread(function, args)</code> to create a new thread.</li> <li>Call the <code>start()</code> method of the <code>Thread</code> class to start the thread.</li> <li>Call the <code>join()</code> method of the <code>Thread</code> class to wait for the thread to complete in the main thread.</li> <li>Only use threading for I/O bound processing applications.</li> </ul>"},{"location":"course/python-concurrency/S01L03-Extending-the-Thread-class/","title":"How to Extend Python Thread Class","text":""},{"location":"course/python-concurrency/S01L03-Extending-the-Thread-class/#introduction-to-python-thread-class","title":"Introduction to Python Thread Class","text":"<p>One way to execute code in a new thread is to extend the <code>Thread</code> class from the <code>threading</code> module and override the <code>run()</code> method in the subclass to customize the behavior of the new thread when it is created.</p> <p>Let's take an example of extending the <code>Thread</code> class. We'll develop a class that performs an HTTP request to a URL and display the response code:</p> <p><pre><code>from threading import Thread\nimport urllib.request\n\n\nclass HttpRequestThread(Thread):\n    def __init__(self, url: str) -&gt; None:\n        super().__init__()\n        self.url = url\n\n    def run(self) -&gt; None:\n        print(f'Checking {self.url} ...')\n        try:\n            response = urllib.request.urlopen(self.url)\n            print(response.code)\n        except urllib.error.HTTPError as e:\n            print(e.code)\n        except urllib.error.URLError as e:\n            print(e.reason)\n\n\ndef main() -&gt; None:\n    urls = [\n        'https://httpstat.us/200',\n        'https://httpstat.us/400'\n    ]\n\n    threads = [HttpRequestThread(url) for url in urls]\n\n    [t.start() for t in threads]\n\n    [t.join() for t in threads]\n\n\nif __name__ == '__main__':\n    main()\n</code></pre> Output<pre><code>Checking https://httpstat.us/200 ...\nChecking https://httpstat.us/400 ...\n200\n400\n</code></pre></p> <p>Summary</p> <ul> <li>Extend the <code>Thread</code> class to run code in a new thread by calling the <code>__init__()</code> method of the superclass in the subclass and override the <code>run</code> method to add the code to run in a new thread.</li> </ul>"},{"location":"course/python-concurrency/S01L04-Returning-values-from-a-Thread/","title":"How to Return Values from a Thread","text":"<p>Sometimes, we want to get the return values from the other threads from the main thread.</p> <p>To return a value from a thread, we extend the <code>Thread</code> class and store that value in the instance of the class.</p> <p>The following example illustrates how to check a specified URL and return its HTTP status code in a separate thread.</p> <pre><code>from threading import Thread\nimport urllib.request\n\n\nclass HttpRequestThread(Thread):\n    def __init__(self, url: str) -&gt; None:\n        super().__init__()\n        self.url = url\n        self.http_status_code = None\n        self.reason = None\n\n    def run(self) -&gt; None:\n        try:\n            # Get the HTTP status code of the specified URL\n            response = urllib.request.urlopen(self.url)\n            # Assigns it to `http_status_code` field.\n            self.http_status_code = response.code\n        except urllib.error.HTTPError as e:\n            self.http_status_code = e.code\n        except urllib.error.URLError as e:\n            self.reason = e.reason\n\n\ndef main() -&gt; None:\n    urls = [\n        'https://httpstat.us/200',\n        'https://httpstat.us/400'\n    ]\n\n    # create new threads\n    threads = [HttpRequestThread(url) for url in urls]\n\n    # start the threads\n    [t.start() for t in threads]\n\n    # wait for the threads to complete\n    [t.join() for t in threads]\n\n    # display the URLs with HTTP status codes\n    [print(f'{t.url}: {t.http_status_code}') for t in threads]\n\n\nif __name__ == '__main__':\n    main()\n</code></pre> Output<pre><code>https://httpstat.us/200: 200\nhttps://httpstat.us/400: 400\n</code></pre> <p>Summary</p> <p>Extend the <code>Thread</code> class and set the instance variables inside the subclass to return the values from a child thread to the main thread.</p>"},{"location":"course/python-concurrency/S01L05-Multithreading-Example/","title":"Python Multithreading Example","text":"<p>We'll develop a multithreaded program that scraps the stock prices from the Yahoo Finance website.</p>"},{"location":"course/python-concurrency/S01L05-Multithreading-Example/#extend-the-thread-class","title":"Extend the <code>Thread</code> class","text":"<p>We define a new class called <code>Stock</code> and place it in <code>stock.py</code> module as follow:</p> stock.py<pre><code>import threading\nimport requests\nfrom lxml import html\n\n\nclass Stock(threading.Thread):\n    def __init__(self, symbol: str) -&gt; None:\n        super().__init__()\n\n        self.symbol = symbol\n        self.url = f\"https://finance.yahoo.com/quote/{symbol}\"\n        self.price = None\n\n    def run(self):\n        # Create a header for the request (1)\n        headers = {\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36\"\n        }\n\n        # Make a request to the URL\n        response = requests.get(self.url, headers=headers)\n\n        # The request is successful (2)\n        if response.status_code == 200:\n            # parse the HTML\n            tree = html.fromstring(response.text)\n            # get the price in text (3)\n            price_text = tree.xpath(\n                '//*[@id=\"nimbus-app\"]/section/section/section/article/section[1]/div[2]/div[1]/section/div/section[1]/div[1]/fin-streamer[1]/span/text()'\n            )\n            # Remove the comma and convert it to a number\n            if price_text:\n                try:\n                    self.price = float(price_text[0].replace(\",\", \"\"))\n                except ValueError:\n                    self.price = None\n\n    def __str__(self):\n        return f\"{self.symbol}\\t{self.price}\"\n</code></pre> <ol> <li>Notice that without valid headers, Yahoo will return 404 instead of 200.</li> <li>In this case, we get the HTML contents from the response and pass it to the <code>fromstring()</code> function of the <code>html</code> module from the <code>xml</code> package.</li> <li> <p>Every element on a webpage can be selected using something called XPath.</p> <p>To get the XPath of an element using Google Chrome, you inspect the page, right-click the element, select Copy, and Copy XPath.</p> <p>The XPath of the stock price at the time of writing this code is as follows. Notice that if Yahoo changes the page structure, we need to change the XPath accordingly. Otherwise, the program won't work as expected.</p> <p>Finally, to get the text of the element, we append the <code>text()</code> at the end of the XPath.</p> </li> </ol>"},{"location":"course/python-concurrency/S01L05-Multithreading-Example/#using-the-stock-class","title":"Using the <code>Stock</code> class","text":"<p>The following <code>main.py</code> module uses <code>Stock</code> class from the <code>stock.py</code> module:</p> main.py<pre><code>from stock import Stock\n\nsymbols = ['MSFT', 'GOOGL', 'AAPL', 'META']\nthreads = []\n\n# Create a thread for each symbol, start it, and append the thread to the thread list\nfor symbol in symbols:\n    t = Stock(symbol)\n    threads.append(t)\n    t.start()\n\n# Wait for all the threads in the threads list to complete and print out the stock price\nfor t in threads:\n    t.join()\n    print(t)\n</code></pre> Output<pre><code>MSFT    402.69\nGOOGL   162.03\nAAPL    213.31\nMETA    509.63\n</code></pre> <p>Summary</p> <p>Define a class that inherits from the <code>threading.Thread</code> class and override the <code>run()</code> method.</p>"},{"location":"course/python-concurrency/S01L06-Daemon-threads/","title":"Python Daemon Threads","text":""},{"location":"course/python-concurrency/S01L06-Daemon-threads/#introduction-to-the-python-daemon-threads","title":"Introduction to the Python daemon threads","text":"<p>Sometimes, you may want to execute a task in the background. To do that you use a special kind of thread called a daemon thread.</p> <p>Definition</p> <p>Daemon threads are background threads. In other words, daemon threads execute tasks in the background.</p> <p>Daemon threads are helpful for executing tasks that support non-daemon threads in the program.</p> <p>Example</p> <ul> <li>Log information to a file in the background</li> <li>Scrap contents from a website in the background</li> <li>Auto-save the data into a database in the background</li> </ul>"},{"location":"course/python-concurrency/S01L06-Daemon-threads/#creating-a-daemon-thread","title":"Creating a daemon thread","text":"<p>Two ways to create a daemon thread:</p> <p><pre><code>t = Thread(target=f, deamon=True)\n</code></pre> <pre><code>t = Thread(target=f)\nt.deamon = True\n</code></pre></p>"},{"location":"course/python-concurrency/S01L06-Daemon-threads/#a-daemon-thread-example","title":"A daemon thread example","text":"<p>The following example shows how to create a non-daemon thread that shows the number of seconds that the program has been waiting for:</p> <pre><code>from threading import Thread\nimport time\n\n\ndef show_timer():\n    count = 0\n    while True:\n        count += 1\n        time.sleep(1)\n        print(f'Has been waiting for {count} second(s)...')\n\n\nt = Thread(target=show_timer)\nt.start()\n\nanswer = input('Do you want to exit?\\n')\n</code></pre> <p>If we run the program, it'll show the following output and run forever.</p> Output<pre><code>Do you want to exit?Has been waiting for 1 second(s)...\nHas been waiting for 2 second(s)...\nHas been waiting for 3 second(s)...\nHas been waiting for 4 second(s)...\nY\nHas been waiting for 5 second(s)...\nHas been waiting for 6 second(s)...\n</code></pre> <p>To terminate the program, you need to kill the terminal.</p> <p>The program runs indefinitely because the thread <code>t</code> is a non-daemon thread. The program needs to wait for all non-daemon threads to complete before it can exit.</p> <p>Now, let's turn the thread into a daemon thread:</p> <pre><code>from threading import Thread\nimport time\n\n\ndef show_timer():\n    count = 0\n    while True:\n        count += 1\n        time.sleep(1)\n        print(f'Has been waiting for {count} second(s)...')\n\n\nt = Thread(target=show_timer, daemon=True)\nt.start()\n\nanswer = input('Do you want to exit?\\n')\n</code></pre> <p>If we run the program, input something, and hit enter, the program will terminate.</p> Output<pre><code>Do you want to exit?\nHas been waiting for 1 second(s)...\nY\n</code></pre> <p>The program terminates because it doesn't need to wait for the daemon thread to complete. Also, the daemon thread is killed automatically when the program exits.</p>"},{"location":"course/python-concurrency/S01L06-Daemon-threads/#daemon-threads-vs-non-daemon-threads","title":"Daemon threads vs. non-daemon threads","text":"<p>The following table illustrates the difference between daemon and non-daemon threads:</p> Daemon Threads Non-daemon Threads Thread creation <code>t = Thread(target=f, daemon=True)</code> <code>t = Thread(target=f)</code> The program needs to wait before exiting  No  Yes Kind of tasks Not critical like logging Critical <p>Summary</p> <ul> <li>A daemon thread is a background thread.</li> <li>A daemon thread is useful for executing tasks that are not critical.</li> <li>The program can exit and doesn't need to wait for the daemon threads to be completed.</li> <li>A daemon thread is automatically killed when the program exits.</li> </ul>"},{"location":"course/python-concurrency/S01L07-Thread-Pools/","title":"Python ThreadPoolExecutor","text":""},{"location":"course/python-concurrency/S01L07-Thread-Pools/#introduction-to-the-python-threadpoolexecutor-class","title":"Introduction to the Python ThreadPoolExecutor class","text":"<p>The <code>Thread</code> class is useful when you want to create threads manually. However, manually managing threads is not efficient because creating and destroying many threads frequently is very expensive in terms of computational costs.</p> <p>Instead, we may want to reuse the threads if we expect to run many ad-hoc tasks in the program.</p> <p>A thread pool allows us to achieve this.</p>"},{"location":"course/python-concurrency/S01L07-Thread-Pools/#thread-pool","title":"Thread pool","text":"<p>A thread pool allows us to automatically manage a pool of threads efficiently.</p> <p></p> <p>Each thread in the pool is called a worker thread or a worker.</p> <p>Definition</p> <p>A thread pool is a \"collection\" of worker threads that are used to execute tasks concurrently.</p> <p>A thread pool allows you to reuse the worker threads once the tasks are completed.</p> <p>Whenever we want a thread we pick one from this pool and delegate a task to it. Once the task is complete, we add the thread back to the thread pool.</p> <p>Example</p> <ul> <li>When a web server spins up, it creates a thread pool of <code>n</code>.</li> <li>When a client connects to the web server, we pick one thread to handle the request.</li> <li>Once the response is generated and sent, the thread is added back to the pool.</li> </ul> <p>Typically, a thread pool allows you to configure the number of worker threads and provides a specific naming convention for each worker thread.</p> <p>To create a thread pool, we use the <code>ThreadPoolExecutor</code> class from the <code>concurrent.futures</code> module.</p>"},{"location":"course/python-concurrency/S01L07-Thread-Pools/#executor","title":"Executor","text":"<p>The <code>Executor</code> class has three methods to control the thread pool:</p> <ul> <li><code>submit()</code>: dispatch a function to be executed and return a <code>Future</code> object. The <code>submit()</code> method takes a function and executes it asynchronously.</li> <li><code>map()</code>: execute a function asynchronously for each element in an iterable.</li> <li><code>shutdown()</code>: shut down the executor.</li> </ul> <p>The <code>ThreadPoolExecutor</code> class extends the <code>Executor</code> class and returns a <code>Future</code> object.</p> <p>When you create a new instance of the <code>ThreadPoolExecutor</code> class, Python starts the <code>Executor</code>.</p> <p>Once we complete working with the executor, we must explicitly call the <code>shutdown()</code> method to release the resources held by the executor. To avoid calling the <code>shutdown()</code> method explicitly, we can use the context manager.</p>"},{"location":"course/python-concurrency/S01L07-Thread-Pools/#future-object","title":"Future object","text":"<p>A <code>Future</code> is an object that represents the eventual result of an asynchronous operation.</p> <p>The <code>Future</code> class has two useful methods:</p> <ul> <li><code>result()</code>: return the result of an asynchronous operation.</li> <li><code>exception()</code>: return the exception of an asynchronous operation in case an exception occurs.</li> </ul>"},{"location":"course/python-concurrency/S01L07-Thread-Pools/#python-threadpoolexecutor-examples","title":"Python <code>ThreadPoolExecutor</code> examples","text":"<p>The following program uses a single thread:</p> <p><pre><code>from time import sleep, perf_counter\n\ndef task(id):\n    print(f'Starting the task {id}...')\n    sleep(1)\n    return f'Done with task {id}'\n\nstart = perf_counter()\n\nprint(task(1))\nprint(task(2))\n\nfinish = perf_counter()\n\nprint(f\"It took {finish-start} second(s) to finish.\")\n</code></pre> Output<pre><code>Starting the task 1...\nDone with task 1\nStarting the task 2...\nDone with task 2\nIt took 2.0144479 second(s) to finish.\n</code></pre></p>"},{"location":"course/python-concurrency/S01L07-Thread-Pools/#using-the-submit-method-example","title":"Using the <code>submit()</code> method example","text":"<pre><code>from time import sleep, perf_counter\nfrom concurrent.futures import ThreadPoolExecutor\n\ndef task(id):\n    print(f'Starting the task {id}...')\n    sleep(1)\n    return f'Done with task {id}'\n\nstart = perf_counter()\n\nwith ThreadPoolExecutor() as executor:  #(1)\n    f1 = executor.submit(task, 1)  #(2)\n    f2 = executor.submit(task, 2)\n\n    print(f1.result())  #(3)\n    print(f2.result())\n\nfinish = perf_counter()\n\nprint(f\"It took {finish-start} second(s) to finish.\")\n</code></pre> <ol> <li>Create a thread pool using the <code>ThreadPoolExecutor</code> using a context manager.</li> <li> <p>Calling the <code>task()</code> function by passing it to the <code>submit()</code> method of the executor. The <code>submit()</code> method returns a <code>Future</code> object.</p> <p>In this example, we have two <code>Future</code> objects: <code>f1</code> and <code>f2</code>.</p> </li> <li> <p>To get the result from the <code>Future</code> object, we called its <code>result()</code> method.</p> </li> </ol> Output<pre><code>Starting the task 1...\nStarting the task 2...\nDone with task 1\nDone with task 2\nIt took 1.0177214 second(s) to finish.\n</code></pre>"},{"location":"course/python-concurrency/S01L07-Thread-Pools/#using-the-map-method-example","title":"Using the <code>map()</code> method example","text":"<pre><code>from time import sleep, perf_counter\nfrom concurrent.futures import ThreadPoolExecutor\n\n\ndef task(id):\n    print(f'Starting the task {id}...')\n    sleep(1)\n    return f'Done with task {id}'\n\nstart = perf_counter()\n\nwith ThreadPoolExecutor() as executor:\n    results = executor.map(task, [1, 2])  #(1)\n    for result in results:  #(2)\n        print(result)\n\nfinish = perf_counter()\n\nprint(f\"It took {finish-start} second(s) to finish.\")\n</code></pre> <ol> <li>Run the <code>task()</code> function for each <code>id</code> in the list <code>[1, 2]</code>. The <code>map()</code> method returns an iterator that contains the result of the function calls.</li> <li>Iterate over the results and print them out.</li> </ol>"},{"location":"course/python-concurrency/S01L07-Thread-Pools/#python-threadpoolexecutor-practical-example","title":"Python <code>ThreadPoolExecutor</code> practical example","text":"<p>The following program downloads multiple images from Wikipedia using a thread pool:</p> <pre><code>from concurrent.futures import ThreadPoolExecutor\nfrom urllib.request import urlopen\nimport time\nimport os\n\ndef download_image(url):  #(1)\n    image_data = None\n    with urlopen(url) as f:\n        image_data = f.read()\n\n    if not image_data:\n        raise Exception(f\"Error: could not download the image from {url}\")\n\n    filename = os.path.basename(url)\n    with open(filename, 'wb') as image_file:\n        image_file.write(image_data)\n        print(f'{filename} was downloaded...')\n\nstart = time.perf_counter()\n\nurls = ['https://upload.wikimedia.org/wikipedia/commons/9/9d/Python_bivittatus_1701.jpg',\n        'https://upload.wikimedia.org/wikipedia/commons/4/48/Python_Regius.jpg',\n        'https://upload.wikimedia.org/wikipedia/commons/d/d3/Baby_carpet_python_caudal_luring.jpg',\n        'https://upload.wikimedia.org/wikipedia/commons/f/f0/Rock_python_pratik.JPG',\n        'https://upload.wikimedia.org/wikipedia/commons/0/07/Dulip_Wilpattu_Python1.jpg']\n\nwith ThreadPoolExecutor() as executor: #(2)\n      executor.map(download_image, urls)\n\nfinish = time.perf_counter()    \n\nprint(f'It took {finish-start} second(s) to finish.')\n</code></pre> <ol> <li>Define a function <code>download_image()</code> that downloads an image from an URL and saves it into a file.</li> <li>Execute the <code>download_image()</code> function using a thread pool by calling the <code>map()</code> method of the <code>ThreadPoolExecutor</code> object.</li> </ol> <p>Summary</p> <ul> <li>A thread pool is a pattern for managing multiple threads efficiently.</li> <li>Use <code>ThreadPoolExecutor</code> class to manage a thread pool in Python.</li> <li>Call the <code>submit()</code> method of the <code>ThreadPoolExecutor</code> to submit a task to the thread pool execution. The <code>submit()</code> method returns a <code>Future</code> object.</li> <li>Call the <code>map()</code> method of the <code>ThreadPoolExecutor</code> class to execute a function in a thread pool with each element in a list.</li> </ul>"},{"location":"course/python-concurrency/S02L01-Lock/","title":"How to use the Python Threading Lock to Prevent Race Conditions","text":""},{"location":"course/python-concurrency/S02L01-Lock/#what-is-a-race-condition","title":"What is a race condition","text":"<p>A race condition occurs when two or more threads try to access a shared variable simultaneously, leading to unpredictable outcomes.</p> <p>Example</p> <p>The following example illustrates a race condition:</p> <pre><code>from threading import Thread\nfrom time import sleep\n\ncounter = 0\n\ndef increase(by):\n    global counter\n\n    local_counter = counter\n    local_counter += by\n\n    sleep(0.1)  #(1)\n\n    counter = local_counter\n    print(f'counter={counter}')\n\n# create threads\nt1 = Thread(target=increase, args=(10,))  #(2)\nt2 = Thread(target=increase, args=(20,))  #(3)\n\n# start the threads\nt1.start()\nt2.start()\n\n# wait for the threads to complete\nt1.join()\nt2.join()\n\nprint(f'The final counter is {counter}')\n</code></pre> <ol> <li>Sleep to ensure that when both threads start, the <code>counter</code> still <code>0</code>.</li> <li>Increase the <code>counter</code> by <code>10</code>.</li> <li>Increase the <code>counter</code> by <code>20</code>.</li> </ol> <p>If the thread <code>t1</code> completes before the thread <code>t2</code>, we'll see the following output:</p> Output<pre><code>counter=10\ncounter=20\nThe counter is 20\n</code></pre> <p>Otherwise, we'll see the following output:</p> Output<pre><code>counter=20\ncounter=10\nThe final counter is 10\n</code></pre>"},{"location":"course/python-concurrency/S02L01-Lock/#using-a-threading-lock-to-prevent-the-race-condition","title":"Using a threading lock to prevent the race condition","text":"<p>A thread lock is a synchronization primitive that provides exclusive access to a shared resource in a multithreaded application. A thread lock is also known as a mutex which is short for mutual exclusion.</p> <p>A threading lock has two states: locked and unlocked.</p> <p>When a thread acquires a lock, the lock enters the locked state. The thread can have exclusive access to the shared resource. Other threads that attemp to acquire the lock while it is locked will be blocked and wait until the lock is released.</p> <p>In Python, we can use the <code>Lock</code> class from the <code>threading</code> module to create a lock object:</p> <p>First, create an instance of the <code>Lock</code> class:</p> <pre><code>lock = Lock()\n</code></pre> <p>Second, acquire a lock by calling the <code>acquire()</code> method.</p> <pre><code>lock.acquire()\n</code></pre> <p>Third, release the lock once the thread completes changing the shared variable:</p> <pre><code>lock.release()\n</code></pre> <p>Example</p> <p>The following example shows how to use the <code>Lock</code> object to prevent the race condition in the previous program:</p> <pre><code>from threading import Thread, Lock\nfrom time import sleep\n\ncounter = 0\n\ndef increase(by, lock):\n    global counter\n\n    lock.acquire()  #(1)\n\n    local_counter = counter\n    local_counter += by\n\n    sleep(0.1)\n\n    counter = local_counter\n    print(f'counter={counter}')\n\n    lock.release()  #(2)\n\nlock = Lock()\n\n# create threads\nt1 = Thread(target=increase, args=(10, lock))\nt2 = Thread(target=increase, args=(20, lock))\n\n# start the threads\nt1.start()\nt2.start()\n\n# wait for the threads to complete\nt1.join()\nt2.join()\n\nprint(f'The final counter is {counter}')\n</code></pre> <ol> <li>Acquire a lock before accessing the <code>counter</code> variable.</li> <li>Release the lock after updating the new value for the <code>counter</code>.</li> </ol>"},{"location":"course/python-concurrency/S02L01-Lock/#using-the-threading-lock-with-the-with-statement","title":"Using the threading lock with the <code>with</code> statement","text":"<p>It's easier to use the lock object with the <code>with</code> statement to acquire and release the lock within a block of code:</p> <pre><code>import threading\n\n# Create a lock object\nlock = threading.Lock()\n\n# Perform some operations within a critical section\nwith lock:\n    # Lock was acquired within the with block\n    # Perform operations on the shared resource\n    # ...\n\n# the lock is released outside the with block\n</code></pre> <p>Example</p> <pre><code>from threading import Thread, Lock\nfrom time import sleep\n\ncounter = 0\n\ndef increase(by, lock):\n    global counter\n\n    with lock:\n        local_counter = counter\n        local_counter += by\n\n        sleep(0.1)\n\n        counter = local_counter\n        print(f'counter={counter}')\n\nlock = Lock()\n\n# create threads\nt1 = Thread(target=increase, args=(10, lock))\nt2 = Thread(target=increase, args=(20, lock))\n\n# start the threads\nt1.start()\nt2.start()\n\n# wait for the threads to complete\nt1.join()\nt2.join()\n\nprint(f'The final counter is {counter}')\n</code></pre> <p>Summary</p> <ul> <li>A race condition occurs when two threads access a shared variable at the same time.</li> <li>Use a threading lock object to prevent the race condition.</li> <li>Call the <code>acquire()</code> method of a lock object to acquire a lock.</li> <li>Call the <code>release()</code> method of a lock object to release the previous acquired lock.</li> <li>Use a threading lock object with the <code>with</code> statement to make it easier to acquire and release the lock.</li> </ul>"},{"location":"course/python-concurrency/S02L02-Event/","title":"Python Threading Event","text":""},{"location":"course/python-concurrency/S02L02-Event/#introduction-to-the-python-threading-event-object","title":"Introduction to the Python threading Event object","text":"<p>Python provides a way to communicate between threads using the <code>Event</code> class from the <code>threading</code> module. One thread signals an event while other threads wait for it.</p> <p>The <code>Event</code> object wraps a boolean flag that can be set (<code>True</code>) or cleared (<code>False</code>). Multiple threads can wait for an <code>Event</code> to be set before proceeding or can reset the <code>Evetn</code> back to the cleared state.</p> <p>To use the <code>Event</code> object, first, import the <code>Event</code> from the <code>threading</code> module:</p> <pre><code>from threading import Event\n</code></pre> <p>Next, create a new <code>Event</code> object:</p> <pre><code>event = Event()\n</code></pre> <p>By default, the event is not set (cleared). The <code>is_set()</code> method of the event object will return <code>False</code>:</p> <pre><code>if event.is_set():\n   # ...\n</code></pre> <p>Then, set an event using the <code>set()</code> method:</p> <pre><code>event.set()\n</code></pre> <p>Once an event is set, all the threads that wait on the event will be notified automatically.</p> <p>After that, unset an event via the <code>clear()</code> method:</p> <pre><code>event.clear()\n</code></pre> <p>Finally, threads can wait for the event to be set via the <code>wait()</code> method:</p> <pre><code>event.wait()\n</code></pre> <p>The <code>wait()</code> method blocks the execution of a thread until the event is set. In other words, the <code>wait()</code> method will block the current thread until another thread call the <code>set()</code> method to set the event.</p> <p>If an event is set, the <code>wait()</code> method returns immediately.</p> <p>To specify how long the thread is going to wait, we can use the <code>timeout</code> argument.</p> <p>Example</p> <p>The following example shows a simple example of using the <code>Event</code> object to communicate between threads:</p> <pre><code>from threading import Thread, Event\nfrom time import sleep\n\n\ndef task(event: Event, id: int) -&gt; None:\n    print(f\"Thread {id} started. Waiting for the signal....\")\n    event.wait()  #(1)\n    print(f\"Received signal. The thread {id} was completed.\")  #(2)\n\n\ndef main() -&gt; None:\n    event = Event()\n\n    t1 = Thread(target=task, args=(event, 1))\n    t2 = Thread(target=task, args=(event, 2))\n\n    t1.start()\n    t2.start()\n\n    print(\"Blocking the main thread for 3 seconds...\")\n    sleep(3)\n    event.set()  #(3)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <ol> <li> <p>We call the <code>wait()</code> method of the <code>event</code> object to wait for the event to be set by the main thread.</p> <p>The <code>wait()</code> method blocks the thread until the event is set.</p> </li> <li> <p>After the event is set by the main thread, the <code>wait()</code> method returns immediately. The thread continue running.</p> </li> <li>The main thread set the event. Both <code>t1</code> and <code>t2</code> threads will be notified and continue executing until the end.</li> </ol> Output<pre><code>Thread 1 started. Waiting for the signal....\nThread 2 started. Waiting for the signal....\nBlocking the main thread for 3 seconds...\nReceived signal. The thread 1 was completed.\nReceived signal. The thread 2 was completed.\n</code></pre> <p>We'll learn how to use the <code>Event</code> object to stop a child thread from the main thread in the next lecture.</p>"},{"location":"course/python-concurrency/S02L02-Event/#practical-example-of-using-threading-event","title":"Practical example of using Threading event","text":"<p>Example</p> <p>The following example illustrates how to use the threading event to synchronize between two threads:</p> <ul> <li>Thread #1 downloads a text file from URL <code>https://www.ietf.org/rfc/rfc2821.txt</code>, once completed, it notifies the second thread to count the words from the downloaded text file.</li> <li>Thread #2 starts and wait for the completed signal from the thread #1. Once, receiving the signal, it starts counting the words from the downloaded file.</li> </ul> <p>Here's the complete program:</p> <pre><code>from threading import Thread, Event\nfrom urllib import request\n\n\ndef download_file(url: str, event: Event):\n    # Download the file form URL\n    print(f\"Downloading file from {url}...\")\n    filename, _ = request.urlretrieve(url, url.split(\"/\")[-1])\n\n    # File download completed, set the event\n    event.set()\n\n\ndef process_file(event: Event):\n    print(\"Waiting for the file to be downloaded...\")\n    event.wait()  # Wait for the event to be set\n\n    # File has been downloaded, start processing it\n    print(\"File download completed. Starting file processing...\")\n\n    # Count the number of words in the file\n    word_count = 0\n    with open(\"rfc2821.txt\", \"r\") as file:\n        for line in file:\n            words = line.split()\n            word_count += len(words)\n\n    # Print the word count\n    print(f\"Number of words in the file: {word_count}\")\n\n\ndef main():\n    # Create an Event object\n    event = Event()\n\n    # Create and start the file download thread\n    download_thread = Thread(\n        target=download_file,\n        args=(\"https://www.ietf.org/rfc/rfc2821.txt\", event)\n    )\n\n    download_thread.start()\n\n    # Create and start the file processing thread\n    process_thread = Thread(target=process_file, args=(event,))\n    process_thread.start()\n\n    # Wait for both threads to complete\n    download_thread.join()\n    process_thread.join()\n\n    print(\"Main thread finished.\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Summary</p> <ul> <li>Use the <code>threading.Event</code> class to communicate between threads.</li> <li>Use the <code>set()</code> method to set the event and <code>clear()</code> method to unset the event.</li> <li>Use the <code>is_set()</code> method to check if an event is set.</li> <li>Use the <code>wait()</code> method to wait for the event to be set.</li> </ul>"},{"location":"course/python-concurrency/S02L03-How-to-stop-a-thread/","title":"How to Stop a Thread in Python","text":""},{"location":"course/python-concurrency/S02L03-How-to-stop-a-thread/#introduction-to-the-event-object","title":"Introduction to the Event object","text":"<p>To stop a child thread from the main thread, you use an <code>Event</code> object with the following steps:</p> <ul> <li>First, create a new <code>Event</code> object and pass it to a child thread.</li> <li>Second, periodically check if the internal flag of the <code>Event</code> object is set in the child thread by calling the <code>is_set()</code> method and stop the child thread if the internal flag was set.</li> <li>Third, call the <code>set()</code> method in the main thread at some point in time to stop the child thread.</li> </ul> <p>The following flow chart illustrates the above steps:</p>"},{"location":"course/python-concurrency/S02L03-How-to-stop-a-thread/#a-simple-example-of-stopping-a-thread-in-python","title":"A simple example of stopping a thread in Python","text":"<p>Example</p> <pre><code>from threading import Thread, Event\nfrom time import sleep\n\n\ndef task(event: Event) -&gt; None:\n    for i in range(6):\n        print(f\"Running #{i+1}\")\n        sleep(1)\n        if event.is_set():\n            print(\"The thread was stopped prematurely.\")\n            break  #(1)\n    else:\n        print(\"The thread was stopped maturely.\")\n\n\ndef main() -&gt; None:\n\n    event = Event()\n    thread = Thread(target=task, args=(event,))\n\n    # start the thread\n    thread.start()\n\n    # suspend\u00a0 the thread after 3 seconds\n    sleep(3)  #(2)\n\n    # stop the child thread\n    event.set()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <ol> <li>Stop the thread whenever the event is set.</li> <li> <p>The main thread set the event after 3 seconds.</p> <p>After the event is set, the child thread will be notified and break the loop.</p> </li> </ol>"},{"location":"course/python-concurrency/S02L03-How-to-stop-a-thread/#stopping-a-thread-that-uses-a-child-class-of-the-thread-class","title":"Stopping a thread that uses a child class of the <code>Thread</code> class","text":"<p>Sometimes, we may want to extend the <code>Thread</code> class and override the <code>run()</code> method for creating a new thread:</p> <pre><code>class MyThread(Thread):\n    def run(self):\n        pass\n</code></pre> <p>Example</p> <pre><code>from threading import Thread, Event\nfrom time import sleep\n\nclass Worker(Thread):\n    def __init__(self, event, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.event = event\n\n    def run(self) -&gt; None:\n        for i in range(6):\n            print(f'Running #{i+1}')\n            sleep(1)\n            if self.event.is_set():\n                print('The thread was stopped prematurely.')\n                break\n        else:\n            print('The thread was stopped maturely.')\n\ndef main() -&gt; None:\n\n    # create a new Event object\n    event = Event()\n\n    # create a new Worker thread\n    thread = Worker(event)\n\n    # start the thread\n    thread.start()\n\n    # suspend\u00a0 the thread after 3 seconds\n    sleep(3)\n\n    # stop the child thread\n    event.set()    \n\n\nif __name__ == '__main__':\n    main()\n</code></pre> <p>Summary</p> <ul> <li>Use the <code>Event</code> object to stop a child thread.</li> <li>Use the <code>set()</code> method to set an internal flag of an <code>Event</code> object to <code>True</code>.</li> <li>Use <code>is_set()</code> method to check if the internal flag of an <code>Event</code> object was set.</li> </ul>"},{"location":"course/python-concurrency/S02L04-Semaphore/","title":"Python Semaphore","text":""},{"location":"course/python-concurrency/S02L04-Semaphore/#introduction-to-the-python-semaphore","title":"Introduction to the Python Semaphore","text":"<p>A Python semaphore is a synchronization primitive that allows to control access to a shared resource.</p> <p>A semaphore maintains a count. When a thread wants to access the shared resource, the semaphore checks the count.</p> <p>A semaphore has two main operations:</p> <ul> <li>Acquire: checks the count and decreses it if it is greater than zero. If the count is zero, the semaphore will block the thread until another thread releases the semaphore.</li> <li>Release: increments the count that allow other threads to acquire it.</li> </ul>"},{"location":"course/python-concurrency/S02L04-Semaphore/#using-a-python-semaphore","title":"Using a Python semaphore","text":"<p>Example</p> <pre><code>import threading\nimport time\nimport random\n\nMAX_CONCURRENT_THREAD = 3\nsemaphore = threading.Semaphore(MAX_CONCURRENT_THREAD)  #(1)\n\n\ndef task(id):\n    with semaphore:  #(2)\n        print(\"Performing task\", id)\n        time.sleep(3 + random.random())  # Simulate some work\n        print(\"Finish task\", id)\n\n\nif __name__ == \"__main__\":\n    threads = []\n\n    for i in range(10):\n        t = threading.Thread(target=task, args=(i,))\n        threads.append(t)\n        t.start()\n\n    [t.join() for t in threads]\n</code></pre> <ol> <li>Create a <code>Semaphore</code> object that only allows up to three threads to acquire it at the same time.</li> <li>Use context manager to ensure a semaphore is properly acquired and released, even if exceptions occur during running the critical section of a code.</li> </ol> Output<pre><code>Performing task 0\nPerforming task 1\nPerforming task 2\nFinish task 1\nPerforming task 3\nFinish task 2\nPerforming task 4\nFinish task 0\nPerforming task 5\nFinish task 4\nPerforming task 6\nFinish task 3\nPerforming task 7\nFinish task 5\nPerforming task 8\nFinish task 6\nPerforming task 9\nFinish task 7\nFinish task 8\nFinish task 9\n</code></pre> <p>The output shows that only a maximum of three threads can be executed at the same time.</p> semaphore vs thread pool <ul> <li>Semaphore is about access control to resources.</li> <li>Thread pool is about task management and parallel execution.</li> </ul> <p>Summary</p> <ul> <li>Use Python semaphore to control the number of threads that can access a shared resource simultaneously.</li> </ul>"},{"location":"course/python-concurrency/S03L01-Thread-safe-Queue/","title":"Python Thread-safe Queue","text":"<p>Example</p> <pre><code>from threading import Thread\nfrom queue import Queue, Empty\nimport time\n\n\ndef producer(queue):\n    for i in range(10):\n        print(\"New task\", i)\n        queue.put(i)  #(2)\n        time.sleep(1)\n\n\ndef consumer(queue):\n    while True:\n        try:\n            item = queue.get()  #(3)\n        except Empty:\n            continue\n        else:\n            print(\"Processing task\", item)\n            time.sleep(2)\n            queue.task_done()  #(4)\n\n\nif __name__ == \"__main__\":\n    queue = Queue()  #(1)\n\n    # Create a producer thread and start it\n    producer_thread = Thread(\n        target=producer,\n        args=(queue,),\n    )\n    producer_thread.start()\n\n    # Create a consumer thread and start it\n    consumer_thread = Thread(\n        target=consumer,\n        args=(queue,),\n        daemon=True,  #(6)\n    )\n    consumer_thread.start()\n\n    # Wait for all tasks to be added to the queue\n    producer_thread.join()\n\n    # Wait for all tasks on the queue to be completed (5)\n    queue.join()\n</code></pre> <ol> <li> <p>Create a new queue.</p> <p>To create a queue with a size limit, we can use the <code>maxsize</code> parameter.</p> <p>Example</p> <pre><code>queue = Queue(maxsize=10)\n</code></pre> </li> <li> <p>To add an item to the queue, we use the <code>put()</code> method.</p> <p>Once the queue is full, we won't be able to add an item to it. Also, the call to the <code>put()</code> method will block until the queue has space available.</p> <p>If we don't want the <code>put()</code> method to block if the queue is full, set the <code>block</code> argument to <code>False</code>:</p> <pre><code>queue.put(item, block=False)\n</code></pre> <p>In this case, the <code>put()</code> method will raise the <code>queue.Full</code> exception if the queue is full.</p> <p>To add an item to a sized limited queue and block with a timeout, we can use the <code>timeout</code> parameter.</p> <pre><code>try:\n    queue.put(item, timeout=3)\nexcept queue.Full as e:\n    # handle exceptoin\n</code></pre> </li> <li> <p>To get an item from the queue, we can use the <code>get()</code> method.</p> <p>The <code>get()</code> method will block until an item is available for retrieval from the queue.</p> <p>To get an item from the queue without blocking, we can set the <code>block</code> parameter to <code>False</code>.</p> <p>To get an item from the queue and block it with a time limit, we can use the <code>get()</code> method with a <code>timeout</code>.</p> <pre><code>try:\n    item = queue.get(timeout=10)\nexcept queue.Empty:\n    # ...\n</code></pre> </li> <li> <p>An item that we add to the queue represents a unit of work or a task.</p> <p>When a thread calls the <code>get()</code> method to get the item from the queue, it may need to process it before the task is considered completed.</p> <p>Once completed, the thread may call the <code>task_done()</code> method of the queue to indicate that it has processed the task completely.</p> </li> <li> <p>To wait for all tasks on the queue to be completed, we can call the <code>join()</code> method on the queue object.</p> </li> <li> <p>The consumer continue getting tasks from the queue until all the tasks are done.</p> </li> </ol> Output<pre><code>New task 0\nProcessing task 0\nNew task 1\nProcessing task 1\nNew task 2\nNew task 3\nProcessing task 2\nNew task 4\nNew task 5\nProcessing task 3\nNew task 6\nNew task 7\nProcessing task 4\nNew task 8\nNew task 9\nProcessing task 5\nProcessing task 6\nProcessing task 7\nProcessing task 8\nProcessing task 9\n</code></pre>"},{"location":"course/python-concurrency/S04L01-Multiprocessing/","title":"Python Multiprocessing","text":"<p>Multiprocessing allows two or more processors to simultaneously process two or more different parts of a program.</p> <p>In Python, we use the <code>multiprocessing</code> module to implement multiprocessing.</p> <p>Example</p> <pre><code>import time\nimport multiprocessing\n\n\ndef task() -&gt; int:\n    result = 0\n    for _ in range(10**8):\n        result += 1\n    return result\n\n\nif __name__ == \"__main__\":\n    start = time.perf_counter()\n\n    # Create two processes and pass the task function to each (1)\n    p1 = multiprocessing.Process(target=task)\n    p2 = multiprocessing.Process(target=task)\n\n    # Start the processes\n    p1.start()\n    p2.start()\n\n    # Wait for the processes to complete\n    p1.join()\n    p2.join()\n\n    finish = time.perf_counter()\n    print(f\"It took {finish-start:.2f} second(s) to finish\")\n</code></pre> <ol> <li>Note that the <code>Process()</code> constructor returns a new <code>Process</code> object.</li> </ol> Output<pre><code>It took 2.29 second(s) to finish\n</code></pre> <p>Summary</p> <ul> <li>Use Python multiprocessing to run code in parallel to deal with CPU-bound tasks.</li> </ul>"},{"location":"course/python-concurrency/S04L02-Process-Pools/","title":"Python ProcessPoolExecutor","text":"<p>Like a thread pool, a process pool is a pattern for managing processes automatically.</p> <p>The <code>ProcessPoolExecutor</code> class from the <code>concurrent.futures</code> module allows to create and manage a process pool.</p> <p>The <code>ProcessPoolExecutor</code> extends the <code>Executor</code> class that has three methods:</p> <ul> <li><code>submit()</code>: dispatch a function to be executed and return a <code>Future</code> object. The <code>submit()</code> method takes a function and executes it asynchronously.</li> <li><code>map()</code>: execute a function asynchronously for each element in an iterable.</li> <li><code>shutdown()</code>: shut down the executor.</li> </ul> <p>To release the resources held by the executor, we need to call the <code>shutdown()</code> method explicitly. To shut down the executor automatically, we can use a context manager.</p> <p>A <code>Future</code> is an object that represents the eventual result of an asynchronous operation.</p> <p>The <code>Future</code> class has two useful methods:</p> <ul> <li><code>result()</code>: return the result of an asynchronous operation.</li> <li><code>exception()</code>: return the exception of an asynchronous operation in case an exception occurs.</li> </ul> <p>Example</p> <pre><code>import time\nimport os\nfrom PIL import Image, ImageFilter\n\nfrom concurrent.futures import ProcessPoolExecutor\n\nfilenames = [\n    'images/1.jpg',\n    'images/2.jpg',\n    'images/3.jpg',\n    'images/4.jpg',\n    'images/5.jpg',\n]\n\ndef create_thumbnail(filename, size=(50,50), thumb_dir ='thumbs'):\n    # open the image\n    img = Image.open(filename)\n\n    # apply the gaussian blur filter\n    img = img.filter(ImageFilter.GaussianBlur())\n\n    # create a thumbnail\n    img.thumbnail(size)\n\n    # save the image\n    img.save(f'{thumb_dir}/{os.path.basename(filename)}')\n\n    # display a message\n    print(f'{filename} was processed...')\n\ndef main():\n    start = time.perf_counter()\n\n    # Create a process pool\n    with ProcessPoolExecutor() as executor:\n        executor.map(create_thumbnail, filenames)\n\n    finish = time.perf_counter()\n\n    print(f'It took {finish-start: .2f} second(s) to finish')\n\nif __name__ == '__main__':\n    main()\n</code></pre> <p>Summary</p> <ul> <li>Use the Python <code>ProcessPoolExecutor</code> class t o create and manage a process pool automatically.</li> </ul>"},{"location":"course/python-concurrency/S05L01-Understanding-Event-Loop/","title":"Python Event Loop","text":"<p>Summary</p> <ul> <li> <p>The event loop is responsible for getting tasks from an event queue and handling it.</p> <p> </p> </li> <li> <p>The <code>asyncio</code> package uses an event loop to achieve a single-threaded concurrency model.</p> </li> </ul>"},{"location":"course/python-concurrency/S05L02-async-await/","title":"Python <code>async</code>/<code>await</code>","text":""},{"location":"course/python-concurrency/S05L02-async-await/#introduction-to-python-coroutines","title":"Introduction to Python coroutines","text":"<p>A coroutine is a regular function with the ability to pause its execution when encoutering an operation that may take a while to complete.</p> <p>When the long-running operation completes, we can resume the paused coroutine and execute the remaining code in that coroutine.</p> <p>While the coroutine is waiting for the long-running operation, we can run other code. By doing this, we can run the program asynchronously to improve its performance.</p> <p>To create and pause a coroutine, we use the Python <code>async</code> and <code>await</code> keywords.</p>"},{"location":"course/python-concurrency/S05L02-async-await/#defining-and-pausing-a-coroutine-with-python-asyncawait-keyword","title":"Defining and pausing a coroutine with Python <code>async</code>/<code>await</code> keyword","text":"<p>Example</p> <pre><code>import asyncio\n\n\nasync def square(number: int) -&gt; int:\n    return number*number\n\n\nasync def main() -&gt; None:\n    x = await square(10)  #(1)\n    print(f'x={x}')\n\n    y = await square(5)  #(2)\n    print(f'y={y}')\n\n    print(f'total={x+y}')  # Display the total\n\nif __name__ == '__main__':\n    asyncio.run(main())\n</code></pre> <ol> <li> <p>Call the <code>square()</code> coroutine using the <code>await</code> keyword. The <code>await</code> keyword will pause the execution of the <code>main()</code> coroutine, wait for the <code>square()</code> coroutine to complete, and return the result.</p> </li> <li> <p>Call the <code>square()</code> coroutine a second time using the <code>await</code> keyword.</p> </li> </ol> <p>This program executes like a synchronous program. It doesn't reveal the power of the asynchronous programming model.</p> <p>Summary</p> <ul> <li>A coroutine is a regular function with the power of pausing a long-running operation, waiting for the result, and resuming from paused point.</li> <li>Use <code>async</code> keyword to define a coroutine.</li> <li>Use <code>await</code> keyword to pause a coroutine.</li> <li>Use <code>asyncio.run()</code> function to automatically execute a coroutine on an event loop and manage an event loop.</li> </ul>"},{"location":"course/python-concurrency/S05L03-Creating-tasks/","title":"Python <code>asyncio.create_task()</code>","text":""},{"location":"course/python-concurrency/S05L03-Creating-tasks/#simulating-a-long-running-operation","title":"Simulating a long-running operation","text":"<p>To simulate a long-running operation, we can use the <code>sleep()</code> coroutine of the <code>asyncio</code> package:</p> <pre><code>await asyncio.sleep(seconds)\n</code></pre> <p>Because <code>sleep()</code> is a coroutine, we need to use the <code>await</code> keyword.</p> <p>Example</p> <p>The following uses the <code>sleep()</code> coroutine to simulate an API call:</p> <pre><code>import asyncio\nimport time\n\n\nasync def call_api(message, result=1000, delay=3):\n    print(message)\n    await asyncio.sleep(delay)\n    return result\n\n\nasync def main():\n    start = time.perf_counter()  # Start a timer\n\n    price = await call_api('Get stock price of GOOG...', 300)\n    print(price)\n\n    price = await call_api('Get stock price of APPL...', 400)\n    print(price)\n\n    end = time.perf_counter()\n    print(f'It took {round(end-start,0)} second(s) to complete.')\n\nasyncio.run(main())\n</code></pre> <p>Because each <code>call_api()</code> takes three seconds, and calling it twice takes six seconds.</p> Output<pre><code>Get stock price of GOOG...\n300\nGet stock price of APPL...\n400\nIt took 6.0 second(s) to complete.\n</code></pre> <p>In this example, we call a coroutine directly and don't put it on the event loop to run. Instead, we get a coroutine object and use the <code>await</code> keyword to execute it and get a result.</p> <p>The following picture illustrates the execution flow of the program:</p> <p></p> <p>In other words, we use <code>async</code> and <code>await</code> to write asynchronous code but can't run it concurrently.</p> <p>To run multiple operations concurrently, we'll need to use something called tasks.</p>"},{"location":"course/python-concurrency/S05L03-Creating-tasks/#introduction-to-python-tasks","title":"Introduction to Python tasks","text":"<p>A tasks is a wrapper of a coroutine that schedules the coroutine to run on the event loop as soon as possible.</p> <p>To create a task, we pass a coroutine to the <code>create_task()</code> function of the <code>asyncio</code> package. The <code>create_task()</code> function returns a <code>Task</code> object.</p> <p>Example</p> <pre><code>import asyncio\nimport time\n\n\nasync def call_api(message, result=1000, delay=3):\n    print(message)\n    await asyncio.sleep(delay)\n    return result\n\n\nasync def main():\n    start = time.perf_counter()\n\n    task_1 = asyncio.create_task(\n        call_api('Get stock price of GOOG...', 300)\n    )\n\n    task_2 = asyncio.create_task(\n        call_api('Get stock price of APPL...', 300)\n    )\n\n    price = await task_1\n    print(price)\n\n    price = await task_2\n    print(price)\n\n    end = time.perf_counter()\n    print(f'It took {round(end-start,0)} second(s) to complete.')\n\n\nasyncio.run(main())\n</code></pre> Output<pre><code>Get stock price of GOOG...\nGet stock price of APPL...\n300\n300\nIt took 3.0 second(s) to complete.\n</code></pre>"},{"location":"course/python-concurrency/S05L03-Creating-tasks/#running-other-tasks-while-waiting","title":"Running other tasks while waiting","text":""},{"location":"course/python-oop/","title":"Python Concurrency","text":"<p>For more information on the course, visit the original source here.</p> <p>Abstract</p> <p>By the end of this Python OOP module, we'll have good knowledge of object-oriented principles. And we\u2019ll know how to use Python syntax to create reliable and robust software applications.</p> <p>What we\u2019ll learn:</p> <ul> <li>Create objects in Python by defining classes and methods.</li> <li>Extend classes using inheritance.</li> <li>SOLID principles in object-oriented programming.</li> </ul> <p>Alert</p> <p>Some of the OOP concepts introduced in the original source are already familiar to me, so I might skip those in this course. The bottom line is that this is my notebook, not a textbook.</p>"},{"location":"course/python-oop/#section-1-classes-and-objects","title":"Section 1. Classes and objects","text":"<ul> <li>Lecture 1. Object-oriented programming</li> <li>Lecture 2. Class</li> <li>Lecture 3. Class variables</li> <li>Lecture 4. Instance methods</li> <li>Lecture 5. <code>__init__()</code></li> <li>Lecture 6. Instance variables</li> <li>Lecture 7. Private attributes</li> <li>Lecture 8. Class attributes</li> <li>Lecture 9. Class methods</li> <li>Lecture 10. Static methods</li> <li>Section Summary - Classes and objects</li> </ul>"},{"location":"course/python-oop/#section-2-special-methods","title":"Section 2. Special methods","text":"<ul> <li>Section Summary - Special methods</li> </ul>"},{"location":"course/python-oop/#section-3-property","title":"Section 3. Property","text":"<ul> <li>Lecture 1. Property</li> <li>Lecture 2. <code>@property</code> decorator</li> <li>Lecture 3. Read-only property</li> <li>Lecture 4. Delete a property</li> <li>Section Summary - Property</li> </ul>"},{"location":"course/python-oop/#section-4-single-inheritance","title":"Section 4. Single inheritance","text":""},{"location":"course/python-oop/#section-5-enumeration","title":"Section 5. Enumeration","text":""},{"location":"course/python-oop/#section-6-solid-principles","title":"Section 6. SOLID principles","text":""},{"location":"course/python-oop/#section-7-multiple-inheritance","title":"Section 7. Multiple inheritance","text":""},{"location":"course/python-oop/#section-8-descriptors","title":"Section 8. Descriptors","text":""},{"location":"course/python-oop/#section-9-metaprogramming","title":"Section 9. Metaprogramming","text":""},{"location":"course/python-oop/#section-10-exceptions","title":"Section 10. Exceptions","text":""},{"location":"course/python-oop/S01L01-Object-oriented-programming/","title":"Python Object-oriented Programming","text":""},{"location":"course/python-oop/S01L02-Class/","title":"Python Class","text":"<p>Summary</p> <ul> <li>An object is container that contains state and behavior.</li> <li>A class is a blueprint for creating objects.</li> <li>In Python, a class is also an object, which is an instance of the <code>type</code>.</li> </ul>"},{"location":"course/python-oop/S01L03-Class-variables/","title":"Python Class Variables","text":""},{"location":"course/python-oop/S01L03-Class-variables/#introduction-to-the-python-class-variables","title":"Introduction to the Python class variables","text":"<p>When you define a class using the <code>class</code> keyword, Python creates an object with the name the same as the class's name.</p> Example <p>The following example defines the <code>HtmlDocument</code> class and the <code>HtmlDocument</code> object:</p> <pre><code>class HtmlDocument:\n    pass\n</code></pre> <p>The <code>HtmlDocument</code> object has the <code>__name__</code> property:</p> <p><pre><code>print(HtmlDocument.__name__)\n</code></pre> Output<pre><code>HtmlDocument\n</code></pre></p> <p>And the <code>HtmlDocument</code> has the type of <code>type</code>:</p> <p><pre><code>print(type(HtmlDocument))\nprint(isinstance(HtmlDocument, type))\n</code></pre> Output<pre><code>&lt;class 'type'&gt;\nTrue\n</code></pre></p> <p>Class variables are bound to the class. They're shared by all instances of that class.</p> Example <p>The following example adds the <code>extension</code> and <code>version</code> class variables to the <code>HtmlDocument</code> class:</p> <pre><code>class HtmlDocument:\n    extension = 'html'\n    version = '5'\n</code></pre> <p>Both <code>extension</code> and <code>version</code> are the class variables of the <code>HtmlDocument</code> class. They're bound to the <code>HtmlDocument</code> class.</p> <pre><code>print(HtmlDocument.__dict__)  # (1)\nprint(HtmlDocument.extension)\nprint(HtmlDocument.version)\n</code></pre> <ol> <li> <p>Python stores class variables in the <code>__dict__</code> attribute. The <code>__dict__</code> is a mapping proxy, which is a dictionary.</p> <p>As clearly shown in the output, the class variables <code>extension</code> and <code>version</code> are in the <code>__dict__</code>.</p> </li> </ol> Output<pre><code>mappingproxy({\n    '__module__': '__main__',\n    'extension': 'html',\n    'version': 10,\n    'render': &lt;function HtmlDocument.render at 0x105107820&gt;,\n    '__dict__': &lt;attribute '__dict__' of 'HtmlDocument' objects&gt;,\n    '__weakref__': &lt;attribute '__weakref__' of 'HtmlDocument' objects&gt;,\n    '__doc__': None\n})\nhtml\n5\n</code></pre>"},{"location":"course/python-oop/S01L03-Class-variables/#get-the-values-of-class-variables","title":"Get the values of class variables","text":"<p>Classic way: Use the <code>.</code> notation.</p> <p>Another way: Use the <code>getattr()</code> function. The <code>getattr()</code> function accepts an object and a variable name. It returns the value of the class variable.</p> <p>If the variable doesn't exists, we'll get an <code>AttributeError</code> exception. To avoid that, we can specify a default value if the class variable doesn't exist.</p> Example <p><pre><code>extension = getattr(HtmlDocument, 'extension')\nversion = getattr(HtmlDocument, 'version')\nmedia_type = getattr(HtmlDocument, 'media_type', 'text/html')\n\nprint(extension)\nprint(version)\nprint(media_type)\n</code></pre> Output<pre><code>html\n5\ntext/html\n</code></pre></p>"},{"location":"course/python-oop/S01L03-Class-variables/#set-values-for-class-variables","title":"Set values for class variables","text":"<p>Classic way: Use the <code>.</code> notation.</p> <p>Another way: Use the <code>setattr()</code> function.</p> Example <p><pre><code>setattr(HtmlDocument, media_type, 'text/html')\nprint(HtmlDocument.media_type)\n</code></pre> Output<pre><code>text/html\n</code></pre></p>"},{"location":"course/python-oop/S01L03-Class-variables/#delete-class-variables","title":"Delete class variables","text":"<p>Use <code>delattr()</code> function or the <code>del</code> keyword</p> Example <p><pre><code>del HtmlDocument.extension\ndelattr(HtmlDocument, \"version\")\nprint(HtmlDocument.__dict__)\n</code></pre> Output<pre><code>mappingproxy({\n    '__module__': '__main__',\n    'render': &lt;function HtmlDocument.render at 0x101317790&gt;,\n    '__dict__': &lt;attribute '__dict__' of 'HtmlDocument' objects&gt;,\n    '__weakref__': &lt;attribute '__weakref__' of 'HtmlDocument' objects&gt;,\n    '__doc__': None\n})\n</code></pre> As shown, there is no longer <code>extension</code> and <code>version</code> attribute.</p>"},{"location":"course/python-oop/S01L03-Class-variables/#class-variable-storage","title":"Class variable storage","text":"<p>Python stores class variables in the <code>__dict__</code> attribute. The <code>__dict__</code> is a mapping proxy, which is a dictionary.</p> Example <p><pre><code>class HtmlDocument:\n    extension = 'html'\n    version = '5'\n\nHtmlDocument.media_type = 'text/html'\n\nprint(HtmlDocument.__dict__)\n</code></pre> Output<pre><code>mappingproxy({\n    '__module__': '__main__',\n    'extension': 'html',\n    'version': '5',\n    '__dict__': &lt;attribute '__dict__' of 'HtmlDocument' objects&gt;,\n    '__weakref__': &lt;attribute '__weakref__' of 'HtmlDocument' objects&gt;,\n    '__doc__': None,\n    'media_type': 'text/html'\n})\n</code></pre></p> <p>As clearly shown in the output, the <code>__dict__</code> has three class variables: <code>extension</code>, <code>version</code>, and <code>media_type</code> besides other predefined class variables.</p> <p>Python does not allow you to change the <code>__dict__</code> directly.</p> Example <p>The following result in an error: <pre><code>HtmlDocument.__dict__['released'] = 2008\n</code></pre> Output<pre><code>TypeError: 'mappingproxy' object does not support item assignment\n</code></pre></p> <p>Python allows to access class variables through the <code>__dict__</code> dictionary, it's not a good practice.</p>"},{"location":"course/python-oop/S01L03-Class-variables/#callable-class-attributes","title":"Callable class attributes","text":"<p>Class attributes can by any object such as a function.</p> <p>When we add a function to a class, the function becomes a class attribute. Since a function is callable, the class attribute is called a callable class attribute.</p> Example <p><pre><code>class HtmlDocument:\n    extension = \"html\"\n    version = \"5\"\n\n    def render():\n        print(\"Rendering the Html doc...\")\n\n\nprint(HtmlDocument.__dict__)\nHtmlDocument.render()\n</code></pre> Output<pre><code>mappingproxy({\n    '__module__': '__main__',\n    'extension': 'html',\n    'version': '5',\n    'render': &lt;function HtmlDocument.render at 0x10508a8b0&gt;,\n    '__dict__': &lt;attribute '__dict__' of 'HtmlDocument' objects&gt;,\n    '__weakref__': &lt;attribute '__weakref__' of 'HtmlDocument' objects&gt;,\n    '__doc__': None\n})\nRendering the Html doc...\n</code></pre> In this example, the <code>render</code> is a class attribute of the <code>HtmlDocument</code> class. Its value is a function.</p> <p>Summary</p> <ul> <li>Class variables are attributes of the class object.</li> <li>Use <code>.</code> notation or <code>getattr()</code> function to get the value of a class attribute.</li> <li>Use <code>.</code> notation or <code>setattr()</code> function to set the value of a class attribute.</li> <li>Python is a dynamic language. Therefore, you can assign a class variable to a class at runtime.</li> <li>Python stores class variables in the <code>__dict__</code> attribute. The <code>__dict__</code> attribute is a dictionary.</li> </ul>"},{"location":"course/python-oop/S01L04-Delete-a-property/","title":"Python Delete Property","text":"<p>To create a property of a class, you use the <code>@property</code> decorator. Underhood, the <code>@property</code> decorator uses the <code>property</code> class that has three methods: setter, getter, and deleter.</p> <p>Use deleter to delete a property from an object.</p> <p>Note</p> <p>The <code>deleter()</code> method deletes a property of an object, not a class.</p> <p>Example</p> <pre><code>class Person:\n    def __init__(self, name):\n        self._name = name\n\n    @property\n    def name(self):\n        return self._name\n\n    @name.setter\n    def name(self, value):\n        if value.strip() == \"\":\n            raise ValueError(\"name cannot be empty\")\n        self._name = value\n\n    @name.deleter\n    def name(self):\n        del self._name\n\nprint(Person.__dict__)\n</code></pre> Output<pre><code>mappingproxy({\n    '__module__': '__main__',\n    '__init__': &lt;function Person.__init__ at 0x103047700&gt;,\n    'name': &lt;property object at 0x102f315e0&gt;,\n    '__dict__': &lt;attribute '__dict__' of 'Person' objects&gt;,\n    '__weakref__': &lt;attribute '__weakref__' of 'Person' objects&gt;,\n    '__doc__': None\n})\n</code></pre> <p>The <code>Person.__dict__</code> class has the <code>name</code> variable.</p> <p>The following creates a new instance of the <code>Person</code> class:</p> <pre><code>person = Person('John')\nprint(person.__dict__)\n</code></pre> Output<pre><code>{'_name': 'John'}\n</code></pre> <p>The following uses the <code>del</code> keyword to delete the <code>name</code> property:</p> <pre><code>del person.name  #(1)\n\nprint(Person.__dict__)\nprint(person.__dict__)\n</code></pre> <ol> <li>Internally, Python will execute the <code>deleter</code> method that deletes the <code>_name</code> attribute from the <code>person</code> object. The <code>person.__dict__</code> will be empty like this:</li> </ol> <pre><code>mappingproxy({\n    '__module__': '__main__',\n    '__init__': &lt;function Person.__init__ at 0x102667700&gt;,\n    'name': &lt;property object at 0x102551540&gt;,\n    '__dict__': &lt;attribute '__dict__' of 'Person' objects&gt;,\n    '__weakref__': &lt;attribute '__weakref__' of 'Person' objects&gt;,\n    '__doc__': None\n})\n{}\n</code></pre> <p>And if we attempt to access <code>name</code> property again, we'll get an error:</p> <pre><code>print(person.name)\n</code></pre> Output<pre><code>AttributeError: 'Person' object has no attribute '_name'\n</code></pre> <p>Summary</p> <ul> <li>Use the deleter decorator to delete a property of an instance of a class.</li> </ul>"},{"location":"course/python-oop/S01L04-Instance-methods/","title":"Python Methods","text":"<p>Sumarry</p> <ul> <li>A method is a function that is bound to an instance of a class.</li> <li>A method is an instance of the <code>method</code> class</li> <li>A method has the first argument (<code>self</code>) as the object to which it is bound.</li> <li>Python automatically passes the bound object to the method as the first argument. By convention, its name is <code>self</code>.</li> </ul>"},{"location":"course/python-oop/S01L05-__init__/","title":"Python <code>__init__</code>","text":"<p>Warning</p> <p>The <code>__init__</code> method doesn't create the object but only initializes the object's attributes. Hence, the <code>__init__()</code> is not a constructor.</p> <p>Summary</p> <ul> <li>Use the <code>__init__()</code> method to initialize the object's attributes.</li> <li>The <code>__init__()</code> doesn't create an object but is automatically called after the object is created.</li> </ul>"},{"location":"course/python-oop/S01L06-Instance-variables/","title":"Python Instance Variables","text":"<p>Summary</p> <ul> <li> <p>Instance variables are bound to a specific instance of a class.</p> </li> <li> <p>Python stores instance variables in the <code>__dict__</code> attribute of the instance. Each instance has its own <code>__dict__</code> attribute and the keys in this <code>__dict__</code> may be different.</p> <p>Example</p> <p><pre><code>class HtmlDocument:\n    version = 5\n    extension = \"html\"\n\n    def __init__(self, name, contents):\n        self.name = name\n        self.contents = contents\n\n\ndocument = HtmlDocument(\"Blank\", \"\")\n\nprint(HtmlDocument.__dict__)\nprint(document.__dict__)\n</code></pre> Output<pre><code>mappingproxy({\n    '__module__': '__main__',\n    'version': 5,\n    'extension': 'html',\n    '__init__': &lt;function HtmlDocument.__init__ at 0x1014ae8b0&gt;,\n    '__dict__': &lt;attribute '__dict__' of 'HtmlDocument' objects&gt;,\n    '__weakref__': &lt;attribute '__weakref__' of 'HtmlDocument' objects&gt;,\n    '__doc__': None\n})\n{'name': 'Blank', 'contents': ''}\n</code></pre></p> </li> <li> <p>When you access a variable via the instance, Python finds the variable in the <code>__dict__</code> attribute of the instance. If it cannot find the variable, it goes up and look it up in the <code>__dict__</code> attribute of the class.</p> <p>Example</p> <p><pre><code>class HtmlDocument:\n    version = 5\n    extension = \"html\"\n\n    def __init__(self, name, contents):\n        self.name = name\n        self.contents = contents\n\n\ndocument = HtmlDocument(\"Blank\", \"\")\ndocument.version = 10\n\nprint(HtmlDocument.__dict__)\nprint(document.__dict__)\n\nprint(document.version, HtmlDocument.version)\n</code></pre> Output<pre><code>mappingproxy({\n    '__module__': '__main__',\n    'version': 5,\n    'extension': 'html',\n    '__init__': &lt;function HtmlDocument.__init__ at 0x1014ae8b0&gt;,\n    '__dict__': &lt;attribute '__dict__' of 'HtmlDocument' objects&gt;,\n    '__weakref__': &lt;attribute '__weakref__' of 'HtmlDocument' objects&gt;,\n    '__doc__': None\n})\n{'name': 'Blank', 'contents': '', 'version': 10}\n10 5\n</code></pre></p> </li> </ul>"},{"location":"course/python-oop/S01L07-Private-attributes/","title":"Python Private Attributes","text":""},{"location":"course/python-oop/S01L07-Private-attributes/#private-attributes","title":"Private attributes","text":"<p>Python doesn't have a concept of private attributes. In other words, all attributes are accessible from the outside of a class.</p> <p>By convention, we can define a private attribute by prefixing a single underscore (<code>_</code>).</p> <p>Example</p> <pre><code>class Counter:\n    def __init__(self):\n        self._current = 0\n\n    def increment(self):\n        self._current += 1\n\n    def value(self):\n        return self._current\n\n    def reset(self):\n        self._current = 0\n</code></pre>"},{"location":"course/python-oop/S01L07-Private-attributes/#name-mangling-with-double-underscores","title":"Name mangling with double underscores","text":"<p>If we prefix an attribute name with double underscores (<code>__</code>) like this: <pre><code>__attribute\n</code></pre> Python will automatically change the name of the <code>__attribute</code> to: <pre><code>_class__attribute\n</code></pre> This is called the name mangling in Python.</p> <p>By doing this, we cannot access the <code>__attribute</code> directly from the outside of a class like: <pre><code>instance.__attribute\n</code></pre> However, we still can access it using the <code>_class__attribute</code> name: <pre><code>instance._class__attribute\n</code></pre></p> <p>Example</p> <p>The following example redegfines the Counter class with the <code>__current</code> attribute: <pre><code>class Counter:\n    def __init__(self):\n        self.__current = 0\n\n    def increment(self):\n        self.__current += 1\n\n    def value(self):\n        return self.__current\n\n    def reset(self):\n        self.__current = 0\n</code></pre> Now, if we attempt to access <code>__current</code> attribute, we\u2019ll get an error: <pre><code>counter = Counter()\nprint(counter.__current)\n</code></pre> Output<pre><code>AttributeError: 'Counter' object has no attribute '__current'\n</code></pre> However, we can access the attribute as <code>_Counter___current</code>: <pre><code>counter = Counter()\nprint(counter._Counter__current)\n</code></pre></p> <p>Summary</p> <ul> <li>Python doesn't have a concept of private attributes. In other words, all attributes are accessible from the outside of a class.</li> <li>Prefix an attribute with a single underscore (<code>_</code>) to make it private by convention.</li> <li>Prefix an attribute with double underscores (<code>__</code>) to use the name mangling.</li> </ul>"},{"location":"course/python-oop/S01L08-Class-attributes/","title":"Python Class Attributes","text":""},{"location":"course/python-oop/S01L08-Class-attributes/#introduction-to-class-attributes","title":"Introduction to class attributes","text":"<p>The class attributes don\u2019t associate with any specific instance of the class. But they\u2019re shared by all instances of the class.</p> <p>Note</p> <p>Class attributes are similar to the static members in Java or C#, but not the same.</p> <p>To define a class attribute, we place it outside of the <code>__init__()</code> method.</p> <p>After that, we can access the class attribute via instances of the class or via the class name.</p> <p>Example</p> <p>The following defines <code>pi</code> as a class attribute: <pre><code>class Circle:\n    pi = 3.14159  #(1)\n\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return self.pi * self.radius**2  #(2)\n\n    def circumference(self):\n        return 2 * self.pi * self.radius #(3)\n\nc = Circle(10)\nprint(c.pi)       #(4)\nprint(Circle.pi)  #(5)\n</code></pre></p> <ol> <li>Defines <code>pi</code> as a class attribute by placing it outside of the <code>__init__()</code> method.</li> <li>Access the <code>pi</code> class attribute via the <code>self</code> variable.</li> <li>Access the <code>pi</code> class attribute via the <code>self</code> variable.</li> <li>Access the <code>pi</code> class attribute via an instance of the <code>Circle</code> class.</li> <li>Access the <code>pi</code> class attribute directly via the <code>Circle</code> class.</li> </ol> Output<pre><code>3.14159\n3.14159\n</code></pre>"},{"location":"course/python-oop/S01L08-Class-attributes/#how-python-class-attributes-work","title":"How Python class attributes work","text":"<p>Example</p> <p><pre><code>class Test:\n    x = 10\n\n    def __init__(self):\n        self.x = 20\n\n\ntest = Test()\nprint(test.x)  # 20\nprint(Test.x)  # 10\n</code></pre> Output<pre><code>20\n10\n</code></pre></p>"},{"location":"course/python-oop/S01L08-Class-attributes/#when-to-use-python-class-attributes","title":"When to use Python class attributes","text":"<ul> <li>Storing class constants</li> <li>Tracking data accross of all instances</li> <li>Defining default values</li> </ul> <p>Summary</p> <ul> <li>A class attribute is shared by all instances of the class. To define a class attribute, we place it outside of the <code>__init__()</code> method.</li> <li>Use class attributes for storing class contants, track data across all instances, and setting default values for all instances of the class.</li> </ul>"},{"location":"course/python-oop/S01L09-Class-methods/","title":"Python Class Methods","text":""},{"location":"course/python-oop/S01L09-Class-methods/#introduction-to-python-class-methods","title":"Introduction to Python class methods","text":"<p>A class method isn\u2019t bound to any specific instance. It\u2019s bound to the class only.</p> <p>To define a class method:</p> <ul> <li>Place the <code>@classmethod</code> decorator above the method definition.</li> <li>Remane the <code>self</code> parameter to <code>cls</code>.</li> </ul> <p>A class method cannot access instance attributes. But it can access class attributes via the <code>cls</code> variable.</p> <p>Example</p> <pre><code>class Person:\n    def __init__(self, first_name, last_name, age):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.age = age\n\n    def get_full_name(self):\n        return f\"{self.first_name} {self.last_name}\"\n\n    def introduce(self):\n        return f\"Hi. I'm {self.first_name} {self.last_name}. I'm {self.age} years old.\"\n\n    @classmethod\n    def create_anonymous(cls):\n        return Person('John', 'Doe', 25)\n</code></pre> <p>The <code>create_anonymous()</code> method cannot access instance attributes. But it can access class attributes via the <code>cls</code> variable.</p>"},{"location":"course/python-oop/S01L09-Class-methods/#calling-python-class-methods","title":"Calling Python class methods","text":"<p>Example</p> <pre><code>anonymous = Person.create_anonymous()\nprint(anonymous.introduce())\n</code></pre>"},{"location":"course/python-oop/S01L09-Class-methods/#class-methods-vs-instance-methods","title":"Class methods vs. instance methods","text":"Features Class methods Instance methods Binding Class An instance of the class Calling <code>Class.method()</code> <code>object.method()</code> Accessing Class attributes Instance &amp; class attributes"},{"location":"course/python-oop/S01L09-Class-methods/#when-to-use-python-class-methods","title":"When to use Python class methods","text":"<p>In practice, we often use class methods for methods that create an instance of the class.</p> <p>We can use class methods for any methods that are not bound to a specific instance but the class.</p> <p>Note</p> <p>When a method creates an instance of the class and returns it, the method is called a factory method.</p> <p>Summary</p> <ul> <li>Python class methods aren't bound to any specific instance, but classes.</li> <li>Use <code>@classmethod</code> decorator to change an instance method to a class method. Also, pass the <code>cls</code> as the first parameter to the class method. Access class attributes via the <code>cls</code> variable.</li> <li>Use class methods for factory methods.</li> </ul>"},{"location":"course/python-oop/S01L10-Static-methods/","title":"Python Static Methods","text":""},{"location":"course/python-oop/S01L10-Static-methods/#introduction-to-python-static-methods","title":"Introduction to Python static methods","text":"<p>Static methods aren't bound to an object. In other words, static methods cannot access and modify an object state.</p> <p>In addition, Python doesn't implicitly pass the <code>cls</code> parameter (or the <code>self</code> parameter) to static method. Therefore, static methods cannot access and modify the class's state.</p> <p>In practice, we use static methods to define utility methods or group functions that have some logical relationships in a class.</p> <p>To define a static method, we use the <code>@staticmethod</code> decorator:</p> <p>Example</p> <pre><code>class TemperatureConverter:\n    KEVIN = \"K\"\n    FAHRENHEIT = \"F\"\n    CELSIUS = \"C\"\n\n    @staticmethod\n    def celsius_to_fahrenheit(c):\n        return 9 * c / 5 + 32\n\n    @staticmethod\n    def fahrenheit_to_celsius(f):\n        return 5 * (f - 32) / 9\n\n    @staticmethod\n    def celsius_to_kelvin(c):\n        return c + 273.15\n\n    @staticmethod\n    def kelvin_to_celsius(k):\n        return k - 273.15\n\n    @staticmethod\n    def fahrenheit_to_kelvin(f):\n        return 5 * (f + 459.67) / 9\n\n    @staticmethod\n    def kelvin_to_fahrenheit(k):\n        return 9 * k / 5 - 459.67\n\n    @staticmethod\n    def format(value, unit):\n        symbol = \"\"\n        if unit == TemperatureConverter.FAHRENHEIT:\n            symbol = \"\u00b0F\"\n        elif unit == TemperatureConverter.CELSIUS:\n            symbol = \"\u00b0C\"\n        elif unit == TemperatureConverter.KEVIN:\n            symbol = \"\u00b0K\"\n\n        return f\"{value}{symbol}\"\n\n\nif __name__ == \"__main__\":\n    f = TemperatureConverter.celsius_to_fahrenheit(35)\n    print(TemperatureConverter.format(f, TemperatureConverter.FAHRENHEIT))\n</code></pre>"},{"location":"course/python-oop/S01L10-Static-methods/#python-static-methods-vs-class-methods","title":"Python static methods vs class methods","text":"Class Methods Static Methods Python implicitly pass the <code>cls</code> argument to class methods. Python doesn\u2019t implicitly pass the <code>cls</code> argument to static methods Class methods can access and modify the class state. Static methods cannot access or modify the class state. Use <code>@classmethod</code> decorators to define class methods Use <code>@staticmethod</code> decorators to define static methods. <p>Summary</p> <ul> <li>Use static methods to define utility methods or group a logically related functions into a class.</li> <li>Use the <code>@staticmethod</code> decorator to define a static method.</li> </ul>"},{"location":"course/python-oop/S02-Summary/","title":"Section Summary - Special methods","text":""},{"location":"course/python-oop/S02-Summary/#__str__","title":"<code>__str__</code>","text":"<p>Implement the <code>__str__</code> method to customize the string representation of an instance of a class.</p> <p>Example</p> <p><pre><code>class Person:\n    def __init__(self, first_name, last_name, age):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.age = age\n\n    def __str__(self):\n        return f'Person({self.first_name}, {self.last_name}, {self.age})'\n\nperson = Person('John', 'Doe', 25)\nprint(person)\n</code></pre> Output<pre><code>Person(John, Doe, 25)\n</code></pre></p>"},{"location":"course/python-oop/S02-Summary/#__repr__","title":"<code>__repr__</code>","text":"<p>The <code>__repr__</code> method defines behavior when we pass in instance of a class to the <code>repr()</code>.</p> <p>The <code>__repr__</code> method returns the string representation of an object.</p> <p>Typically, the <code>__repr__()</code> returns a string that can be executed and yield the same value as the object.</p> <p>Example</p> <p><pre><code>class Person:\n    def __init__(self, first_name, last_name, age):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.age = age\n\n    def __repr__(self):\n        return f'Person(\"{self.first_name}\",\"{self.last_name}\",{self.age})'\n\nperson = Person(\"John\", \"Doe\", 25)\nprint(repr(person))\n</code></pre> Output<pre><code>Person(\"John\",\"Doe\",25)\n</code></pre></p> <p>The <code>repr(person)</code> return the string <code>Person(\"John\",\"Doe\",25)</code>. If we execute this string, it'll return the <code>person</code> object.</p> <p>When a class doesn't implement the <code>__str__</code> method and we pass an instance of that class to the <code>str()</code>, Python returns the result of the <code>__repr__</code> method because internally the <code>__str__</code> method calls the <code>__repr__</code> method.</p> <p><code>__str__</code> vs <code>__repr__</code></p> <p>The <code>__str__</code> method returns a string representation of an object that is human-readable while the <code>__repr__</code> method returns a string representation of an object that is Python-readable.</p>"},{"location":"course/python-oop/S02-Summary/#__eq__","title":"<code>__eq__</code>","text":"<p>Implement the Python <code>__eq__</code> method to define the equality logic for comparing two objects using the equal operator (<code>==</code>)</p> <p>Python automatically calls the <code>__eq__</code> method of a class when you use the <code>==</code> operator to compare the instances of the class. By default, Python uses the <code>is</code> operator if you don\u2019t provide a specific implementation for the <code>__eq__</code> method.</p> <p>Example</p> <p><pre><code>class Person:\n    def __init__(self, first_name, last_name, age):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.age = age\n\n    def __eq__(self, other):\n        if isinstance(other, Person):\n            return self.age == other.age\n\n        return False\n\n\njohn = Person('John', 'Doe', 25)\njane = Person('Jane', 'Doe', 25)\nmary = Person('Mary', 'Doe', 27)\n\nprint(john == jane)  # True\nprint(john == mary)  # False\n\nprint(john == 20)  # False\n</code></pre> Output<pre><code>True\nFalse\nFalse\n</code></pre></p>"},{"location":"course/python-oop/S02-Summary/#__hash__","title":"<code>__hash__</code>","text":"<p>The <code>hash()</code> function accepts an object and returns the hash value as an integer. When you pass an object to the <code>hash()</code> function, Python will execute the <code>__hash__</code> special method of the object.</p> <p>By default, the <code>__hash__</code> uses the object's id and the <code>__eq__</code> returns <code>True</code> if two objects are the same.</p> <p>If a class overrides the <code>__eq__</code> method, Python sets <code>__hash__</code> to <code>None</code>, the objects of the class become unhashable. We will not able to use them as keys in a dictionary or elements in a set.</p> <p>Example</p> <pre><code>class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def __eq__(self, other):\n        return isinstance(other, Person) and self.age == other.age\n</code></pre> <p>If we attemp to use the <code>Person</code> object in a set, we'll get an error</p> <pre><code>members = {\n    Person('John', 22),\n    Person('Jane', 22)\n}\n</code></pre> Output<pre><code>TypeError: unhashable type: 'Person'\n</code></pre> <p>Also, the object loses hasing because if we implement <code>__eq__</code>, the <code>__hash__</code> is set to <code>None</code>.</p> <pre><code>hash(Person('John', 22))\n</code></pre> Output<pre><code>TypeError: unhashable type: 'Person'\n</code></pre> <p>To make the <code>Person</code> class hashable, we also need to implement the <code>__hash__</code> method.</p> <pre><code>class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def __eq__(self, other):\n        return isinstance(other, Person) and self.age == other.age\n\n    def __hash__(self):\n        return hash(self.age)\n</code></pre>"},{"location":"course/python-oop/S02-Summary/#__bool__","title":"<code>__bool__</code>","text":"<p>All objects of custom classes return <code>True</code> by default. Implement the <code>__bool__</code> method to override the default. The <code>__bool__</code> method must return either <code>True</code> or <code>False</code>.</p> <p>Example</p> <pre><code>class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def __bool__(self):\n        if self.age &lt; 18 or self.age &gt; 65:\n            return False\n        return True\n\n\nif __name__ == '__main__':\n    person = Person('Jane', 16)\n    print(bool(person))  # False\n</code></pre> Output<pre><code>False\n</code></pre> <p>If a custom class doesn't have the <code>__bool__</code> method, Python will look for the <code>__len__()</code> method. If the <code>__len__</code> is zero, the object is <code>False</code>. Otherwise, it's <code>True</code>.</p> <p>If a class doesn\u2019t implement the <code>__bool__</code> and <code>__len__</code> methods, the objects of the class will evaluate to <code>True</code>.</p> <p>Example</p> <p>The following defines a <code>Payroll</code> class that doesn't implement <code>__bool__</code> but the <code>__len__</code> method:</p> <pre><code>class Payroll:\n    def __init__(self, length):\n        self.length = length\n\n    def __len__(self):\n        print('len was called...')\n        return self.length\n\n\nif __name__ == '__main__':\n    payroll = Payroll(0)\n    print(bool(payroll))  #(1)\n\n    payroll.length = 10\n    print(bool(payroll))  #(2)\n</code></pre> <ol> <li>In this example payroll\u2019s <code>__len__</code> returns <code>0</code>, which is <code>False</code>:</li> <li>However, in this example <code>__len__</code> returns <code>10</code> which is <code>True</code>:</li> </ol> Output<pre><code>len was called...\nFalse\nlen was called...\nTrue\n</code></pre>"},{"location":"course/python-oop/S02-Summary/#__del__","title":"<code>__del__</code>","text":"<p>The garbage collector destroys an object when there is no reference to the object. Python calls the <code>__del__</code> method right before the garbage collector destroys the object.</p> <p>Note</p> <p>The <code>__del__</code> method is not the destructor because the garbage collector destroys the object, not the <code>__del__</code> method.</p> <p>Example</p> <pre><code>class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def __del__(self):\n        print('__del__ was called')\n\n\nif __name__ == '__main__':\n    person = Person('John Doe', 23)\n    person = None #(1)\n</code></pre> <ol> <li><code>__del__</code> was called here. When we assign person to <code>None</code>, there is no reference to the <code>Person</code> object, so Python calls the <code>__del__</code> method right before the garbage collector destroys the object.</li> </ol> Output<pre><code>__del__ was called\n</code></pre> <p>In practice, we should not use the <code>__del__</code> method to clean up the resources. It\u2019s recommended to use the context manager.</p> <p>If an exception occurs inside the <code>__del__</code> method, Python does not raise the exception but keeps it silent.</p> <p>In practice, we\u2019ll rarely use the <code>__del__</code> method.</p> <p>Summary</p> <ul> <li>Implement the <code>__str__</code> method to customize the string representation of an instance of a class.</li> <li>Typically, the <code>__repr__()</code> returns a string that can be executed and yield the same value as the object.</li> <li>The <code>__str__</code> method returns a string representation of an object that is human-readable while the <code>__repr__</code> method returns a string representation of an object that is Python-readable.</li> <li>Implement the Python <code>__eq__</code> method to define the equality logic for comparing two objects using the equal operator (<code>==</code>). By default, Python uses the <code>is</code> operator if you don\u2019t provide a specific implementation for the <code>__eq__</code> method.</li> <li>By default, the <code>__hash__</code> uses the object's id.</li> <li>If you implement <code>__eq__</code>, Python sets <code>__hash__</code> to <code>None</code> unless you implement <code>__hash__</code>.</li> <li>If a class doesn\u2019t implement the <code>__bool__</code> method, Python will use the result of the <code>__len__</code> method. If the class doesn\u2019t implement both methods, the objects will be <code>True</code> by default.</li> <li>Python calls the <code>__del__</code> method right before the garbage collector destroys the object. The garbage collector destroys an object when there is no reference to the object.</li> <li>Exception occurs inside the <code>__del__</code> method is not raised but silent.</li> <li>Avoid using <code>__del__</code> for clean up resources; use the context manager instead.</li> </ul>"},{"location":"course/python-oop/S03L01-Property/","title":"Python Property","text":"<p>Example</p> <pre><code>from pprint import pprint\n\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def set_age(self, age):\n        if age &lt;= 0:\n            raise ValueError('The age must be positive')\n        self._age = age\n\n    def get_age(self):\n        return self._age\n\n    age = property(fget=get_age, fset=set_age)\n\n\nprint(Person.age)\n\njohn = Person('John', 18)\npprint(john.__dict__)\n\njohn.age = 19\npprint(Person.__dict__)\n</code></pre> Output<pre><code>&lt;property object at 0x100c36db0&gt;\n{'_age': 18, 'name': 'John'}\nmappingproxy({'__dict__': &lt;attribute '__dict__' of 'Person' objects&gt;,\n            '__doc__': None,\n            '__init__': &lt;function Person.__init__ at 0x100c67670&gt;,\n            '__module__': '__main__',\n            '__weakref__': &lt;attribute '__weakref__' of 'Person' objects&gt;,\n            'age': &lt;property object at 0x100c36db0&gt;,\n            'get_age': &lt;function Person.get_age at 0x100e3ce50&gt;,\n            'set_age': &lt;function Person.set_age at 0x100e3cdc0&gt;})\n</code></pre> <p>Summary</p> <ul> <li>Use the Python <code>property()</code> class to define a property for a class.</li> </ul>"},{"location":"course/python-oop/S03L02-property-decorator/","title":"Python Property Decorator","text":"<p>Use decorators to create a property using the following pattern:</p> <pre><code>class MyClass:\n    def __init__(self, attr):\n        self.prop = attr\n\n    @property\n    def prop(self):\n        return self.__attr\n\n    @prop.setter\n    def prop(self, value):\n        self.__attr = value\n</code></pre> <p>Example</p> <pre><code>class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    @property\n    def age(self):\n        return self._age\n\n    @age.setter\n    def age(self, value):\n        if value &lt;= 0:\n            raise ValueError('The age must be positive')\n        self._age = value\n\n    @property\n    def name(self):\n        return self._name\n\n    @name.setter\n    def name(self, value):\n        if value.strip() == '':\n            raise ValueError('The name cannot be empty')\n        self._name = value\n</code></pre> <p>Underhood, the <code>@property</code> decorator uses the <code>property</code> class that has three methods: setter, getter, and deleter.</p> <p>Summary</p> <ul> <li>User the <code>@property</code> decorator to create a property for a class.</li> </ul>"},{"location":"course/python-oop/S03L03-Read-only-property/","title":"Python Readonly Property","text":""},{"location":"course/python-oop/S03L03-Read-only-property/#cache-calculated-properties","title":"Cache calculated properties","text":"<p>Example</p> <pre><code>import math\n\nclass Circle:\n    def __init__(self, radius):\n        self._radius = radius\n        self._area = None  #(1)\n\n    @property\n    def radius(self):\n        return self._radius\n\n    @radius.setter\n    def radius(self, value):\n        if value &lt; 0:\n            raise ValueError('Radius must be positive')\n\n        if value != self._radius:\n            self._radius = value\n            self._area = None  #(2)\n\n    @property\n    def area(self):\n        if self._area is None:\n            self._area = math.pi * self.radius ** 2  #(3)\n\n        return self._area\n</code></pre> <ol> <li>The <code>_area</code> attribute is the cache that stores the calculated area.</li> <li>Reset the cache by setting the <code>_area</code> to <code>None</code>.</li> <li>The <code>area</code> property returns <code>_area</code> if it is not <code>None</code>. Otherwise, calculate the area, save it into the <code>_area</code>, and return it.</li> </ol> <p>Summary</p> <ul> <li>Define only the getter to make a property readonly.</li> <li>Do use computed property to make the property of a class more natural.</li> <li>Use caching computed properties to improve the performance.</li> </ul>"},{"location":"course/system-design-interview/","title":"Mock System Design Interviews","text":""},{"location":"course/system-design-interview/#sources","title":"Sources","text":"<ul> <li>Mastering the System Design Interview</li> <li>System Design Interview \u2013 An insider's guide</li> </ul>"},{"location":"course/system-design-interview/#materials","title":"Materials","text":"<ul> <li>Slide Mastering the System Design Interview</li> <li>System Design Interview \u2013 An insider's guide book</li> </ul>"},{"location":"course/system-design-interview/#course-content","title":"Course content","text":"<ul> <li>Design a URL Shortening Service</li> <li>Design a Restaurant Reservation System</li> </ul>"},{"location":"course/system-design-interview/restaurant-reservation-system/","title":"Design a Restaurant Reservation System","text":""},{"location":"course/system-design-interview/url-shortening-service/","title":"Design a URL Shortening Service","text":"<p>Design something like bit.ly. A service where anyone can enter a URL, get a shorter URL to use in its place, and we manage redirecting them.</p>"},{"location":"course/system-design-interview/url-shortening-service/#qa","title":"Q&amp;A","text":"What sort of scale are we talking about? <p>Millions of redirects every day, and we dont want to make any design decision that migh limit us later, so assume millions of URLs as well.</p> Any restrictions on the characters we use? Symbols might be a little too hard for people to remember or type."},{"location":"leetcode/","title":"LeetCode Series","text":"<p>\u0110\u00e2y l\u00e0 t\u1ed5ng h\u1ee3p c\u00e1c b\u00e0i t\u1eadp tr\u00ean  LeetCode ch\u1ecdn l\u1ecdc c\u00f9ng c\u00e1ch gi\u1ea3i v\u00e0 code.</p> <p>V\u00ec c\u00e1c b\u00e0i t\u1eadp tr\u00ean  LeetCode th\u01b0\u1eddng kh\u00f4ng c\u00f3 format cho Input v\u00e0 Output n\u00ean c\u00f3 th\u1ec3 \u1edf d\u01b0\u1edbi s\u1ebd t\u1ef1 b\u1ecba.</p> <p>T\u00ean c\u00e1c bi\u1ebfn xu\u1ea5t hi\u1ec7n trong \u0111\u1ec1 b\u00e0i n\u1ebfu c\u1ea7n c\u0169ng s\u1ebd \u0111\u1ed5i lu\u00f4n cho n\u00f3 d\u1ec5 nh\u00ecn v\u1ec1 m\u1eb7t to\u00e1n h\u1ecdc.</p> <p>Gi\u1edbi h\u1ea1n r\u00e0ng bu\u1ed9c c\u1ee7a b\u00e0i to\u00e1n c\u00f3 th\u1ec3 c\u0169ng thay lu\u00f4n, v\u00ec nhi\u1ec1u khi  LeetCode \u0111\u1ec3 r\u00e0ng bu\u1ed9c qu\u00e1 l\u1ecfng.</p> <p>Ch\u1ee7 y\u1ebfu l\u00e0 \u0111\u1ec3 t\u00e1i s\u1eed d\u1ee5ng n\u1ebfu c\u1ea7n. C\u00e1c b\u00e0i to\u00e1n h\u1ea7u h\u1ebft s\u1ebd \u0111\u01b0\u1ee3c code b\u1eb1ng </p> <p>L\u01b0u \u00fd</p> <p>N\u1ebfu c\u00e1c c\u00f4ng th\u1ee9c to\u00e1n trong b\u00e0i vi\u1ebft kh\u00f4ng hi\u1ec3n th\u1ecb \u0111\u00fang, b\u1ea5m F5 \u0111\u1ec3 t\u1ea3i l\u1ea1i trang l\u1ea7n n\u1eefa.</p>"},{"location":"leetcode/#danh-sach-cac-bai-tap-leetcode","title":"Danh s\u00e1ch c\u00e1c b\u00e0i t\u1eadp LeetCode","text":""},{"location":"leetcode/#0-999","title":"0 - 999","text":"<ul> <li>239.\u00a0Sliding Window Maximum Hard</li> <li>714.\u00a0Best Time to Buy and Sell Stock with Transaction Fee Medium</li> </ul>"},{"location":"leetcode/#1000-1999","title":"1000 - 1999","text":"<ul> <li>1175.\u00a0Prime Arrangements Easy</li> </ul>"},{"location":"leetcode/#2000-2999","title":"2000 - 2999","text":"<ul> <li>2453.\u00a0Destroy Sequential Targets Medium</li> <li>2485.\u00a0Find the Pivot Integer Easy</li> </ul>"},{"location":"leetcode/#3000-3999","title":"3000 - 3999","text":"<ul> <li>3227. Vowels Game in a String Medium</li> </ul>"},{"location":"leetcode/1175/","title":"1175.\u00a0Prime Arrangements","text":"<p>Easy</p> <p>Cho s\u1ed1 t\u1ef1 nhi\u00ean \\(n\\), tr\u1ea3 v\u1ec1 s\u1ed1 ho\u00e1n v\u1ecb c\u1ee7a c\u00e1c s\u1ed1 t\u1eeb \\(1\\) \u0111\u1ebfn \\(n\\) sao cho c\u00e1c s\u1ed1 nguy\u00ean t\u1ed1 \u0111\u1ee9ng \u1edf c\u00e1c v\u1ecb tr\u00ed nguy\u00ean t\u1ed1 (v\u1ecb tr\u00ed \u0111\u01b0\u1ee3c \u0111\u00e1nh s\u1ed1 b\u1eaft \u0111\u1ea7u t\u1eeb \\(1\\)).</p> <p>V\u00ec k\u1ebft qu\u1ea3 c\u00f3 th\u1ec3 r\u1ea5t l\u1edbn n\u00ean tr\u1ea3 v\u1ec1 k\u1ebft qu\u1ea3 sau khi chia l\u1ea5y d\u01b0 cho \\(10^9+7\\).</p> <p>Input</p> <ul> <li>G\u1ed3m m\u1ed9t d\u00f2ng duy nh\u1ea5t ch\u1ee9a \\(n\\)</li> </ul> <p>Output</p> <ul> <li>G\u1ed3m m\u1ed9t d\u00f2ng duy nh\u1ea5t l\u00e0 k\u1ebft qu\u1ea3 c\u1ee7a b\u00e0i to\u00e1n</li> </ul> <p>R\u00e0ng bu\u1ed9c</p> <ul> <li>\\(1 \\leq n \\leq 100\\)</li> </ul> <p>V\u00ed d\u1ee5</p> <p>V\u00ed d\u1ee5 1</p> <p>Input<pre><code>5\n</code></pre> Output<pre><code>12\n</code></pre> Gi\u1ea3i th\u00edch: Ch\u1eb3ng h\u1ea1n ho\u00e1n v\u1ecb \\([1, 2, 5, 4, 3]\\) l\u00e0 m\u1ed9t ho\u00e1n v\u1ecb tho\u1ea3 m\u00e3n, nh\u01b0ng ho\u00e1n v\u1ecb \\([5, 2, 3, 4, 1]\\) th\u00ec kh\u00f4ng.</p> <p>V\u00ed d\u1ee5 2</p> <p>Input<pre><code>100\n</code></pre> Output<pre><code>682289015\n</code></pre></p> Link n\u1ed9p b\u00e0i <p> 1175.\u00a0Prime Arrangements</p> Solution <p>Gi\u1ea3 s\u1eed c\u00f3 \\(p\\) s\u1ed1 nguy\u00ean t\u1ed1 trong \u0111o\u1ea1n t\u1eeb \\(1\\) \u0111\u1ebfn \\(n\\). V\u00ec c\u00e1c s\u1ed1 nguy\u00ean t\u1ed1 ch\u1ec9 c\u00f3 th\u1ec3 \u1edf v\u1ecb tr\u00ed nguy\u00ean t\u1ed1 n\u00ean ta c\u00f3 \\(p!\\) c\u00e1ch ch\u1ecdn v\u1ecb tr\u00ed cho \\(p\\) s\u1ed1 n\u00e0y.</p> <p>V\u1edbi m\u1ed7i c\u00e1ch ch\u1ecdn v\u1ecb tr\u00ed cho \\(p\\) s\u1ed1 nguy\u00ean t\u1ed1, ta c\u00f3 \\((n - p)!\\) c\u00e1ch ch\u1ecdn v\u1ecb tr\u00ed cho c\u00e1c s\u1ed1 c\u00f2n l\u1ea1i.</p> <p>Nh\u01b0 v\u1eady k\u1ebft qu\u1ea3 b\u00e0i to\u00e1n l\u00e0:</p> \\[ p!(n-p)! \\] <p>Nh\u01b0 v\u1eady ch\u1ec9 c\u1ea7n t\u00ecm \\(p\\) l\u00e0 s\u1ed1 l\u01b0\u1ee3ng s\u1ed1 nguy\u00ean t\u1ed1 t\u1eeb \\(1\\) \u0111\u1ebfn \\(n\\) l\u00e0 ta c\u00f3 th\u1ec3 gi\u1ea3i b\u00e0i to\u00e1n n\u00e0y.</p> <p>\u0110\u1ec1 b\u00e0i ch\u1ec9 cho gi\u1edbi h\u1ea1n \\(n \\leq 100\\) n\u00ean th\u00edch qu\u1ea9y s\u00e0ng nguy\u00ean t\u1ed1 hay c\u00e1i g\u00ec c\u0169ng \u0111\u01b0\u1ee3c.</p> Code  C++ Python <pre><code>class Solution {\npublic:\n    const long long MOD = 1000000007;\n\n    long long numPrimeArrangements(long long n) {\n\n        // S\u00e0ng nguy\u00ean t\u1ed1\n        vector&lt;bool&gt; isPrime(n + 1, true);\n        isPrime[0] = false;\n        isPrime[1] = false;\n\n        for (int i = 2; i * i &lt;= n; i++) {\n            if (isPrime[i])\n                for (int j = i * i; j &lt;= n; j += i) {\n                    isPrime[j] = false;\n                }\n        }\n\n        // \u0110\u1ebfm s\u1ed1 s\u1ed1 nguy\u00ean t\u1ed1 trong kho\u1ea3ng t\u1eeb 1 \u0111\u1ebfn n\n        long long count = 0;\n        for (long long i = 0; i &lt;= n; i++) {\n            if (isPrime[i])\n                count++;\n        }\n\n        // T\u00ednh k\u1ebft qu\u1ea3\n        long long result = 1;\n        for (long long i = 1; i &lt;= count; i++) {\n            result = (result * i) % MOD;\n        }\n        for (long long i = 1; i &lt;= n - count; i++) {\n            result = (result * i) % MOD;\n        }\n\n        return result;\n    }\n};\n</code></pre> <pre><code>class Solution:\n    def numPrimeArrangements(self, n: int) -&gt; int:\n        MOD = int(1e9 + 7)\n\n        is_prime = [True] * (n + 1)\n        is_prime[0] = False\n        is_prime[1] = False\n\n        for i in range(2, int(n ** .5) + 1):\n            for j in range(i * i, n + 1, i):\n                is_prime[j] = False\n\n        count = 0\n        for i in range(n + 1):\n            if is_prime[i]:\n                count += 1\n\n        ans = 1\n        for i in range(1, count + 1):\n            ans = (ans * i) % MOD\n        for i in range(1, n - count + 1):\n            ans = (ans * i) % MOD\n\n        return ans\n</code></pre>"},{"location":"leetcode/239/","title":"239.\u00a0Sliding Window Maximum","text":"<p>Hard</p> <p>Cho m\u1ed9t m\u1ea3ng <code>nums</code> g\u1ed3m \\(n\\) s\u1ed1 nguy\u00ean, t\u00ecm \\(\\max\\) c\u1ee7a t\u1ea5t c\u1ea3 c\u00e1c d\u00e3y con \\(k\\) ph\u1ea7n t\u1eed c\u1ee7a <code>nums</code>.  M\u1ed9t d\u00e3y con l\u00e0 m\u1ed9t d\u00e3y li\u00ean ti\u1ebfp c\u00e1c ph\u1ea7n t\u1eed. In k\u1ebft qu\u1ea3 ra theo \u0111\u00fang th\u1ee9 t\u1ef1 c\u1ee7a c\u00e1c d\u00e3y con t\u01b0\u01a1ng \u1ee9ng.</p> <p>R\u00e0ng bu\u1ed9c</p> <ul> <li>\\(1 \\leq k \\leq n \\leq 10^5\\)</li> <li>\\(-10^4 \\leq\\) <code>nums[i]</code> \\(\\leq 10^4\\)</li> </ul> <p>V\u00ed d\u1ee5</p> <p>V\u00ed d\u1ee5 1</p> <p>Input<pre><code>nums = [1,3,-1,-3,5,3,6,7], k = 3\n</code></pre> Output<pre><code>[3,3,5,5,6,7]\n</code></pre> Gi\u1ea3i th\u00edch:  <pre><code>Window position                Max\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7\n</code></pre></p> <p>V\u00ed d\u1ee5 2</p> <p>Input<pre><code>nums = [1], k = 1\n</code></pre> Output<pre><code>[1]\n</code></pre></p> Link n\u1ed9p b\u00e0i <p> 239. Sliding Window Maximum</p> Solution <p>S\u1eed d\u1ee5ng deque.</p> <p>Kh\u1edfi t\u1ea1o m\u1ea3ng <code>ans</code> l\u01b0u k\u1ebft qu\u1ea3.</p> <p>Khi x\u00e9t \u0111\u1ebfn ph\u1ea7n t\u1eed <code>i</code>:</p> <ul> <li><code>pop_back</code> n\u1ebfu back c\u1ee7a queue l\u00e0 ph\u1ea7n t\u1eed kh\u00f4ng n\u1eb1m trong sliding window <code>[i - k + 1, i]</code></li> <li><code>pop_front</code> cho \u0111\u1ebfn khi queue r\u1ed7ng ho\u1eb7c front c\u1ee7a queue l\u1edbn h\u01a1n <code>nums[i]</code></li> <li><code>push</code> ph\u1ea7n t\u1eed <code>i</code> v\u00e0o front c\u1ee7a queue. Nh\u01b0 v\u1eady c\u00e1c ph\u1ea7n t\u1eed trong queue s\u1ebd lu\u00f4n \u0111\u1ea3m b\u1ea3o l\u00e0 ch\u1ec9 ch\u1ee9a c\u00e1c s\u1ed1 trong sliding window v\u00e0 back c\u1ee7a queue lu\u00f4n l\u00e0 ph\u1ea7n t\u1eed l\u1edbn nh\u1ea5t.</li> <li>Th\u00eam ph\u1ea7n t\u1eed \u1edf ph\u00eda sau <code>queue</code> v\u00e0o <code>ans</code>.</li> </ul> <p>\u0110\u1ed9 ph\u1ee9c t\u1ea1p l\u00e0 \\(\\text{O}(n)\\), v\u00ec m\u1ed7i ph\u1ea7n t\u1eed ch\u1ec9 \u0111\u01b0\u1ee3c \u0111\u01b0a v\u00e0o v\u00e0 l\u1ea5y kh\u1ecfi queue nhi\u1ec1u nh\u1ea5t 1 l\u1ea7n.</p> Code  C++ Python <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; maxSlidingWindow(vector&lt;int&gt; &amp;nums, int k) {\n        if (k == 1)\n            return nums;\n\n        vector&lt;int&gt; ans;\n\n        deque&lt;int&gt; dq;\n\n        for (int i = 0; i &lt; nums.size(); i++) {\n            while (!dq.empty() &amp;&amp; i - dq.back() &gt;= k)\n                dq.pop_back();\n            while (!dq.empty() &amp;&amp; nums[dq.front()] &lt;= nums[i])\n                dq.pop_front();\n            dq.push_front(i);\n            if (i &gt;= k - 1) {\n                ans.push_back(nums[dq.back()]);\n            }\n        }\n\n        return ans;\n    }\n};\n</code></pre> <pre><code>\n</code></pre>"},{"location":"leetcode/2453/","title":"2453.\u00a0Destroy Sequential Targets","text":"<p>Medium</p> <p>Cho m\u1ea3ng <code>nums</code> \u0111\u01b0\u1ee3c \u0111\u00e1nh s\u1ed1 b\u1eaft \u0111\u1ea7u t\u1eeb \\(0\\) v\u00e0 g\u1ed3m c\u00e1c s\u1ed1 nguy\u00ean d\u01b0\u01a1ng. M\u1ed7i s\u1ed1 c\u1ee7a m\u1ea3ng <code>nums</code> bi\u1ec3u di\u1ec5n m\u1ed9t m\u1ee5c ti\u00eau \u1edf tr\u00ean tr\u1ee5c s\u1ed1. Ngo\u00e0i ra b\u1ea1n \u0111\u01b0\u1ee3c cho m\u1ed9t s\u1ed1 nguy\u00ean d\u01b0\u01a1ng <code>space</code>.</p> <p>B\u1ea1n c\u00f3 m\u1ed9t c\u1ed7 m\u00e1y c\u00f3 th\u1ec3 ti\u00eau di\u1ec7t c\u00e1c m\u1ee5c ti\u00eau. N\u1ebfu n\u1ea1p cho m\u00e1y m\u1ed9t s\u1ed1 <code>nums[i]</code> th\u00ec m\u00e1y s\u1ebd ti\u00eau di\u1ec7t \u0111\u01b0\u1ee3c t\u1ea5t c\u1ea3 c\u00e1c s\u1ed1 nguy\u00ean c\u00f3 d\u1ea1ng <code>nums[i] + c * space</code>, trong \u0111\u00f3 <code>c</code> l\u00e0 m\u1ed9t s\u1ed1 nguy\u00ean kh\u00f4ng \u00e2m b\u1ea5t k\u1ef3. B\u1ea1n mu\u1ed1n ti\u00eau di\u1ec7u nhi\u1ec1u m\u1ee5c ti\u00eau trong m\u1ea3ng <code>nums</code> nh\u1ea5t c\u00f3 th\u1ec3.</p> <p>Y\u00eau c\u1ea7u: H\u00e3y t\u00ecm gi\u00e1 tr\u1ecb <code>nums[i]</code> nh\u1ecf nh\u1ea5t m\u00e0 b\u1ea1n c\u00f3 th\u1ec3 n\u1ea1p cho c\u1ed7 m\u00e1y sao cho s\u1ed1 l\u01b0\u1ee3ng m\u1ee5c ti\u00eau trong m\u1ea3ng <code>nums</code> b\u1ecb ti\u00eau di\u1ec7t l\u00e0 nhi\u1ec1u nh\u1ea5t.</p> <p>R\u00e0ng bu\u1ed9c</p> <ul> <li>\\(1 \\leq\\) <code>nums.length</code> \\(\\leq 10^5\\)</li> <li>\\(1 \\leq\\) <code>nums[i]</code> \\(\\leq 10^9\\)</li> <li>\\(1 \\leq\\) <code>space</code> \\(\\leq 10^9\\)</li> </ul> <p>V\u00ed d\u1ee5</p> <p>V\u00ed d\u1ee5 1</p> <p>Input<pre><code>nums = [3,7,8,1,1,5], space = 2\n</code></pre> Output<pre><code>1\n</code></pre> Gi\u1ea3i th\u00edch: Ta ch\u1ecdn <code>nums[3]</code> \u0111\u1ec3 n\u1ea1p cho c\u1ed7 m\u00e1y. C\u1ed7 m\u00e1y s\u1ebd ti\u00eau di\u1ec7t \u0111\u01b0\u1ee3c 5 m\u1ee5c ti\u00eau l\u00e0 <code>1</code>, <code>3</code>, <code>5</code>, <code>7</code>, <code>9</code>. Kh\u00f4ng c\u00f3 c\u00e1ch n\u00e0o ti\u00eau di\u1ec7t \u0111\u01b0\u1ee3c nhi\u1ec1u h\u01a1n 5 m\u1ee5c ti\u00eau.</p> <p>V\u00ed d\u1ee5 2</p> <p>Input<pre><code>nums = [1,3,5,2,4,6], space = 2\n</code></pre> Output<pre><code>1\n</code></pre> Gi\u1ea3i th\u00edch: Ta ch\u1ecdn <code>nums[0]</code> ho\u1eb7c <code>nums[3]</code> \u0111\u1ec3 n\u1ea1p cho c\u1ed7 m\u00e1y, c\u1ed7 m\u00e1y c\u00f3 th\u1ec3 ti\u00eau di\u1ec7t \u0111\u01b0\u1ee3c 3 m\u1ee5c ti\u00eau. Kh\u00f4ng c\u00f3 c\u00e1ch n\u00e0o ti\u00eau di\u1ec7t \u0111\u01b0\u1ee3c nhi\u1ec1u h\u01a1n 3 m\u1ee5c ti\u00eau. V\u00ec <code>nums[0]</code> \\(&lt;\\) <code>nums[3]</code> n\u00ean ta ch\u1ecdn <code>nums[0]</code>.</p> Link n\u1ed9p b\u00e0i <p> 2453.\u00a0Destroy Sequential Targets</p> Solution <p>Nh\u1eadn x\u00e9t: Khi n\u1ea1p cho c\u1ed7 m\u00e1y m\u1ed9t s\u1ed1 <code>x</code> th\u00ec t\u1ea5t c\u1ea3 c\u00e1c s\u1ed1 c\u00f3 c\u00f9ng s\u1ed1 d\u01b0 v\u1edbi <code>x</code> khi chia cho <code>space</code> \u0111\u1ec1u s\u1ebd b\u1ecb ti\u00eau di\u1ec7t.</p> <p>V\u1eady ta c\u1ea7n t\u00ecm <code>nums[i]</code> sao cho trong m\u1ea3ng <code>nums</code> ch\u1ee9a nhi\u1ec1u s\u1ed1 c\u00f3 c\u00f9ng s\u1ed1 d\u01b0 v\u1edbi n\u00f3 nh\u1ea5t khi chia cho <code>space</code>. Ta l\u00e0m nh\u01b0 sau:</p> <ul> <li>T\u1ea1o m\u1ed9t hash table <code>counts</code> trong \u0111\u00f3 <code>counts[x]</code> l\u00e0 s\u1ed1 l\u01b0\u1ee3ng ph\u1ea7n t\u1eed trong m\u1ea3ng <code>nums</code> chia cho <code>space</code> d\u01b0 <code>x</code>.</li> <li>T\u00ecm <code>maxTarget</code> l\u00e0 \\(\\max\\) c\u1ee7a <code>counts</code></li> <li>Trong c\u00e1c <code>nums[i]</code> c\u00f3 <code>counts[nums[i] % space] == maxTarget</code>, ch\u1ecdn ra s\u1ed1 nh\u1ecf nh\u1ea5t. \u0110\u00f3 ch\u00ednh l\u00e0 k\u1ebft qu\u1ea3 b\u00e0i to\u00e1n.</li> </ul> Code  C++ Python <pre><code>class Solution {\npublic:\n    int destroyTargets(vector&lt;int&gt; &amp;nums, int space) {\n        unordered_map&lt;int, int&gt; counts;\n\n        int maxTarget = 0;\n        for (int i = 0; i &lt; nums.size(); i++) {\n            int x = nums[i] % space;\n            maxTarget = max(maxTarget, ++counts[x]);\n        }\n\n        int ans = 1e9;\n        for (int i = 0; i &lt; nums.size(); i++)\n            if (counts[nums[i] % space] == maxTarget)\n                ans = min(ans, nums[i]);\n\n        return ans;\n    }\n};\n</code></pre> <pre><code>class Solution:\n    def destroyTargets(self, nums: List[int], space: int) -&gt; int:\n        counts = defaultdict(int)\n        maxTarget = 0\n\n        for num in nums:\n            x = num % space\n            counts[x] += 1\n            maxTarget = max(maxTarget, counts[x])\n\n        return min(n for n in nums if counts[n % space] == maxTarget)\n</code></pre>"},{"location":"leetcode/2485/","title":"2485.\u00a0Find the Pivot Integer","text":"<p>Easy</p> <p>Cho m\u1ed9t s\u1ed1 t\u1ef1 nhi\u00ean \\(n\\). H\u00e3y t\u00ecm s\u1ed1 t\u1ef1 nhi\u00ean \\(x\\) sao cho t\u1ed5ng c\u1ee7a c\u00e1c s\u1ed1 t\u1eeb \\(1\\) \u0111\u1ebfn \\(x\\) b\u1eb1ng t\u1ed5ng c\u1ee7a c\u00e1c s\u1ed1 t\u1eeb \\(x\\) \u0111\u1ebfn \\(n\\). N\u1ebfu kh\u00f4ng c\u00f3 s\u1ed1 t\u1ef1 nhi\u00ean n\u00e0o tho\u1ea3 m\u00e3n th\u00ec in ra \\(-1\\).</p> <p>Input</p> <ul> <li>G\u1ed3m m\u1ed9t d\u00f2ng duy nh\u1ea5t ch\u1ee9a \\(n\\)</li> </ul> <p>Output</p> <ul> <li>G\u1ed3m m\u1ed9t d\u00f2ng duy nh\u1ea5t l\u00e0 k\u1ebft qu\u1ea3 c\u1ee7a b\u00e0i to\u00e1n</li> </ul> <p>R\u00e0ng bu\u1ed9c</p> <ul> <li>\\(1 \\leq n \\leq 10^3\\)</li> </ul> <p>V\u00ed d\u1ee5</p> <p>V\u00ed d\u1ee5 1</p> <p>Input<pre><code>8\n</code></pre> Output<pre><code>6\n</code></pre> Gi\u1ea3i th\u00edch: \\(1 + 2 + 3 + 4 + 5 + 6 = 6 + 7 + 8 = 21\\).</p> <p>V\u00ed d\u1ee5 2</p> <p>Input<pre><code>1\n</code></pre> Output<pre><code>1\n</code></pre></p> <p>V\u00ed d\u1ee5 3</p> <p>Input<pre><code>4\n</code></pre> Output<pre><code>-1\n</code></pre></p> Link n\u1ed9p b\u00e0i <p> 2485.\u00a0Find the Pivot Integer</p> Solution <p>To\u00e1n th\u00f4ng th\u01b0\u1eddng:</p> \\[ \\begin{align*}     &amp;&amp;1 + 2 + \\dots + x &amp;= x + (x + 1) + \\dots + n \\\\  \\Leftrightarrow &amp;&amp;\\dfrac{x(x+ 1)}{2} &amp;= \\dfrac{n(n+ 1)}{2} - \\dfrac{(x - 1)x}{2} \\\\  \\Leftrightarrow &amp;&amp; 2x^2 &amp;= n(n+1) \\\\  \\Leftrightarrow &amp;&amp; x &amp;= \\sqrt{\\dfrac{n(n + 1)}{2}}, \\quad \\text{do } x &gt; 0 \\end{align*} \\] <p>Nh\u01b0 v\u1eady ta ch\u1ec9 c\u1ea7n ki\u1ec3m tra \\(\\dfrac{n(n + 1)}{2}\\) c\u00f3 ph\u1ea3i s\u1ed1 ch\u00ednh ph\u01b0\u01a1ng kh\u00f4ng l\u00e0 \u0111\u01b0\u1ee3c. N\u1ebfu c\u00f3 th\u00ec tr\u1ea3 v\u1ec1 \\(x\\) nh\u01b0 gi\u1ea3i \u1edf tr\u00ean, n\u1ebfu kh\u00f4ng th\u00ec tr\u1ea3 v\u1ec1 <code>-1</code>.</p> <p>\u0110\u1ed9 ph\u1ee9c t\u1ea1p l\u00e0 \\(\\text{O}(1)\\). B\u00e0i n\u00e0y \u0111\u00e1ng l\u1ebd ph\u1ea3i cho gi\u1edbi h\u1ea1n \\(n\\) l\u00e0 \\(10^9\\).</p> Code  C++ Python <pre><code>class Solution {\npublic:\n    int pivotInteger(int n) {\n        int x = (int) sqrt((n * n + n) / 2);\n        return 2 * x * x == n * (n + 1) ? x : -1;\n    }\n};\n</code></pre> <pre><code>class Solution:\ndef pivotInteger(self, n: int) -&gt; int:\n    ans = int((n * (n + 1) // 2) ** .5)\n    if ans * ans == n * (n + 1) // 2:\n        return ans\n    else:\n        return -1\n</code></pre>"},{"location":"leetcode/3227/","title":"3227. Vowels Game in a String","text":"<p>Medium</p> <p>Alice v\u00e0 Bob \u0111ang ch\u01a1i m\u1ed9t tr\u00f2 ch\u01a1i tr\u00ean x\u00e2u.</p> <p>B\u1ea1n \u0111\u01b0\u1ee3c cho m\u1ed9t x\u00e2u <code>s</code>, Alice v\u00e0 Bob s\u1ebd l\u1ea7n l\u01b0\u1ee3t ch\u01a1i nh\u01b0 sau:</p> <ul> <li>\u1ede l\u01b0\u1ee3t ch\u01a1i c\u1ee7a Alice, ph\u1ea3i xo\u00e1 \u0111i m\u1ed9t x\u00e2u con kh\u00e1c r\u1ed7ng c\u1ee7a <code>s</code> sao cho x\u00e2u con \u0111\u00f3 ch\u1ee9a m\u1ed9t s\u1ed1 l\u1ebb c\u00e1c nguy\u00ean \u00e2m.</li> <li>\u1edf l\u01b0\u1ee3t ch\u01a1i c\u1ee7a Bob, ph\u1ea3i xo\u00e1 \u0111i m\u1ed9t x\u00e2u con kh\u00e1c r\u1ed7ng c\u1ee7a <code>s</code> sao cho x\u00e2u con \u0111\u00f3 ch\u1ee9a m\u1ed9t s\u1ed1 ch\u1eb5n c\u00e1c nguy\u00ean \u00e2m.</li> </ul> <p>Alice l\u00e0 ng\u01b0\u1eddi ch\u01a1i tr\u01b0\u1edbc. Ng\u01b0\u1eddi ch\u01a1i n\u00e0o \u0111\u1ebfn l\u01b0\u1ee3t c\u1ee7a m\u00ecnh kh\u00f4ng th\u1ec3 th\u1ef1c hi\u1ec7n \u0111\u01b0\u1ee3c y\u00eau c\u1ea7u s\u1ebd l\u00e0 ng\u01b0\u1eddi thua cu\u1ed9c.</p> <p>Tr\u1ea3 v\u1ec1 <code>true</code> n\u1ebfu Alice l\u00e0 ng\u01b0\u1eddi th\u1eafng trong tr\u00f2 ch\u01a1i. Gi\u1ea3 thi\u1ebft r\u1eb1ng c\u1ea3 2 ng\u01b0\u1eddi ch\u01a1i \u0111\u1ec1u ch\u01a1i m\u1ed9t c\u00e1ch t\u1ed1i \u01b0u.</p> <p>R\u00e0ng bu\u1ed9c:</p> <ul> <li>\\(1 \\leq\\) <code>s.length</code> \\(\\leq 10^5\\)</li> <li><code>s</code> ch\u1ec9 bao g\u1ed3m c\u00e1c ch\u1eef c\u00e1i ti\u1ebfng Anh vi\u1ebft th\u01b0\u1eddng.</li> </ul> <p>V\u00ed d\u1ee5</p> <p>V\u00ed d\u1ee5 1</p> <p>Input<pre><code>s = \"leetcoder\"\n</code></pre> Output<pre><code>true\n</code></pre> Gi\u1ea3i th\u00edch:</p> <ul> <li>Alice ch\u01a1i tr\u01b0\u1edbc, xo\u00e1 x\u00e2u con <code>leetco</code>, x\u00e2u <code>s</code> c\u00f2n l\u1ea1i <code>der</code></li> <li>Bob ch\u01a1i ti\u1ebfp, ch\u1ec9 c\u00f3 th\u1ec3 xo\u00e1 <code>d</code> ho\u1eb7c <code>r</code>, x\u00e2u <code>s</code> c\u00f2n l\u1ea1i <code>er</code> ho\u1eb7c <code>de</code></li> <li>Alicie ch\u01a1i ti\u1ebfp, d\u00f9 \u1edf l\u01b0\u1ee3t tr\u01b0\u1edbc Bob c\u00f3 ch\u01a1i th\u1ebf n\u00e0o th\u00ec \u1edf l\u01b0\u1ee3t n\u00e0y Alice \u0111\u1ec1u c\u00f3 th\u1ec3 xo\u00e1 to\u00e0n b\u1ed9 x\u00e2u <code>s</code></li> <li>Bob ch\u01a1i ti\u1ebfp v\u00e0 kh\u00f4ng th\u1ec3 th\u1ef1c hi\u1ec7n \u0111\u01b0\u1ee3c l\u01b0\u1ee3t ch\u01a1i c\u1ee7a m\u00ecnh, v\u00ec th\u1ebf Alice th\u1eafng.</li> </ul> <p>V\u00ed d\u1ee5 2</p> <p>Input<pre><code>s = \"bbcd\"\n</code></pre> Output<pre><code>false\n</code></pre> Gi\u1ea3i th\u00edch: Alice ch\u01a1i \u0111\u1ea7u ti\u00ean v\u00e0 kh\u00f4ng th\u1ec3 th\u1ef1c hi\u1ec7n \u0111\u01b0\u1ee3c l\u01b0\u1ee3t ch\u01a1i c\u1ee7a m\u00ecnh, v\u00ec th\u1ebf Alice thua.</p> Link n\u1ed9p b\u00e0i <p> 3227. Vowels Game in a String</p> Solution <p>D\u1ec5 th\u1ea5y n\u1ebfu <code>s</code> kh\u00f4ng c\u00f3 nguy\u00ean \u00e2m n\u00e0o, ch\u1eafc ch\u1eafn Alice thua.</p> <p>N\u1ebfu <code>s</code> c\u00f3 \\(k\\) nguy\u00ean \u00e2m (\\(k &gt; 0\\)), ta chia l\u00e0m 2 tr\u01b0\u1eddng h\u1ee3p:</p> <ul> <li>N\u1ebfu \\(k\\) l\u1ebb, Alice c\u00f3 th\u1ec3 xo\u00e1 to\u00e0n b\u1ed9 x\u00e2u <code>s</code> \u1edf l\u01b0\u1ee3t \u0111\u1ea7u ti\u00ean v\u00e0 ch\u1eafc ch\u1eafn th\u1eafng do \u1edf l\u01b0\u1ee3t ti\u1ebfp theo Bob kh\u00f4ng th\u1ec3 th\u1ef1c hi\u1ec7n l\u01b0\u1ee3t ch\u01a1i c\u1ee7a m\u00ecnh.</li> <li>N\u1ebfu \\(k\\) ch\u1eb5n, Alice c\u00f3 th\u1ec3 th\u1eafng b\u1eb1ng c\u00e1ch sau:<ul> <li>L\u01b0\u1ee3t 1: Alice xo\u00e1 \u0111i 1 nguy\u00ean \u00e2m b\u1ea5t k\u1ef3. X\u00e2u <code>s</code> b\u00e2y gi\u1edd c\u00f3 s\u1ed1 nguy\u00ean \u00e2m l\u00e0 l\u1ebb</li> <li>L\u01b0\u1ee3t 2: Bob ph\u1ea3i xo\u00e1 \u0111i m\u1ed9t s\u1ed1 ch\u1eb5n c\u00e1c nguy\u00ean \u00e2m, x\u00e2u <code>s</code> b\u00e2y gi\u1edd c\u00f3 s\u1ed1 nguy\u00ean \u00e2m l\u00e0 l\u1ebb v\u00e0 kh\u00f4ng th\u1ec3 l\u00e0 x\u00e2u r\u1ed7ng.</li> <li>L\u01b0\u1ee3t 3: Alice xo\u00e1 to\u00e0n b\u1ed9 x\u00e2u <code>s</code>. X\u00e2u <code>s</code> b\u00e2y gi\u1edd l\u00e0 x\u00e2u r\u1ed7ng.</li> <li>L\u01b0\u1ee3t 4: Bob kh\u00f4ng th\u1ec3 th\u1ef1c hi\u1ec7n l\u01b0\u1ee3t ch\u01a1i c\u1ee7a m\u00ecnh. Alice th\u1eafng.</li> </ul> </li> </ul> <p>V\u1eady, Alice thua n\u1ebfu x\u00e2u <code>s</code> kh\u00f4ng c\u00f3 nguy\u00ean \u00e2m n\u00e0o v\u00e0 th\u1eafng trong tr\u01b0\u1eddng h\u1ee3p ng\u01b0\u1ee3c l\u1ea1i.</p> Code  C++ Python <pre><code>class Solution {\npublic:\n    bool doesAliceWin(string s) {\n        for (char c : s)\n            if (c == 'a' || c == 'i' || c == 'o' || c == 'e' || c == 'u') return true;\n        return false;   \n    }\n};\n</code></pre> <pre><code>class Solution:\n    def doesAliceWin(self, s: str) -&gt; bool:\n        for c in s:\n            if c in \"aoeiu\": return True\n        return False\n</code></pre>"},{"location":"leetcode/714/","title":"714.\u00a0Best Time to Buy and Sell Stock with Transaction Fee","text":"<p>Medium</p> <p>Cho m\u1ea3ng <code>prices</code> g\u1ed3m <code>n</code> ph\u1ea7n t\u1eed, trong \u0111\u00f3 <code>prices[i]</code> l\u00e0 gi\u00e1 c\u1ee7a m\u1ed9t lo\u1ea1i c\u1ed5 phi\u1ebfu v\u00e0o ng\u00e0y th\u1ee9 <code>i</code>. Ph\u00ed giao d\u1ecbch l\u00e0 <code>fee</code>.</p> <p>H\u00e3y t\u00ecm l\u1ee3i nhu\u1eadn t\u1ed1i \u0111a c\u00f3 th\u1ec3 \u0111\u1ea1t \u0111\u01b0\u1ee3c nh\u1edd vi\u1ec7c mua b\u00e1n c\u1ed5 phi\u1ebfu. B\u1ea1n c\u00f3 th\u1ec3 giao d\u1ecbch bao nhi\u00eau l\u1ea7n b\u1ea1n mu\u1ed1n, nh\u01b0ng b\u1ea1n c\u1ea7n ph\u1ea3i tr\u1ea3 <code>fee</code> \u0111\u1ed3ng cho m\u1ed7i giao d\u1ecbch.</p> <p>L\u01b0u \u00fd: B\u1ea1n kh\u00f4ng \u0111\u01b0\u1ee3c ph\u00e9p tham gia nhi\u1ec1u giao d\u1ecbch c\u00f9ng m\u1ed9t l\u00fac, ngh\u0129a l\u00e0 b\u1ea1n ph\u1ea3i b\u00e1n c\u1ed5 phi\u1ebfu th\u00ec m\u1edbi \u0111\u01b0\u1ee3c ti\u1ebfp t\u1ee5c mua l\u1ea1i.</p> <p>Input</p> <ul> <li>D\u00f2ng \u0111\u1ea7u ti\u00ean ch\u1ee9a 2 s\u1ed1 nguy\u00ean <code>n</code> v\u00e0 <code>fee</code></li> <li>D\u00f2ng th\u1ee9 hai ch\u1ee9a <code>n</code> s\u1ed1 nguy\u00ean c\u1ee7a <code>prices</code></li> </ul> <p>Output</p> <ul> <li>G\u1ed3m m\u1ed9t d\u00f2ng duy nh\u1ea5t l\u00e0 k\u1ebft qu\u1ea3 c\u1ee7a b\u00e0i to\u00e1n</li> </ul> <p>R\u00e0ng bu\u1ed9c</p> <ul> <li>\\(1 \\leq\\) <code>n</code> \\(\\leq 5 \\times 10^4\\)</li> <li>\\(1 \\leq\\) <code>prices[i]</code> \\(&lt; 5 \\times 10^4\\)</li> <li>\\(0 \\leq\\) <code>fee</code> \\(&lt; 5 \\times 10^4\\)</li> </ul> <p>V\u00ed d\u1ee5</p> <p>V\u00ed d\u1ee5 1</p> <p>Input<pre><code>6 2\n1 3 2 8 4 9\n</code></pre> Output<pre><code>8\n</code></pre> Gi\u1ea3i th\u00edch: L\u1ee3i nhu\u1eadn t\u1ed1i \u0111a \u0111\u1ea1t \u0111\u01b0\u1ee3c b\u1eb1ng c\u00e1ch:</p> <ul> <li>Mua \u1edf ng\u00e0y 0, gi\u00e1 b\u1eb1ng \\(1\\)</li> <li>B\u00e1n \u1edf ng\u00e0y 3, gi\u00e1 b\u1eb1ng \\(8\\)</li> <li>Mua \u1edf ng\u00e0y 4, gi\u00e1 b\u1eb1ng \\(4\\)</li> <li>B\u00e1n \u1edf ng\u00e0y 5, gi\u00e1 b\u1eb1ng \\(9\\)</li> </ul> <p>T\u1ed5ng l\u1ee3i nhu\u1eadn l\u00e0 \\(((8 - 1) - 2) + ((9 - 4) - 2) = 8\\).</p> <p>V\u00ed d\u1ee5 2</p> <p>Input<pre><code>6 3\n1 3 7 5 10 3\n</code></pre> Output<pre><code>6\n</code></pre></p> Link n\u1ed9p b\u00e0i <p> 714.\u00a0Best Time to Buy and Sell Stock with Transaction Fee</p> Solution <p>Quy ho\u1ea1ch \u0111\u1ed9ng: G\u1ecdi <code>free[i]</code> l\u00e0 l\u1ee3i nhu\u1eadn l\u1edbn nh\u1ea5t n\u1ebfu kh\u00f4ng gi\u1eef c\u1ed5 phi\u1ebfu v\u00e0o ng\u00e0y th\u1ee9 <code>i</code> v\u00e0 <code>hold[i]</code> l\u00e0 l\u1ee3i nhu\u1eadn l\u1edbn nh\u1ea5t n\u1ebfu gi\u1eef c\u1ed5 phi\u1ebfu v\u00e0o ng\u00e0y th\u1ee9 <code>i</code>.</p> <p>C\u00f4ng th\u1ee9c quy ho\u1ea1ch \u0111\u1ed9ng:</p> <ul> <li><code>free[i] = max(free[i - 1], hold[i - 1] + prices[i] - fee)</code> (Ho\u1eb7c tr\u01b0\u1edbc \u0111\u00f3 \u0111ang kh\u00f4ng gi\u1eef c\u1ed5 phi\u1ebfu v\u00e0 sau \u0111\u00f3 kh\u00f4ng l\u00e0m g\u00ec v\u00e0o ng\u00e0y th\u1ee9 <code>i</code>, ho\u1eb7c b\u00e1n c\u1ed5 phi\u1ebfu \u0111\u00f3 v\u00e0o ng\u00e0y th\u1ee9 <code>i</code>);</li> <li><code>hold[i] = max(hold[i - 1], free[i - 1] - prices[i]</code> (Ho\u1eb7c tr\u01b0\u1edbc \u0111\u00f3 \u0111ang gi\u1eef c\u1ed5 phi\u1ebfu v\u00e0 sau \u0111\u00f3 kh\u00f4ng l\u00e0m g\u00ec v\u00e0o ng\u00e0y th\u1ee9 <code>i</code>, ho\u1eb7c tr\u01b0\u1edbc \u0111\u00f3 \u0111ang kh\u00f4ng gi\u1eef c\u1ed5 phi\u1ebfu v\u00e0 mua c\u1ed5 phi\u1ebfu v\u00e0o ng\u00e0y th\u1ee9 <code>i</code>.</li> </ul> <p>K\u1ebft qu\u1ea3 b\u00e0i to\u00e1n l\u00e0 <code>free[n - 1]</code> (c\u00e1c ch\u1ec9 s\u1ed1 \u0111\u01b0\u1ee3c \u0111\u00e1nh s\u1ed1 b\u1eaft \u0111\u1ea7u t\u1eeb \\(0\\)).</p> <p>V\u00ec <code>free[i]</code> v\u00e0 <code>hold[i]</code> ch\u1ec9 ph\u1ee5 thu\u1ed9c v\u00e0o <code>free[i - 1]</code> v\u00e0 <code>hold[i - 1]</code>, n\u00ean thay v\u00ec d\u00f9ng m\u1ea3ng \u0111\u1ec3 l\u01b0u th\u00ec ta ch\u1ec9 c\u1ea7n m\u1ed9t bi\u1ebfn <code>free</code> \u0111\u1ec3 l\u01b0u l\u1ee3i nhu\u1eadn l\u1edbn nh\u1ea5t n\u1ebfu kh\u00f4ng gi\u1eef c\u1ed5 phi\u1ebfu v\u00e0o ng\u00e0y th\u1ee9 <code>i</code> v\u00e0 m\u1ed9t bi\u1ebfn <code>hold</code> \u0111\u1ec3 l\u01b0u l\u1ee3i nhu\u1eadn l\u1edbn nh\u1ea5t n\u1ebfu gi\u1eef c\u1ed5 phi\u1ebfu v\u00e0o ng\u00e0y th\u1ee9 <code>i</code>. L\u00fac duy\u1ec7t ta s\u1ebd c\u1eadp nh\u1eadt 2 bi\u1ebfn n\u00e0y.</p> <p>\u0110\u1ed9 ph\u1ee9c t\u1ea1p \\(\\text{O}(n)\\).</p> Code  C++ Python <pre><code>class Solution {\npublic:\n    int maxProfit(vector&lt;int&gt;&amp; prices, int fee) {\n        int n = prices.size();\n        int free = 0, hold = -prices[0];\n\n        for (int i = 1; i &lt; n; i++) {\n            int tmp = hold;\n            hold = max(hold, free - prices[i]);\n            free = max(free, tmp + prices[i] - fee);\n        }\n\n        return free;\n    }\n};\n</code></pre> <pre><code>class Solution:\ndef maxProfit(self, prices: List[int], fee: int) -&gt; int:\n    free = 0\n    hold = -prices[0]\n\n    for i in range(1, len(prices)):\n        hold, free = max(hold, free - prices[i]), max(free, hold + prices[i] - fee)\n\n    return free\n</code></pre>"},{"location":"blog/category/vietnamese-flag_vn/","title":"Vietnamese","text":""},{"location":"blog/category/movie_camera-gi%E1%BA%A3i-tr%C3%AD/","title":"Gi\u1ea3i tr\u00ed","text":""},{"location":"blog/category/english-flag_gb/","title":"English","text":""},{"location":"blog/category/busts_in_silhouette-interview-preparation/","title":"Interview Preparation","text":""},{"location":"blog/category/computer-system-design/","title":"System Design","text":""},{"location":"tags/","title":"Tags","text":""},{"location":"tags/#cap-theorem","title":"CAP theorem","text":"<ul> <li>The CAP theorem</li> </ul>"},{"location":"tags/#hadoop","title":"Hadoop","text":"<ul> <li>Gi\u1edbi thi\u1ec7u v\u1ec1 Apache Hadoop</li> </ul>"},{"location":"tags/#load-balancing","title":"Load Balancing","text":"<ul> <li>Load Balancing Algorithms</li> </ul>"}]}