site_name: Duy's Notebook
site_url: https://duynm98.github.io/notebook/
site_description: My Notebook
site_author: myAwesomeCompany Inc
extra_css:
    - "css/extra_css"
    - stylesheets/extra.css

repo_url: https://github.com/duynm98/notebook
repo_name: duynm98/notebook

nav:
    - Home: index.md
    - LeetCode series:
          - leetcode/index.md
    - Courses:
          - course/index.md
          - Advanced Python:
              - course/advance-python/index.md
              - Section 1. Variables & Memory Management: course/advance-python/S01-Summary.md
              - Section 2. Integer types: course/advance-python/S02-Summary.md
              - Section 3. Float: course/advance-python/S03-Summary.md
              - Section 4. Decimal: course/advance-python/S04-Summary.md
              - Section 7. Decorator: course/advance-python/S07-Summary.md
              - Section 8. Named Tuples: course/advance-python/S08-Summary.md
              - Section 9. Sequence Types: course/advance-python/S09-Summary.md
              - Section 10. Iterators and Iterables: course/advance-python/S10-Summary.md
              - Section 11. Generators: course/advance-python/S11-Summary.md
              - Section 12. Context Managers: course/advance-python/S12-Summary.md
          - Python Concurrency:
              - course/python-concurrency/index.md
              - Section 1. Multithreading:
                - Lecture 1. Understanding Processes and Threads: course/python-concurrency/S01L01-Understanding-Processes-and-Threads.md
                - Lecture 2. Threading: course/python-concurrency/S01L02-Threading.md
                - Lecture 3. Extending the Thread class: course/python-concurrency/S01L03-Extending-the-Thread-class.md
                - Lecture 4. Returning values from a Thread: course/python-concurrency/S01L04-Returning-values-from-a-Thread.md
                - Lecture 5. Multithreading Example: course/python-concurrency/S01L05-Multithreading-Example.md
                - Lecture 6. Daemon threads: course/python-concurrency/S01L06-Daemon-threads.md
                - Lecture 7. Thread Pools: course/python-concurrency/S01L07-Thread-Pools.md
                - Section Summary: course/python-concurrency/S01-Summary.md
              - Section 2. Thread Synchronization Techniques:
                - Lecture 1. Lock: course/python-concurrency/S02L01-Lock.md
                - Lecture 2. Event: course/python-concurrency/S02L02-Event.md
                - Lecture 3. How to stop a thread: course/python-concurrency/S02L03-How-to-stop-a-thread.md
                - Lecture 4. Semaphore: course/python-concurrency/S02L04-Semaphore.md
              - Section 3. Sharing Data Between Threads:
                - Lecture 1. Thread-safe Queue: course/python-concurrency/S03L01-Thread-safe-Queue.md
              - Section 4. Multiprocessing:
                - Lecture 1. Multiprocessing: course/python-concurrency/S04L01-Multiprocessing.md
                - Lecture 2. Process Pools: course/python-concurrency/S04L02-Process-Pools.md
              - Section 5. Async I/O:
                - Lecture 1. Understanding Event Loop: course/python-concurrency/S05L01-Understanding-Event-Loop.md
                - Lecture 2. async/await: course/python-concurrency/S05L02-async-await.md
                - Lecture 3. Creating tasks: course/python-concurrency/S05L03-Creating-tasks.md
                - Lecture 4. Canceling tasks: course/python-concurrency/S05L04-Canceling-tasks.md
                - Lecture 5. Canceling a task with a timeout: course/python-concurrency/S05L05-Canceling-a-task-with-a-timeout.md
                - Lecture 6. asyncio.wait(): course/python-concurrency/S05L06-asyncio-wait.md
                - Lecture 7. Future: course/python-concurrency/S05L07-Future.md
                - Lecture 8. Running multiple tasks concurrently with gather(): course/python-concurrency/S05L08-Running-multiple-tasks-concurrently-with-gather.md
          - Python OOP:
              - course/python-oop/index.md
              - Section 1. Classes and objects:
                - Lecture 1. Object-oriented programming: course/python-oop/S01L01-Object-oriented-programming.md
                - Lecture 2. Class: course/python-oop/S01L02-Class.md
                - Lecture 3. Class variables: course/python-oop/S01L03-Class-variables.md
                - Lecture 4. Python Methods: course/python-oop/S01L04-Instance-methods.md
                - Lecture 5. __init__(): course/python-oop/S01L05-__init__.md
                - Lecture 6. Instance variables: course/python-oop/S01L06-Instance-variables.md
                - Lecture 7. Private attributes: course/python-oop/S01L07-Private-attributes.md
                - Lecture 8. Class attributes: course/python-oop/S01L08-Class-attributes.md
                - Lecture 9. Class methods: course/python-oop/S01L09-Class-methods.md
                - Lecture 10. Static methods: course/python-oop/S01L10-Static-methods.md
              - Section 2. Special methods:
                - Section Summary: course/python-oop/S02-Summary.md
              - Section 3. Property:
                - Lecture 1. Property: course/python-oop/S03L01-Property.md
                - Lecture 2. @property decorator: course/python-oop/S03L02-property-decorator.md
                - Lecture 3. Read-only property: course/python-oop/S03L03-Read-only-property.md
                - Lecture 4. Delete a property: course/python-oop/S01L04-Delete-a-property.md
                - Section Summary: course/python-oop/S03-Summary.md
          # - Mock System Design Interview:
            # - course/system-design-interview/index.md
            # - Design a URL Shortening Service: course/system-design-interview/url-shortening-service.md
            # - Design a Restaurant Reservation System: course/system-design-interview/restaurant-reservation-system.md
          # - Machine Learning Algorithms: course/ml-algorithms/index.md
    - Blog:
          - blog/index.md

theme:
    palette:
        # # Palette toggle for automatic mode
        # - media: "(prefers-color-scheme)"
        #   primary: custom
        #   toggle:
        #       icon: material/brightness-auto
        #       name: Switch to light mode

        # Palette toggle for light mode
        - media: "(prefers-color-scheme: dark)"
          scheme: slate
          primary: black
          accent: teal
          toggle:
              icon: material/brightness-7
              name: Switch to light mode

        # Palette toggle for dark mode
        - media: "(prefers-color-scheme: light)"
          scheme: default
          # primary: custom
          accent: teal
          toggle:
              icon: material/brightness-4
              name: Switch to dark mode

    name: "material"
    language: en
    #palette:
    #primary: 'indigo'
    #accent: 'indigo'
    font:
        text: "Roboto"
        code: "Roboto Mono"
    icon:
        logo: material/library
        favicon: material/chevron-right-circle
        annotation: material/chevron-right-circle
    features:
        - navigation.instant
        - navigation.instant.prefetch
        - navigation.instant.progress
        - navigation.tabs
        # - navigation.tabs.sticky # Tabs always visible
        # - navigation.expand
        - navigation.instant.progress
        # - navigation.sections
        - navigation.path
        - navigation.indexes
        # - navigation.footer
        - navigation.top # Back-to-top button
        - header.autohide
        - toc.follow
        # - toc.integrate # Tables of content on the left side
        - content.code.copy
        - content.code.select
        - content.code.annotate
        - content.footnote.tooltips
        - content.tooltips
        - search.suggest # the search will display the likeliest completion for the last word which can be accepted with the Right key
        # - search.highlight # a user clicks on a search result, highlight all occurrences after following the link

markdown_extensions:
    - abbr
    - footnotes
    - tables
    - admonition
    - attr_list
    - md_in_html
    - pymdownx.critic
    - pymdownx.caret
    - pymdownx.keys
    - pymdownx.mark
    - pymdownx.tilde
    - pymdownx.details
    - pymdownx.superfences
    - pymdownx.superfences:
          custom_fences:
              - name: mermaid
                class: mermaid
                format: !!python/name:pymdownx.superfences.fence_code_format
    - pymdownx.inlinehilite
    - pymdownx.snippets:
          auto_append:
              # - utils/warn-math-equation-vi.md
              - includes/abbreviations.md
              # - includes/footnotes.md
    - pymdownx.arithmatex:
          generic: true
    - pymdownx.tabbed:
          alternate_style: true
    - pymdownx.emoji:
          emoji_index: !!python/name:material.extensions.emoji.twemoji
          emoji_generator: !!python/name:material.extensions.emoji.to_svg
    - pymdownx.highlight:
          anchor_linenums: true
          line_spans: __span
          pygments_lang_class: true
    - def_list
    - pymdownx.tasklist:
          custom_checkbox: true

extra_javascript:
    - javascripts/mathjax.js
    - https://unpkg.com/mathjax@3/es5/tex-mml-chtml.js

plugins:
    - glightbox
    - search
    - blog:
          archive: false
          post_url_format: "{file}"
    - tags:
          tags_file: tags.md
    - rss:
          match_path: "blog/posts/.*"
          date_from_meta:
              as_creation: date
          categories:
              - categories
              - tags
    # - git-revision-date-localized:
    #       enable_creation_date: true

watch:
    - includes

extra:
    social:
        - icon: fontawesome/brands/linkedin
          link: https://www.linkedin.com/in/duynm1009
        - icon: fontawesome/brands/github
          link: https://github.com/duynm98
        - icon: fontawesome/brands/tiktok
          link: https://www.tiktok.com/@chikodevn
        - icon: fontawesome/brands/instagram
          link: https://www.instagram.com/hnp.w.u
# repo_url: https://github.com/duy07t1k23cht/my-blog
# repo_name: duy07t1k23cht/my-blog
